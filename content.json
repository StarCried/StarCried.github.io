{"meta":{"title":"StarCried 的狼窝","subtitle":"Nothing is true. Everything is permitted.","description":"StarCried 的狼窝，记录算法竞赛知识（OI, ACM）以及学习、工作、生活中的点点滴滴。","author":"StarCried","url":"https://StarCried.github.io","root":"/"},"pages":[{"title":"","date":"2024-08-02T02:23:55.738Z","updated":"2024-08-02T02:23:55.738Z","comments":true,"path":"404.html","permalink":"https://starcried.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 有疑问可联系博主：[去主页](/)"},{"title":"所有分类","date":"2024-08-01T09:38:50.672Z","updated":"2024-08-01T09:38:50.672Z","comments":true,"path":"categories/index.html","permalink":"https://starcried.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2024-08-06T12:14:46.261Z","updated":"2024-08-06T12:14:46.261Z","comments":true,"path":"about/index.html","permalink":"https://starcried.github.io/about/index.html","excerpt":"","text":"我是谁截止于2024年，我是一名本科生，上海交通大学强基数学专业。日常在上海与陕西活动。基本属性如下： 网名：Star_Cried。 生日：4月30日。 信息学竞赛：退役 OIer，ACMer，因此博客内有很多算法竞赛题解。 Furry：自设名为 微光，StarCried 取自星星的声音。 外文名：Ezio，多用于游戏 ID。 兴趣爱好运动什么都想试一试，感受世界和自我最原始直接的方式。 骑行：有一辆中等的自组公路车。 滑雪：单板玩家，去过两趟大雪场，想学些简单的花式，但目前没有装备、时间、资金。 羽毛球：能陪练的水平。 乒乓球：能陪练的水平。 台球：能陪练的水平。 游泳：淹不死的水平。想学自由泳。 健身：为其他运动打基础。 艺术学会如何感受，进而如何表达，最终真正了解自己的途径。 小提琴：从小学，不算专业，现在在上海交通大学学生乐团。 其他乐器：尝试学习吉他、钢琴，目的是为了想尝试的编曲增加乐理基础。 音乐：最近喜欢古典、爵士和其他轻音乐（器乐或电子），喜欢悠扬的、节奏感强、有情绪的纯音乐。 绘画：抽空自学，画了点表情包，可以在 QQ 和微信搜索“小狼微光”找到。想进一步学习。 摄影：作为绘画基础，想在旅行时记录风景和自己。有运动相机，但没有专业摄影设备。 微光微光是我展示和提升自己的一种途径。基本上，他是一个更好的我，赋予了我所期望的一些美好特质；然而他又不脱离实际，没有非凡的能力，只是尽力把能做的事做好，寻找自己的意义。 微光可以存在于各种世界观，有着类似但不完全相同的背景故事。为了完善他的形象，我已经做了一些工作： 设定图（直腿与曲腿） 3D 模型（直腿） 兽装（在做） 还有很多东西可以做： Live2D 模型（嵌入网页） 主题曲（前置技能：编曲） 更多的图（前置技能：绘画） 游戏（前置技能：…） 更完善标准的人物设定（前置技能：绘画） 我希望能让大家认识他，也通过他认识大家，以及我自己。 愿望已完成 和其他人（小提、大提）一起完成 Pachelbel’s Canon 合奏。 在生日的时候骑车去海边看日出。 目前最长单次骑行距离约 160 公里。 未完成 从上海骑回陕西。 体验一次蹦极和跳伞。 骑行川藏。 学会编曲，能完全自由地表达自己的声音。 学会绘画和设计，能自主创作有风格的作品。 获得一定的曝光度。 见识更广阔的世界。 登顶珠穆朗玛峰。"},{"title":"友情链接","date":"2024-08-02T02:22:00.142Z","updated":"2024-08-02T02:22:00.142Z","comments":true,"path":"friends/index.html","permalink":"https://starcried.github.io/friends/index.html","excerpt":"欢迎访问","text":"欢迎访问 如果您想添加友链，请联系我，格式如下： title avatar url"},{"title":"","date":"2024-08-06T07:59:16.960Z","updated":"2024-08-06T07:59:16.960Z","comments":true,"path":"gallery/index.html","permalink":"https://starcried.github.io/gallery/index.html","excerpt":"","text":"微光的画廊 加载缓慢，请耐心等待 AliceHenry1Henry2SamiHenrySamifalling2Rappylcy2024.1小猫小猫星夜3遥夜"},{"title":"","date":"2024-08-01T08:03:45.762Z","updated":"2024-08-01T08:03:45.762Z","comments":true,"path":"mylist/index.html","permalink":"https://starcried.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2024-08-01T08:47:00.398Z","updated":"2024-08-01T08:47:00.398Z","comments":true,"path":"tags/index.html","permalink":"https://starcried.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"博客园 Cnblogs 迁移到 Github Pages","slug":"博客园 Cnblogs 迁移日志","date":"2024-08-06T12:11:51.000Z","updated":"2024-08-07T07:18:12.761Z","comments":true,"path":"2024/08/06/博客园 Cnblogs 迁移日志/","permalink":"https://starcried.github.io/2024/08/06/%E5%8D%9A%E5%AE%A2%E5%9B%AD%20Cnblogs%20%E8%BF%81%E7%A7%BB%E6%97%A5%E5%BF%97/","excerpt":"","text":"前言大概是四年以前，我开通了我的博客园账号。 博客是一个很原始的互联网形式。我并没有使用其社区功能，只是当做一个跨平台电子笔记本来用。如果写的文章能给别人帮助的话，那就再好不过了。 我的第一个博客文章标题是《快速幂》。当时我才初学信息竞赛，根本没有完全理解快速幂的原理，也不知道矩阵是什么。然而，我还是从晚上别人的博客里抄来了快速幂的公式，甚至包括矩阵快速幂，复述了一遍，通过这个过程进行学习。当时我甚至不会用 Markdown，就使用博客园默认的 TinyMCE 编辑器一个个手动点击来输入上标下标。 那篇博客的最后一句话是“大家一起进步吧XD”。我想起我当时是作为一个博主的身份，以自己的文章会被很多人看到的心态写下这篇博客。内容写得十分努力，然而也漏洞百出。在 NOI 结束之后，我把这篇文章错误的地方都删掉了，以免误人子弟。 从 2020 年 5 月 5 日，停课搞竞赛开始，我写了近有 150 多篇文章，总计 34500 多阅读量。很多之前的文章在不经意间已经有几百的阅读量了，有一篇题为《高斯消元——行列式》的文章甚至达到了 2600+。然而其内容却非常敷衍，透露出一股刚学竞赛的愚蠢。我不止一次地想把这些早年文章修改整理一下，学竞赛的时候，竞赛结束的时候，高考后的假期。然而，我始终没有动手。 总是发现，学做一些事情，就像小时候牙牙学语，并不总是按部就班，而是整个人倏地置身其中，任由自己不知所措、摸爬滚打地成长。学习竞赛就是一个很好的例子。我抄过很多题解，抄过很多代码，在那许多不在教室而在机房度过的日夜里死磕看不懂的题目，在无数坐牢般的比赛中用自己的想法得到尽可能高的分数。我急着摆脱前一天差劲的自己，尽可能多地去学习新的东西，去刷更多的题，让自己 OJ 的过题数飞涨。然而，在每场模拟赛和正式比赛后，我却没有踏踏实实地去补题，去反思，去总结。我总是记不住上次比赛的题目，甚至到现在都不知道高考那些题做错了。这样的学习方式可能对我这种只有一年时间的竞赛生收益很快，但上限不高。也许，这就是我差别人的地方。博客园的样子就是很好的反映。 我从来没有记日记的习惯，也并不喜欢整理笔记，尤其是在学期已经结束、再也不会上这门课之后。但是现在我发现，竞赛带给我的感觉却很不一样。不只是因为上大学后开始打 ACM，而且我发现之前在高中学到的很多东西，在很多不经意的时刻会再次出现。大学后的每一门新的课程，都让我重新审视之前学过的知识。诸如微积分、线性代数、概率论、数论等等，我都有了新的认识。每每在课堂上学到、在题目中用到它们，我都会想到我在很久以前，又或许是不久之前，在电脑前一点点敲下关于它们的不求甚解的文章，抄背没有完全理解的模板。 因此，在这次暑假的时间里，我下定决心建一个全新的博客，好好装扮它，作为我的心灵庇护所。我想把之前欠的账尽可能还上，不再被回旋镖打到。之前，我总想着快速地把上一秒的自己甩到身后，仿佛那是一个拖累我的“别人”。但现在我发现，每段时间的我都确实是我，无论他叫 Star_Cried 还是微光。他们都没有在拖累我，正是他们一步步推动着我成为现在的自己。 成长的路程总是有舍有得。Github 相较于博客园，更难被搜索到，更难以访问，而且我会失去之前的阅读量。不过我建立博客最初的目的，也只是为自己而写而已。这次的迁移，我不想它作为一个新的开始，而是将我之前所有的一切都搬过来，擦拭干净，摆放整齐。 欢迎访问：Star_Cried 的博客园。(不再维护，仅留档) 博客迁移我觉得各大博客网站为了自己的用户量都不会去给迁移出去的方式。博客园也是如此。如果你的博文不多，那你大可以手动复制；但是我的文章有 200 篇左右，手动复制实在是累人。 网上有很多迁移的办法，大多数都是个人写的小工具。我试了很多，最终使用这个 cnblogs-blogger-downloader 将文章成功导出，效果不错。其它工具由于博客园版本更新频繁的原因，大多数已经不再适用了。我用的工具在发布日期仍可用。 网上的迁移方法大致分为几种： 网页爬虫。这种访客形式的爬虫工具无法访问文章源码，只能获取到文章的 HTML 页面，无法获取到文章的 Markdown 格式。 博客园导出工具。博客园可以备份文章为 xml 文件，许多工具对该文件进行解析，可以获取到文章的 Markdown 格式。然而，我试用了许多工具，最晚到 2022 年，这些工具都已无法使用。对照 xml 文件发现，现在的文件格式和之前有较大出入，代码字符串匹配的方式无法识别。 MetaWeblog。这是方便多博客进行同步的 API 接口，理论上可行。但我不知为何在验证部分失败了。由于作者不再维护，遂放弃。 博主端爬虫。cnblogs-blogger-downloader，感谢这位作者的开源。该工具利用 Cookie 访问博客园后台，将文章按分类导出，直接导出源码。非 Markdown 文章会导出 html 格式，Markdown 理论上可以解析。","categories":[{"name":"教程","slug":"教程","permalink":"https://starcried.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://starcried.github.io/tags/blog/"},{"name":"随笔","slug":"随笔","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"兽装制作","slug":"兽装制作","date":"2024-08-02T03:32:29.000Z","updated":"2024-08-05T02:16:33.655Z","comments":true,"path":"2024/08/02/兽装制作/","permalink":"https://starcried.github.io/2024/08/02/%E5%85%BD%E8%A3%85%E5%88%B6%E4%BD%9C/","excerpt":"","text":"前言以微光为例。包括兽头、爪子和尾巴三个部分。花纹较少，有少量头发。 粗体文字为重要，删除线文字为微光未选。 爪子材料 四面弹绒布 毛布 棉花 衬底布（可选） 滴胶指甲（可选） 工具 电动剃毛器 针线：粗针粗线 剪刀 美工刀 打板纸：牛皮纸或其他可以画图和裁剪的纸 热熔胶枪（可选，滴胶指甲） 制作步骤 使用打板纸对照手型画出爪子的形状，并将其剪切为爪掌、爪指各部分，且正反各一面。正面可以加入肉垫的形状，肉垫的洞不用裁走，裁剪外缘即可。可以用笔标注版型的名称和对齐线。 按版型在毛布上标出缝合位置。注意毛布的方向，毛布朝向应向外。可以用笔标注对应版型的名称和对齐线。 在裁切毛布前先剃毛。（可选） 使用美工刀裁切布料。（手指部分可以做成短毛的，比较好看）。 用四面弹绒布裁出肉垫的形状并缝合到爪掌和爪指上。 如用布指甲，则需独立打板缝合填充。（可选） 有毛的一面向内缝合爪子各部分。（可选：如用布指甲，在缝爪子对应位置时将布指甲缝在上面） 如肉球有体积，则将手指的内部毛布上割开并塞入棉花，最后缝上缺口。 如果需要衬底，使用同样拼合完整的版型裁两片衬底布缝合边缘，并贴合毛布的背面缝一圈固定在毛布上。 最后，将爪子翻过来，使用包边布将边缘缝合固定。 如用滴胶指甲，此时用热熔胶将其贴到对应位置。（可选）。 兽头微光使用打印头骨和 EVA 制作兽头基底。可使用海绵直接制作，在此不做讨论。 准备工作自己设计头骨头骨骨架支撑结构，决定了大体形状和大小，根据自己头的大小和形象风格确定。 可选用商用头骨，当然也可以自己设计 3D 模型进行打印。由于正面面部结构比较复杂精细，而后脑可能需要减重或者柔软和舒适性，所以头骨可以全打印或只打印面部。 微光使用的是自己设计的 3D 模型，使用 Blender 软件进行 3D 建模面部，导出为 stl 文件，即可在 3D 打印机上打印。没有打印机的话，可以找接代打的装师或网上代打。注意自己建模的话，最好找有经验的装师先检查一下模型，以免导致打出来不可用。微光找的工作室是绒光芥子。 如果自己设计头骨，模型文件具有自己的版权，请注意防止盗用。 眼睛需设计好眼睛的图案。自己画或者请人画都行。测量好眼睛的尺寸，并在打印前预留好足够的空间。 材料 打印头骨（用砂纸打磨好边缘） EVA 毛布 打印防尘网（眼睛） 棉花 亚克力球（眼球，250mm,可选） 透明硬塑料片 牙齿（可选，打印或布） 工具 电动剃毛器 针线：粗针粗线 剪刀 美工刀 布基胶带 卫生纸或保鲜膜 记号笔 热熔胶和热熔胶枪 电烙铁、线锯（切割亚克力球，可选） 制作步骤 基于打印头骨使用EVA和海绵制作兽头的基座 将EVA裁剪成多条约3厘米宽的长条， 制作眼眶 将亚克力球放到头骨眼眶处，贴上布基胶带并使用记号笔画出眼眶的轮廓 使用电烙铁或者线锯将亚克力球根据记号笔的线条剪成需要的形状 使用剪刀剪出一条宽度约为3厘米的eva条作为眼眶的边缘，使用热熔胶围绕贴在切好的亚克力球 裁剪好突出来的部分，预留平均1cm的宽度，另外一面需要裁剪的平（贴在防尘网的一面） 先在防尘网的背面贴上一层塑料片，然后将整个眼眶贴到防尘网的正面上（瞳孔一定要对准，这一步容错率较低）并裁剪突出来的部分 将做好的眼眶使用热熔胶贴在头骨的眼眶上 制作耳朵 使用打板纸裁剪出耳朵大约的形状，比划比划 细修形状，并将转移到海绵上 使用海绵制作出耳朵的基座然后将耳朵贴在头骨上 使用保鲜膜包裹需要获取的表面，然后用布基胶带贴满整个表面 使用记号笔画上需要的花纹和分割线，转移到毛布上（注意毛向） 裁布并缝纫 使用热熔胶将缝好的毛布贴到耳朵的表面 打板 - 使用保鲜膜包裹需要获取的表面，然后用布基胶带贴满整个表面 尾巴准备材料材料成本材料采购截止时间为 2024&#x2F;6，除了头骨和部分已有材料和工具，其他材料均为网上购买。 下标仅列出购置材料和工具的成本，不包括已有材料和工具。 名称 数量 单价&#x2F;元 总价&#x2F;元 头骨 1 50 50 毛布（起司毛） 1 75&#x2F;半码 75 毛布（冰淇淋毛） 2 95&#x2F;半码 195 电动剃毛器 1 178 178 亚克力球 1 24 24 布基胶带 3 12 36 卫生纸 1 打印防尘网 1 电烙刀 1 18 18 不织布 1 8.5 8.5 棉花 1 17&#x2F;2斤 17 四面弹布 2 5.5 11 头模 1 30.8 30.8 拉链 1 4.4 4.4 其他 1 27.85 27.85 总计 12 注：头骨部分，截止时间代打参考价格为 PLA 0.15元&#x2F;g。","categories":[{"name":"furry","slug":"furry","permalink":"https://starcried.github.io/categories/furry/"}],"tags":[{"name":"手工","slug":"手工","permalink":"https://starcried.github.io/tags/%E6%89%8B%E5%B7%A5/"}]},{"title":"利用 Github pages 和 hexo 搭建自己的博客","slug":"利用-Github-pages-和-hexo-搭建自己的博客","date":"2024-08-01T09:25:23.000Z","updated":"2024-08-06T12:14:48.374Z","comments":true,"path":"2024/08/01/利用-Github-pages-和-hexo-搭建自己的博客/","permalink":"https://starcried.github.io/2024/08/01/%E5%88%A9%E7%94%A8-Github-pages-%E5%92%8C-hexo-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"前言Hello world! 这是我的第一篇博客文章，记录这个博客是如何搭建的。由于我并非专业人士，仅记录我的搭建过程和遇到的问题，并且不详细解释每一步的操作。如有疑问，请访问参考部分。 目前该博客处于美化阶段，主要内容为替换默认图片（背景，图标等）。博主艺术创作能力有限，欢迎提供帮助。 待办 124 默认封面背景274 打赏组件589 qrcode807 视差壁纸1237 cursor settingsLive2D 参考 GitHub-Hexo-从零开始搭建个人博客 GitHub Pages + Hexo搭建个人博客网站，史上最全教程 volantis 官方文档 hexo 官方文档 搭建博客博客可以像搭建访问量较大的网站一样实现。一般来说，搭建网站需要购买服务器、域名、备案、购买云服务器等一系列繁琐的流程，如果要制作静态网页还需要自己手搓或者利用 WordPress 等 CMS 系统。而用 GitHub Pages 和 Hexo 搭建博客，可以快速搭建个人博客，而且不需要购买服务器、域名、备案等繁琐的流程。 Github Pages 是 Github 提供的静态页面托管服务，可以直接将静态网页托管到 Github Pages 仓库中，然后通过域名访问。相较于其他静态页面托管服务，Github Pages 免费、稳定、安全，但是在国内访问和加载资源较慢，适合个人博客。 理论上说，你完全可以自己手搓 HTML 页面和脚本完成博客。但对于像我这样的新手或者重点在成果而非过程的人来说，使用现成的框架和工具可以节省大量时间。Hexo 是一个基于 Node.js 的静态博客框架，它可以快速生成静态网页，并且可以用 Git 部署到 GitHub Pages。 创建 GitHub Page登录 Github，创建一个名为 username.github.io 的仓库，其中 username 是你的 GitHub 用户名。这就是你的 GitHub Pages 站点的仓库。可以通过访问 https://username.github.io 来访问你站点的 index.html 文件。 安装配置 Git从 Git 官网 下载安装。 因为 Git 是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。在命令行输入如下： 12git config --global user.name &quot;user_name&quot; # user_name填入GitHub用户名git config --global user.email &quot;user_email&quot; # user_email填入GitHub注册的邮箱 查看已设置的用户名和邮箱，在命令行输入如下： 12git config user.namegit config user.email 配置 SSH key: 1ssh-keygen -t rsa -C &quot;user.email&quot; # user.email为GitHub上注册的邮箱 三个默认设置就可以，不需要密码。在 C 盘 /Users/your_user_name/.ssh 目录下找到 id_rsa.pub 公钥文件，复制里面的内容，在 GitHub_Settings_keys 上新建添加 SSH key。 输入以下命令检测是否配置成功： 1ssh -T git@github.com 如果出现 Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 字样，则配置成功。 如果返回 Connection closed by 20.205.243.166 port 22，有可能是代理的问题。请关闭你的代理清除缓存（重启）并重试。 安装 Node.js从 Node.js 官网 下载安装。 我用 Package Manager 安装 Node.js 遇到了问题，可选择使用 Prebuilt Installer 安装。 安装 Hexo在命令行中输入以下命令安装 Hexo： 1npm install -g hexo-cli 创建一个文件夹作为你的博客配置文件夹所在位置，并在其中打开命令行。输入 123hexo init blogcd blognpm install 即可创建你的博客项目。其中 blog 是你的博客文件夹名。之后所有的操作都在 blog 文件夹中进行。 配置 Hexo安装 hexo-deployer-git 插件，用于部署到 GitHub Pages。 1npm install hexo-deployer-git --save 编辑根目录下的 _config.yml 文件，配置你的 deploy 部分站点信息。 _config.yml1234deploy: type: git repository: git@github.com:StarCried/StarCried.github.io.git #你的仓库地址 branch: main 现在你已经搭建好了你的博客，可以进行本地预览和部署。 如果你本地预览正常而部署后静态资源未加载（比如主题格式混乱），请检查你的 _config.yml 文件中的 url 和 deploy 部分是否正确。 除了 deploy 部分，你还需要配置其他部分，包括 site 等。 使用 HexoHexo 有以下常用命令： 123456hexo init # 创建一个新的 Hexo 站点hexo clean # 清除缓存文件hexo generate # 生成静态文件hexo deploy # 部署到 GitHub Pageshexo server # 启动本地预览服务器hexo new &lt;layout&gt; &lt;title&gt; # 创建新文章 Hexo 的工作流程是，在项目中进行主题配置（_config.yml 文件），用 hexo new 命令创建新文章、在 _posts 文件夹中编写文章后，运行 hexo generate 命令生成静态文件（要部署到 Github Pages 的文件，在 .deply_git 文件夹中），然后运行 hexo deploy 命令部署到 GitHub Pages。 美化博客Hexo 官方提供了丰富的主题，你可以在 官方主题发布页 中查看。注意，大多数主题是由社区提供的，其配置方式和插件支持等千差万别，请根据自己的需求选择适合的主题。我是用的是 volantis 主题，阅读文档以自定义美化。 主题安装参考 官方文档 安装主题。 主题文件夹下也有一个配置文件 /node_modules/hexo-theme-volantis/_config.yml。在博客根目录的 _config.yml 文件旁边新建一个文件 _config.volantis.yml ，这个文件中的配置信息优先级高于主题文件夹中的配置文件。将配置文件复制过来修改，以免配置丢失。 使用 npm 安装主题的配置文件在如上位置，而使用传统方式安装的主题配置文件在 theme 文件夹下。 遵循官方文档，修改配置文件 _config.volantis.yml 中的配置信息即可。 使用资源在配置文件中，你可能经常看到图标使用 volantis-static 位置的图片资源。这是主题的官方静态资源库，可以直接使用里面的资源。 如果你想上传自己的资源，最简单的办法是使用图床或者另开一个 github 仓库，然后将图片链接替换到配置文件中。如果你觉得加载速度太慢，也可以使用 cdn 服务，参见文档。 Live2D 插件除了主题整合的可以直接使用的插件，你也可以自己装额外插件。在进阶玩法里有一个看板娘插件（实际是将 Live2D 模型渲染到页面上）。我想更进一步使用微光模型。 待更新","categories":[{"name":"教程","slug":"教程","permalink":"https://starcried.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://starcried.github.io/tags/blog/"}]}],"categories":[{"name":"教程","slug":"教程","permalink":"https://starcried.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"furry","slug":"furry","permalink":"https://starcried.github.io/categories/furry/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://starcried.github.io/tags/blog/"},{"name":"随笔","slug":"随笔","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"手工","slug":"手工","permalink":"https://starcried.github.io/tags/%E6%89%8B%E5%B7%A5/"}]}