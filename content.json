{"meta":{"title":"StarCried 的狼窝","subtitle":"Nothing is true. Everything is permitted.","description":"StarCried 的狼窝，记录算法竞赛知识、技术、furry 以及学习、生活中的点点滴滴。","author":"StarCried","url":"https://StarCried.github.io","root":"/"},"pages":[{"title":"","date":"2025-02-28T02:35:09.033Z","updated":"2025-02-28T02:35:09.033Z","comments":true,"path":"404.html","permalink":"https://starcried.github.io/404.html","excerpt":"","text":"404 很抱歉，看来您在狼窝迷路了~ 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2024-08-01T09:38:50.672Z","updated":"2024-08-01T09:38:50.672Z","comments":true,"path":"categories/index.html","permalink":"https://starcried.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2025-02-28T02:35:45.025Z","updated":"2025-02-28T02:35:45.025Z","comments":true,"path":"gallery/index.html","permalink":"https://starcried.github.io/gallery/index.html","excerpt":"","text":"微光的画廊 加载缓慢，请耐心等待 如图片加载失败，请刷新页面或联系我"},{"title":"","date":"2025-02-28T02:34:29.383Z","updated":"2025-02-28T02:34:29.383Z","comments":true,"path":"about/index.html","permalink":"https://starcried.github.io/about/index.html","excerpt":"","text":"我是谁 截止于 2025 年，我是一名本科生，上海交通大学强基数学专业。日常在上海与陕西活动。基本信息如下： 网名：Star_Cried。 生日：4 月 30 日。 信息学竞赛：退役 OIer，ACMer，因此博客内有很多算法竞赛题解。 Furry：自设名为 微光，StarCried 取自星星的声音。 外文名：Ezio，多用于游戏 ID。 兴趣爱好 运动 什么都想试一试，感受世界和自我最原始直接的方式。 骑行：有一辆中等的自组公路车，最远单次 200 公里。 滑雪：单板玩家，去过两趟大雪场，想学些简单的自由式，但目前没有装备、时间、资金。 羽毛球：能陪练的水平。 乒乓球：学了一学期，能陪练。 台球：穿着兽装胜利过 XD 游泳：学了一学期，在游泳馆淹不死。想学自由泳。 健身：为其他运动打基础，一直在坚持。目前卧推 60kg。 艺术 学会如何感受，进而如何表达，最终真正了解自己的途径。 小提琴：从小学，不算专业，现在在上海交通大学学生乐团二提。 其他乐器：尝试学习吉他、钢琴，目的是为了想尝试的编曲增加乐理基础。 音乐：最近喜欢古典、爵士和其他轻音乐（器乐或电子），喜欢悠扬的、节奏感强、有情绪的纯音乐。 绘画：抽空自学，画了点表情包，可以在 QQ 和微信搜索“小狼微光”找到。想进一步学习。 摄影：作为绘画基础，想在旅行时记录风景和自己。有运动相机，但没有专业摄影设备。买了个拍照手机替代相机。 微光 微光是我展示和提升自己的一种途径。基本上，他是一个更好的我，赋予了我所期望的一些美好特质；然而他又不脱离实际，没有非凡的能力，只是尽力把能做的事做好，寻找自己的意义。 微光可以存在于各种世界观，有着类似但不完全相同的背景故事。为了完善他的形象，我已经做了一些工作： 设定图（直腿与曲腿）（待更新） 3D 模型（直腿） 兽装（单头）（定制微光 2.0 全装） 全装出场照 还有很多东西可以做： Live2D 模型（嵌入网页） 主题曲（前置技能：编曲） 更多的图（前置技能：绘画） 游戏（前置技能：...） 更完善标准的人物设定（前置技能：绘画） 我希望能让大家认识他，也通过他认识大家，以及我自己。 愿望 已完成 和其他人（小提、大提）一起完成 Pachelbel's Canon 合奏。 在生日的时候骑车去海边看日出。 目前最长单次骑行距离约 160 公里。 未完成 从上海骑回陕西。 体验一次蹦极和跳伞。 骑行川藏。 学会编曲，能完全自由地表达自己的声音。 学会绘画和设计，能自主创作有风格的作品。 获得一定的曝光度。 见识更广阔的世界。 登顶珠穆朗玛峰。 联系方式 Githubhttps://github.com/StarCriedBiliBilihttps://space.bilibili.com/351621972Titterhttps://twitter.com/CriedStar58579洛谷https://www.luogu.com.cn/user/280015"},{"title":"友情链接","date":"2025-01-02T05:19:30.715Z","updated":"2025-01-02T05:19:30.715Z","comments":true,"path":"friends/index.html","permalink":"https://starcried.github.io/friends/index.html","excerpt":"欢迎访问","text":"欢迎访问 欢迎添加友链。"},{"title":"","date":"2024-08-01T08:03:45.762Z","updated":"2024-08-01T08:03:45.762Z","comments":true,"path":"mylist/index.html","permalink":"https://starcried.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2024-08-01T08:47:00.398Z","updated":"2024-08-01T08:47:00.398Z","comments":true,"path":"tags/index.html","permalink":"https://starcried.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"游轮，南极，和珠穆朗玛峰","slug":"游轮，南极，和珠穆朗玛峰","date":"2025-08-12T11:55:50.000Z","updated":"2025-08-26T08:10:02.545Z","comments":true,"path":"2025/08/12/游轮，南极，和珠穆朗玛峰/","permalink":"https://starcried.github.io/2025/08/12/%E6%B8%B8%E8%BD%AE%EF%BC%8C%E5%8D%97%E6%9E%81%EF%BC%8C%E5%92%8C%E7%8F%A0%E7%A9%86%E6%9C%97%E7%8E%9B%E5%B3%B0/","excerpt":"","text":"五月劳动节的假期，我和彬瑞开启了四天四夜的游轮之旅。这次旅行并不便宜，我们考虑了很久，才在还剩半个月的时间里下定决心买票——实际上，在出发前两天我才拿到我的护照。 那是一次很美好的旅行。巨大的游轮，里面有各式各样的娱乐设施和餐厅，以及红紫色的酒吧。每桌一位的专属服务员，无限的美食，一望无际的大海，都让我感到高消费带来的遍历、舒适和快乐。 我们开始这趟旅行的原因是，想珍惜年轻的时间享受时光不留遗憾，并且摆脱只会存钱不会花钱的消费观念。从结果来看无疑是很成功的（指我的存款显著减少了），同时也让我重新提起了那个没有终止的思考：人生的意义是什么？或者，简化些的版本，我想过的人生是怎样的？ 最近一直在求职。我把自己反复打磨到反光的简历拿给各种人看，虽然表面光鲜，总能过简历筛，但还是要笔试面试的。想做 QR 岗需得参加最长 7 小时的笔试，考概率统计组合算法题。然而我并没有很认真学概率统计方面的课程，做题做得十分勉强。一次又一次的失利令我信心大失，又陷入了痛苦的焦虑之中。 焦虑并非毫无用处，事实上，他是我打起精神前进的必需品。然而，以前的我尚且能用可见的进步缓解我的焦虑，今天的我已很难做到这一点：我的能力和精力达到了上限。我对我自身有了更深的了解，也对社会乃至世界有了更深的了解，我此刻正站在人生道路的关键岔口——但我却没有足够的经验和技巧来做出决定。这些决定十分重要，包含了取舍、牺牲、理性的思考和感性的参悟。它们决定着我未来会成为什么样的人，决定着我会为什么而奋斗终生。这些决定如此重要，如此困难，故而化为焦虑，我无法用之前的经验疏解的焦虑。唯一的办法就是改变自己的想法和认知。我从小到大在应试教育中养成的想法，此刻成了我继续成长的阻碍。 第一个想法，即是所谓“争做第一”的攀比心理。从小我便从老师和家长那里灌输这种思维方式，他们希望我竞技争先，和更优秀的孩子比，做所谓的“第一名”。由于我希望得到认可（这个之后也会提到），且碰巧有一些天赋，我的确满足了长辈的要求，也非常受用他们的赞赏。渐渐地，我养成了一个习惯：见到任何人时第一件事是评价对方的各项能力，尤其是同龄人，且不限任何角度。只要是我觉得好的，我都会去比。见到聪明学生，我会去比排名和做题；报了篮球班，我会和那些又高又强的体育生比；再到后来，和高中同学的谈话中，甚至开始比哲学，比谁的思想深度更深，谁更有道理可以说服他人……最后，我见到什么人都会条件反射地想：他哪方面比我厉害？我可以做得和他一样吗？ 这些想法固然是好的，也的确很大程度帮到了我进步，但问题是——它们的动机来自于“攀比”。攀比，是中性词还是贬义词？如果它后面跟的是我刚才说的东西，比如成绩、能力等，那仿佛可以定义为一种正向的竞争。如果后面跟的是比如消费能力、社会地位等，那又是妥妥的贬义词。但我认为，“攀比”一词的核心不在于宾语——比的东西是否符合社会主流认知——而在于主语，在于要比的那个人，是以什么样的心态去比的。如果那人是以满足自己虚荣心为目的去比，那么即便比的是如能力、思想这般高尚的东西，即便会被社会认同、被其他人夸赞，即便提升名次的手段的确是提升自己，却也仍然是攀比，只因为其动机不纯。 既然说到“不纯”，那动机的纯与不纯如何区别？我们可以想象一位学者，研究员，他已经达到学术评价体系中的最高峰，拥有最好的资源和名利。他之后会做什么？如果是纯粹的学者，那毫无疑问是继续研究，致力于人类认知的发展。但实际上对于大多数这样的人——我可以肯定的说——他们绝对分神到了其他地方，分神到了巩固自己或家人地位、用资源换取稳定和利益，甚至压制竞争对手上。程度大点，我们就称之为“学阀”。这是一种“邪恶的”不纯。还有一种不纯则是我身边许多人的情况。我的同学们尽力去保研、直博，只是因为现在出去找不到工作，或者不知道自己想干什么，于是在学校拖延时间，试图等待人生的正确道路自己送上门来。 回归正题。我的动机显然不是为了提升自己本身，而是为了超越别人，满足被他人仰视、称赞的快感，喜欢被别人叫做“聪明的小孩”。这种动机适合在体育竞技或者当兵的时候用，但对我来说，在许多情况下会有负面作用：如果和别人在自己不擅长、没有天赋的赛道比，那么付出的经历越多，受到的挫败感越大。在这种情况下，确实可以及时止损换赛道，可问题是，如果这条路是自己喜欢的呢？小时候我曾喜欢画画，在纸上画、墙上画、用电脑画图画。但由于没有人指导，总是画得很抽象简约。直到一次做美术课作业时，我的妈妈说我画得好丑，“没有画画的天赋”，直接帮我画了一幅。我突然就丧失了对画画的全部热情。我开始排斥画画，不敢展示自己画的任何东西，因为我最在意的人对我下了“没有天赋”的评价。然而，在我的记忆里，画画是我少数自己只是因为感兴趣就开始的活动之一。如此，一份纯粹的动机葬送在了我的虚荣心下。 反过来讲，我也会因为虚荣心去做一些我本来没有兴趣的事情。这部分可以算是好处居多，因为它会帮我尝试一些全新的东西，比如做兽装、重拾画画、做 3D 模型。如果不是为了让大家觉得我很厉害，我应该一辈子不会去碰针线活、学 Blender 和 Unity。但当我实际上手做之后，如果运气好有点天赋，那我很大概率其实会享受那个过程。在学着做 3D 模型时，我跟着教程做到了凌晨四点，看着自己的设子根据自己的心意渐渐成型的确是令人愉悦的事情。如果到了这种状态，就有很大的机会将其转化为纯粹的爱好——目前对兴趣爱好的成功率较高，因为没有明显的评价体系身边也没有许多能被攀比的人。 因此，要解决这种焦虑，最有效的办法就是断掉焦虑的根：攀比。然而，十几年来养成的习惯肯定无法一蹴而就地改变，而且我还想保留其中的正面部分，于是我决定用理性的思考计划来解析和说服我自己。首先定性，想清楚自己为什么要做这件事，对它进行必要性、紧急性等分级；然后设立目标，明确所有事都是几乎无法做到最好的，结合必要性确定自己想达到什么水平、需要付出多少等；之后对目标进行长线计划，分段完成什么子目标，预设情景协调自己的各线，如何融入自己的生活方式之中；最后脚踏实地，一步步开始实践，并由实际情况反馈调整计划。如此一来，对于任何事情就可以明确其定位，用符合实际的定位代替“做第一”。如果遇到比自己强的人，可以用类似的方法分析他对这件事的定位，然后将自己与其整体进行评价，通常会发现自己并没有什么理由非得超越他。 第二个想法，则是认可感。刚才提到，我进行攀比的最大动机就是为了得到别人的认可。这导致我将自己的价值建立在他人的评价之上，而这个“他人”通常是任何人，好人，烂人，价值观不同的人，因此必定会有不可调和的矛盾。同时，我还会被身边人的价值观推着走，自己无法控制，导致自己疲惫而无所适从。虽然我一直以为自己有独立思考和反抗精神，但这种错误的价值观是耳濡目染、潜移默化的，因此直到最近我才发现，自己的根是歪的，飘的，不稳定的。 不得不承认，认可感是人类的正常心理，而我的确很受用这种心理，从出生一直在受用着。但如果不摆脱这种心理，肯定称不上是精神独立和成熟。因此，我必须削弱认可感的重要地位，逐渐建立自己的个人价值观，形成自己的评价体系。这并不简单，需要足够的能力、自信和定力，而我在这几年的实践摸索中已经基本得到了这些东西。只有建立了自己的价值观，才算拥有真正的自尊。一个很明显的、值得我自豪的转变是，我可以自信地表述我的观点，并对他人不符合我价值观的评价心如止水。之前的我可能会认为这是一种自大，但这实际是一种必要的自信。过度谦逊会导致自卑和自我否定。 然而，我仍然渴求着认可感，这种来自他人的不稳定的东西。可能是我缺少归属感的缘故，也可能是我朋友比较少的缘故。也确实，一心想着打败别人的人很难有什么人想亲近。我在尝试磨平棱角，试着主动靠近他人，试着赞美他人、给予他人尊重。我有自信自己终会找到有归属感的集体和知心朋友。 第三个，最让我焦虑的事情，就是找不到人生目标。小时候的我也许是有的：考清北，做国家主席，做宇航员，赚最多的钱，爬上世界最高的山，总之都是要做最好的。鉴于以上“攀比”的思考，以及我没有考上清北的现实，“争第一”和“做最好的”已经很难再被认为是人生目标了。在转段时我终于意识到了我人生目标的缺失。但，我没有足够的时间和良好的心态来决定一个如此宏大的事情了。 一个折中的办法是先确定短期内的目标、大方向。比如，我确定我不太喜欢学术，且目前自己的竞赛经历很有竞争力，不用卷学历，因此可以先出来就业积累实践能力经验以及资金。在实际生活中会遇到更多人，了解到更多东西，有了更多思考，那就是在寻找目标和创造意义。也许这个目标会变，也许只存在很短的时间，无论如何，它都会更充实我自己，也绝对优于原地踏步自我内耗。 我很喜欢自然风光，喜欢草原，喜欢高山，喜欢瑰丽的、远离人类社会的景色。我想去看南极一望无际的冰原，想去挑战珠穆朗玛峰。世界很大，很多人没有胆量和能力去见识。我有。为此，先要趁自己年轻积累一定的资金，越多越好。这也是我选择直接就业的一大原因。 南极，珠穆朗玛峰，听起来如此遥远。小时候的书里给我们描绘了这样绚烂多彩的世界，那时的我们期待着自己能成为很好的人，独一无二的人，顶天立地的人，去世界最高的山峰之巅，去世界的每个角落，见识地球所有自然的、人为的五光十色。它们和画画一样，是我心里最原始最真实的价值。然而，在成长的过程中，大多数人失去了初心，或是安于现状，或被现实裹挟，陷入柴米油盐和鸡毛蒜皮。 游轮之旅提醒了我努力奋斗的目的：去实现自己浪漫的理想，而不是什么成家立业。我仍然怀揣着那颗登顶的心，只是为了走此世界一趟，不留遗憾。航行在大海上，我知道，在广阔的大海之外，有蓝白色的大陆，有跃起的鲸鱼，有顶天的山峰，有极光和星辰。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"Outer Wilds","slug":"Outer-Wilds","date":"2025-06-23T03:28:44.000Z","updated":"2025-08-04T12:17:19.566Z","comments":true,"path":"2025/06/23/Outer-Wilds/","permalink":"https://starcried.github.io/2025/06/23/Outer-Wilds/","excerpt":"","text":"2025.06.23很早之前的游戏了，初中还是高中时也在视频网站上见过。但是弹幕和评论都建议没玩过的去亲自体验一下，于是把它当做一个需要仔细品味的艺术品，过滤了剧透内容，等待一个机会完整体验一下。然而碌碌这几年，我的时间花费在学业，发展和快餐娱乐上，直到转段这段时间里迷茫困苦，不知所措的时候，晓天送了我这款游戏。 晓天说，听闻我决心读博，他希望这款关于未知的游戏能带给我在科研中探索未知的勇气。它的确给了我勇气。它给了我接受自己，面对未知的勇气。 作为一款解谜游戏和宇宙探险游戏，它没有让我失望——它的确是一款游戏史上独一无二的明珠。我废寝忘食地玩了不到一周的时间就通关了，总游戏时长不到 16 小时。玩 Outer Wilds 的时候我正在准备数院直博复试。前几日我在另一篇博客中提过，我下定了决心要读博，因为我还抱有对科研的热情，但实际上我并没有完全清楚我有这种感觉的原因。我也没有搞清楚为何我会如此抗拒就业。而这款游戏给了我一个可能的答案。 那个答案是：未知。 人们总是想待在自己的舒适圈里。虽然这是老生常谈的话题了，但只是空喊着口号是没有半点用处的，甚至还会给你一种你掌握和看透一切的假象。自以为自己已经为突破舒适圈做得足够多了，但很多时候，很多习惯和想法之所以“舒适”，是因为自己压根没有意识到自己身处其内。提高认知，与拥有打破常规的勇气更加重要。Outer Wilds 给予我全新的认知是：我害怕未知。 2025.08.03洗完澡，刷完牙，舒舒服服地躺在床上，却失眠。辗转反侧之中，又打开 Outer Wilds 的原声带，听了几曲便热泪盈眶。 想起之前没有写完的这篇博客，干脆起身去写点什么。 有趣的是，Outer Wilds 对我影响如此之大，我却没有写完此篇。我想，很可能是它的影响太大了，令我百感交集、思绪万千，以至于千言万语涌到嘴边，不知先声何事。又或者，是我获得了人间的真理，它太过神奇，难以言述，令我无从谈起。 在华为实习了一个月，又艰难地寻找金融量化公司的实习。几个月前我还对金融嗤之以鼻，认为这是门不创造价值的行当。我只能说，人是会变的，有时候潜移默化地变，有时候翻天覆地地变，变成陌生的样子，变成以前的自己难以想象的样子。这也是我写博客的初衷之一。与其说是嗤之以鼻，不如说是纸上谈兵。不同的人，不同的话，不同的见解，不同的观念，全部都是纸，非得亲自去试试才好。不去寻找，不去体验，永远画地为牢。 我害怕未知，很多人都害怕未知。有些人聪明一点，消息灵通一点，赚赚信息差的福利——我，以及我身边的大多数人都是这样的。从小到大，我只是在单线作战，只是天赋好些、运气好些使我到达现在的境地。但其实，背水一战说得上勇气吗？如果我家境殷实、无忧无虑，还会有今天的自己吗？从小到大，我一直被告知将来会走到一个岔路口，一个选择的时刻。而我被培养出的惯性思维告诉我，只要去考虑读博的路就好，其他不用考虑，一切就按这条路准备。然而，真正到了这个时刻，我却突然发现：我设想的道路荆棘丛生，想要强行通过，尚不知荆棘多长，然而必定会鲜血淋漓。其他我不考虑的路，倒是平坦顺畅。 我犹豫了。我慌乱了。我从没了解过其他岔路，从来没有计划过走其他路。等下，我计划过吗？我知道继续读书会把我引向哪里吗？我不是不喜欢做计划的吗？我疑惑了。我的确是不喜欢做计划的。那么，我又是如何确定我非得走这条路呢？我思索。我发现，我之前仅仅是在听从其他人的意见。我从来没有真正的自己思考过，我该走哪条路，就像我的同学们会因为“想继续积累经验”“提高学历出来好找工作”等原因继续读研一样。一直以来，只是因为我刚好聪明些，因为读书刚好是正确的选择，我才走到这里。如果我能顺利直博到我想读的专业，我可能会继续这样走下去；然而当我遇到阻碍时，当我发现我不得不做取舍时，我发现，我从来没有真正做出选择过。 总是说，选择大于努力，聪明人会做选择。但其实，聪明人真正聪明地方是，不被惯性束缚，勇于探索未知，发现常人看不到的选项，正确预估价值，并能有所取舍。困在茧房里，不去探索，不去拥抱未知，只能像卡常数一样，像普通人搞科研一样，在已知的领域里，捡捡前人大拿的残羹剩饭，缝缝补补，却沾沾自喜。 人有恐惧，恐惧让我们躲避危险，保证人的繁衍生息；人有勇气，勇气让人面对未知，让人踏上未知的土地扩张生存版图，让人敢于用火用电，能使用足以杀死自己的力量生产发展。马克思主义原理中说，实践是根本，理论做指导。现代物理告诉你，肉身前往黑洞会被撕成碎片，但你若是不亲自去，如何知道是不是有别处会有个白洞将你完整地送出去？龙卷风会把你吹向太空，但你如果不去风眼，如何知道这个庞然巨物的中心竟是静止的？Outer Wilds 的魅力正在于此。未知带给你恐惧。它是困难，同时也是前进的关键。宇宙是广阔的，危险的，美妙的。纵然未知有危险，但也有惊喜。做一个安定的居民，还是一个勇敢的旅人，这是我需要做出的人生抉择。 Outer Wilds 给了我一个探索未知的机会。它的时间循环设定让我没有后顾之忧，恐惧也减少了几分，也让我重新认识了自己。值得高兴的是，现实生活中尝试许多未知的事情，也并不会让我死无全尸。很多时候，一些过于悲观的推测，其实是一种作茧自缚，一种给自己留在舒适区找的借口。对未知的解决办法是，去尝试，去收集信息，积累经验，这样未知就会逐渐被征服。 我本来以为我还挺莽的，甚至在之前的文章中自称为“赌徒”，但其实想想，我大多数时候只是没得选择，all in 的收益最高罢了。或者是，我的本金其实没我想象的少，我的经验和能力是我底气的来源。如果我能进金融公司每天和统计与博弈打交道的话，也许会变得更激进些。 四点多了，天快亮了。上次熬得这么晚还是在通宵做微光 2.0。说起来，模型也做好了，整理和分享还是蛮必要的，找时间做做吧。如果找到实习了就做！","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"点评","slug":"点评","permalink":"https://starcried.github.io/tags/%E7%82%B9%E8%AF%84/"}]},{"title":"人生的意义是什么？","slug":"人生的意义是什么？","date":"2025-05-08T07:56:24.000Z","updated":"2025-06-23T03:25:19.455Z","comments":true,"path":"2025/05/08/人生的意义是什么？/","permalink":"https://starcried.github.io/2025/05/08/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"最开始是为了整理自己，做出选择，于是把脑袋里想到的事情都摆出来。如今我已经做出了选择，就顺便一起在这记录后续吧。 什么选择？本科毕业后升学还是就业的选择，未来人生道路追求的选择。 2025-05-08人生的意义是什么？ 最近强基的转段政策出了，我也阳了，脑袋昏昏沉沉的。自动化摧毁了我的 planA，正当我准备就此放弃去华为打工的时候，思政老师告诉我可以看看数院的相关方向的老师。 许志钦老师。他问了我一个问题：你的博士和未来规划是什么？ 我感觉我没有什么规划。我告诉他，我只是觉得自己有能力也有兴趣进行研究才申请博士的。我感觉他不会满意这个答案。 职业生涯规划课上，我告诉吴老师我现在在做一个艰难的选择——而这一切都是我不知道我喜欢什么导致的。吴老师说，你没有尽力去探索。 我喜欢什么？有很多东西我都喜欢，我喜欢坐游轮度假，喜欢滑雪的快感，喜欢自己被人敬仰，喜欢被关心，喜欢被理解，喜欢自己高人一等，喜欢和更有能力和智慧的人交流合作，喜欢尝试各种新的东西并且觉得自己学得很快。但是把一件自己喜欢的事当成人生目标去追求？是不是有点过于庞大了？ 但其实是不是，职业发展，比如去读博还是去工作，实际上和人生发展不是完全重合的？很多人告诉我，工作不是生活的全部，你可以不喜欢自己的工作，然后在业余时间做自己喜欢的事情。读博这么大一件事情，怎么可能完全喜欢？ 人生目标这个命题太庞大了，因此我不敢把什么东西轻易地放上去。但实际上，即便没有人生目标，只是单纯的喜爱，也可以成为一种动力。我现在没什么动力，是不是其实我对“兴趣”这个词的期待太高了？把它当成一种信仰之类的这辈子都不会变的东西。然而这种东西对我来说或许是很难出现的。很多人都没有这种东西，但他们也没有就因为找不到而放弃行动啊？因为一旦停下脚步，就彻底丧失了遇到它的机会。 所以最好的办法可能是，尽量逼近自己的目标，在这个过程中不断调整方向，不断成长，就算最后找不到，它也并不是人生意义的全部。 爸爸告诉我，整理自己，把自己喜欢的东西和不喜欢的东西分清楚、列明白，然后再做选择。 我喜欢的东西 在团体里成为拔尖人物，会给予我优越感 因为成绩而得到赞赏和肯定 与志趣和水平相同的人沟通思想、团队合作 喜欢创造东西，进行大胆畅想 喜欢尝试新事物，学习新技能 合适的压力，但足够的正反馈 认为自己没有在浪费时间 我不喜欢的东西 没有足够的正反馈，付出没有回报 被动地将自己与更好的人比较 无聊、繁琐、重复性的工作 纠结、难以抉择 进行快餐娱乐后的虚无和疲惫感 我似乎有两种不同的感觉。一种感觉让我安定下来，拿一份不错的薪水，尝试不同的事：然而这会导致一种自我放逐的感觉，仿佛我在逃避什么，不知道自己想要什么。诚然，到华为之后还会有向上晋升的空间——你永远不知道之后会发生什么会有什么新的感觉。 另一种，是那种我打竞赛时会有的感觉，那种背水一战的感觉，那种不甘心的感觉，那种不成功便成仁的感觉。我会有很大的压力，我会感到疲惫，感到想逃，但是那种反馈也是独一无二的，让我感到活着的。 许老师今晚要和我线上谈话。我觉得我之前说的话给了他不是很好的印象。我需要纠正这一点。 我认为兴趣是很重要的动力，而兴趣需要好的、及时的正反馈来维持。我不喜欢做冗长的、繁琐的、不符合直觉的工作，因为这样的工作会让我感到疲惫、无聊，我认为我不能在这样的工作中发挥创新力和得到反馈。机器学习作为一个新兴的、快速发展的领域，其中很多东西违反了做数学工作人的范式，但却十分符合直觉，比如模型不知道怎么运作的但实际表现很好。这符合我的兴趣，我很乐意去解释这些直觉，也认为做这些能实际帮助到生产生活的工作有足够的正反馈。同时，我喜欢研究新的东西，也自认为擅长、喜欢融会贯通和学科融合，毕竟神经网络的灵感来自于生物。 至于未来规划，说实话，我没有搞过科研或者工作过，我不知道哪种生活更适合我。但我之所以选择继续读博，是认为自己有足够的能力、抱负和毅力去做科研。我喜欢探索新的事物，喜欢逻辑思考的感觉，喜欢探讨问题的思维交互，要说有什么目标的话，最终希望达到提升自己能力、视野、高度的目的。 （成绩）数院本科的教育，大多是将书上的东西硬塞给学生，尤其是强基的课程还加了些更细更专业的课程，我没有探索的快乐。另一方面，我的竞赛成绩却让华为一直期望我加入他们。我去华为实习过，我感觉在公司工作有一种绝望的平静感，虽然能一直往上爬，但是目标是为了薪酬，为了生存，而失去了对什么东西的追求的热情。虽然成绩很打击我，虽然我知道博士可能很难读出来，但我仍然相信我有搞研究的能力，仍怀有对科研的热情，我想尝试一下。 我最后是这么给老师说的： 老师好，我昨晚自己想了很久，我希望您抽出些时间听听我的思考。我认为，我仍然怀有对科研和探索未知的热忱，我仔细回忆了我选择停课学竞赛的那天，在向我的父母、班主任所有前辈询问建议的时候，我说的是“我喜欢”它，而不是什么为了借此上大学。而当我做出这个选择后，我就全身心地去投入其中了。这期间有很多次的挫折，我看到了很多同学付出很大的代价然后沉没。但我从没想过放弃，而是尽自己的全力，让最后的国赛决定自己的命运。 国赛结束的那晚，我和队友们瘫躺在宿舍。有人得了金奖，有人一无所有。我得了银奖，我知道目前的目标已经结束了。于是我设立了新的目标：找到人生的目标。 然后我来到了大学。上海和交大对我来说都是新鲜东西。我尝试了很多新事物，遇到了很多优秀的人。我逐渐变得健谈，变得自信，变得视野开阔。然而，我看到的越多，我的选择越多，我越是不知道自己想要什么，目标在哪里。我一直很想做科研，然而我发现那些专业课中晦涩的公式和定义让我觉得乏味，即便我硬着头皮磨时间试着学进去，最后得到的成绩并不令我满意。于是我的信心开始受挫，我开始怀疑自己，怀疑自己是否有做科研的能力，怀疑自己是否真的喜欢科研。为了缓解这股情绪，也因为自信，我告诉自己：我有能力，但能力不在科研这里。然而，到了转段的这个日子，我还是犹豫了，于是谨慎地告诉了您我的未来规划。 直到昨天，您告诉我，我的能力没问题，甚至还因此担心我是不是能做科研的人。我感觉就像是，之前所有那些幻想出来的壁垒，突然间轰然倒塌。一种熟悉又陌生的心情涌上心头。 您说我现在还年轻。我读了一篇我在18岁生日之前写的博客。我更年轻的时候，喜欢做更大的梦，喜欢孤注一掷。正因为我长大了，我才变得畏缩，变得保守，变得不安，变得不敢追逐自己的梦想。我很怀念当初的那个自己，当初的那个自己肯定讨厌现在的我。然而，我仍然保留着读博的想法，我知道，那其实是曾经的我在和我对话。您有空的话，欢迎看看这些幼稚的文字：https://starcried.github.io/2022/03/12/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%AD%A9%E5%AD%90%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%E5%AF%BF%E5%91%BD/。我认为，伟大的数学家在某些方面上都是不成熟的，都是幼稚的。 于是我想，我不甘心放弃自己读大学的初心，即去拓宽人类知识边界，为人类做出贡献。我从昨晚您的话中感觉到您也是这样的人。因此，我决定申请读博。 至于您认不认同我的动机，或者觉得我是否真的能做到这些，是不是一晚上脑子一热的三分钟狂热，您不必现在下结论，因为我自己也不敢确定——我更愿相信这是出于我作为数学生的严谨（我也不敢确定我是否能通过复审）。但我希望大四在您的组进行工作，至少能指导我写出毕业论文。届时根据情况你我再做决定不迟。 2025-05-19现在看看，当时实在是太情绪化了，而且给导师发那种博客感觉挺幼稚。无所谓，幼稚对我来说不是坏事。 我报了许老师的名，也联系了他组里的博士研究生。学长十分热情，我们电话交流了许多事情，包括我如何进组和组里环境如何。待遇自然不如工作，工资也比其他学院的少，每天要工作很久。 2025-06-08我决定放弃读博，去工作了。 也许你觉得很可笑，感觉我像墙头草一样摇摆不定。我记得这件事。但反过来说，或许就是因为我害怕做墙头草，才难以彻底结束我读博的想法。这种事谁也说不清楚。 做出这个决定的直接原因是：数院复试的结果出了，我虽然过了及格线但没在名额内。我很讨厌这种感觉，这种付出努力但不被认可的感觉，这种被别人掌握生杀大权的感觉。即便这次我被补录了，后面还有导师的读书报告，还有听说很难的博资考。更何况，上交的数学系并非顶尖水平。另一方面，我只是联系了一下 HR 打听我如果去工作的待遇，她就给我推荐了她认为很好的终端的组，还联系了组里的高级工程师，邀请我去组里提前工作一样实习，甚至帮我搞进了已经报名截止的项目，方便我和朋友 zmy 一起实习。 直博复试的前一天我和舍友聊天，他问我，我为什么不直接去华为？舍友读博的主要原因就是他现在没法找到工作，因此完全不理解我为何还要直博。复试的当天我站在面试官前面，一个年轻老师问我，你这样的资历，应该有很多像华为的大厂要你吧，为什么还要申请直博？我笑了，回答说，我想做科研。 我在撒谎。我不知道我真的想要什么。我的“想”完全脱离现实、漂浮不定。 我问了许多人，问了老师、学长、家人、同学，甚至 AI，让它帮我分析，也写了职业生涯规划书——在众多的建议和信息中，除了“热情”，读博对我来说没有任何优势，更不用说经济这类现实因素。如果我是理性的，那最优决策毫无疑问是去工作。我居然纠结了这么久。我不知道这份所谓的科研“热情”从何而来，可能我只是喜欢博士这个 title，可能从世俗的眼光看博士更有竞争力。但是，我的目标之一不就是摆脱世俗吗？不就是想跳出上一辈嘴里的循环吗？还有一种可能，也是我之前提过的，我想再留在象牙塔提升积累自己。工作真的没法做到这一点吗？留在象牙塔里，是否其实是一种逃避？ 我自以为的自我思考，实际大部分信息都来自于各种各样不同的人，因此我问的人越多，越混乱——我完全没法将这些信息进行有效的核实和整合。那么，抛开那些乱七八糟的信息，停止患得患失的自我焦虑，我想我应该听从内心的声音，听从自己的直觉。 我的直觉告诉我，从我来上交开始学数学就学得十分痛苦，学校从把我们信竞银牌的骗来强基之后就没有给予相应的机会和尽培养义务，还变着法子卡我们的升学，那么在名校中排不上号的上交数学系期望并不高；我的直觉告诉我，我对就业的排斥很大程度上源自于未知，但这种未知除了失败，其实更多的是机会，尤其是对我这种自认为在多种能力上具有优势的人来说；我的直觉告诉我，我不是一个甘愿坐冷板凳被人忽视的人，我不是一个收到阻挠只会闷头硬顶，只是因为我不想让别人认为我摇摆不定或没有能力——那是一种幼稚的行为——的人。真正的智者有眼光把握机会，有智慧创造有利于自己的不公平环境，有勇气面对世俗和传统的质疑和评价。虽然听起来像是在大言不惭地自我安慰找借口，但……确实像。不过我们可以走着瞧。 更何况，我并没有违背和放弃我最初的想法。至少对 AI 来说，现在的形势是公司的进步速度远超高校。众多公司有着研发岗的职位，我可以向研发岗发展，甚至可以申请在职硕士和博士。我依然梦想着，自己有朝一日，可以做出些为人类有贡献的东西，能让自己很自豪地说出来的东西，能让我有兴趣、动力和甘愿奉献一切去追求、去热爱的东西。只不过我认识到，最适合我的方式，不是留在学校罢了。 说服我自己后，我瞬间感觉天地宽广了许多。那些有压力的、令我焦虑的、令我沮丧的事情都不用担心了。我有更多的时间去完善和提升自己，去尝试更多的东西，而不是将时间花费在纠结和做选择上。我不用再修那些令我作呕的偏微分方程（虽然我已经修了），不用再违心地应付差事，不用再担心难得要死的考试，而是去实习，去提升真正的能力，去找自己喜欢的、擅长的事情做。 突然翻到之前一篇题为《结局》的博客，是我在清华强基初审结果出后写的。接受失败，做选择，已经不是我的第一次了。 可是还得找学上。他们问我，想去哪个学校，到哪个城市，学什么专业。这些都是我从未想过的事情。我原本以为我不用考虑它们。但是，突然，它们，突然就全部向我蜂拥而来。 我从未想过。一直以来，我都只是在学习。单纯地学习。没有目的的学习。为了更好的生活。从没想过什么事业。专业，感觉就像，我一选择就要花费大半生的时间奉献的东西。太可怕了。我好像对研究没有什么热情。也许，早早出来就业吧？那种固定的工资、假期、工作位置的职业。工作，交养老金，养儿育女，死去。或许还像其他中国家长一样希望子女完成自己未竟的事业。这太可怕了。 唉，妈的，本来不想再在这个学校流泪了，还是没憋住。算了，流吧，再流不了几次了。 花了几乎整个下午的时间在机房整理心绪。和许多人聊天。看看自己之前的文字。我的理性和感性在拉扯。实际上并没有那么糟，我还有银牌，还能报其他学校，文化课也不差。甚至，还有人对我说，还有高考。 “我相信奇迹。” 我相信奇迹吗？相信。在今天之前，我能到达这一步，就已经是奇迹了。正如我之前说的，从没有人要求我上清华，一直以来都是我自己在执着着，却又不想动。我最大的敌人就是我自己。现在，整理心态，备战高考，也是我与自己的战斗。但要是说，还有最后一丝希望，高考裸考上清华，这几乎是虚无缥缈的事情了。这是真的奇迹。而奇迹不会太多次降临到一个人身上。不过，相信这个奇迹似乎是一个调整心态的很好的方法。 一个珍贵的生日礼物。清华送给我的。我会在人生的道路上好好珍藏它。 “也许，早早出来就业吧？”那时候的我就认为，就业是一种一眼望到头的事情。但还在高中的我是怎么得到这个信息的呢？通过有限的别人的信息，用自己幼稚而偏执的想象加以加工。这显然算不上什么智慧和理性。人生当然是一眼望到头的事情：坟墓。但步入坟墓的道路上，仍然有众多想不到的可能性和美丽的风景。 从没有人要求我上清华，也从没有人要求我读博士。拿自己和别人比了这么多年，终于发现自己在做一些不适合我自己的事，发现自己疲惫到泄气。是时候认真听听自己的内心了。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"学业","slug":"学业","permalink":"https://starcried.github.io/tags/%E5%AD%A6%E4%B8%9A/"}]},{"title":"一次失败的社交","slug":"一次失败的社交","date":"2025-04-11T12:47:51.000Z","updated":"2025-08-12T11:31:05.012Z","comments":true,"path":"2025/04/11/一次失败的社交/","permalink":"https://starcried.github.io/2025/04/11/%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%A4%BE%E4%BA%A4/","excerpt":"本文含有隐私信息，访问请联系微光。","text":" 请输入微光提供的通行证：","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"Me","slug":"Me","permalink":"https://starcried.github.io/tags/Me/"}]},{"title":"说话","slug":"说话","date":"2025-03-15T07:53:01.000Z","updated":"2025-03-21T05:07:14.794Z","comments":true,"path":"2025/03/15/说话/","permalink":"https://starcried.github.io/2025/03/15/%E8%AF%B4%E8%AF%9D/","excerpt":"","text":"日历上定的普通话考试，下午吃完饭准备去，一看准考证上写的测试时间是早上十点。崩溃地骂人。回到宿舍看到老师说下午三点半前都可以测试，又屁颠屁颠骑过去。 结果最后一部分三分钟说话说得稀烂，真 TM 不如不去。 想起上次连续三分钟独白还是给笑笑说的。肯定超了三分钟，而且还有缓冲和思考的时间。三分钟掏心掏肺，讲了我的家庭是如何如何不行，压力是如何如何大，生活是如何如何麻木。感觉十分矫情。但说出来后，又感觉十分舒畅。 今天的三分钟说话可以二选一题目：“我的假期生活”和“如何保持良好的心态”。一看到第一个选项，就想到我今年寒假是怎样陪院父亲，背着母亲，想到蹲在医院路边捧着手机对辅导员大哭。虽然能说的很多，但我肯定选不了这个。然而，我又没有什么良好的心态。如果我有的话，我就不会说得那么磕磕绊绊了。事实上，我的“良好心态”可能更多在于自我反思。说话并不是我的强项。 笑笑告诉我，有什么就说吧，不要觉得别人没法解决问题就不说，说话本身就是一种解决方法。也许他是对的。不过我只是不想把对方当情绪垃圾桶。而且，不能解决问题的话，这样的情绪宣泄不就会不时涌出，持续影响到他人？何况说的时候自己也不得不回顾，感觉总算不上好办法。 上大学之后多了许多说话的机会，尤其是上台展示，面对台下许多注视着自己的眼睛时。老师和同学对我的评价都还不错，说我很流畅，有逻辑，很自信，我自感觉的确有很大的进步。但为什么，来到一个完全封闭的安静房间，只有我一个人，我却什么都说不出来？ 和我一同前去的同学说，自己一激动就容易讲家乡话。上交的学生来自天南海北，很多人都擅长说自己的家乡话一些，我觉得好棒。然而自己却不很擅长陕西话，需得像说英语一样在脑子里翻译一下才能说一些。自己一激动的话，就什么都说不出来了。这倒是奇怪，难道我的家乡话是在脑子里想的话？那真是很难说出来的。 我记得小时候想过，如果不用说话直接把想法传递给其他人就好了，就像在电脑上传一个文件，原封不动打包过去，压缩一些也无伤大雅。总觉得语言实在是太贫瘠，无法准确地传达意思。现在我仍这么想，也找过一个搞脑机接口的老师，很不幸地发现中文几乎已经是语言的巅峰了，又发现，准确的传达意思似乎不是语言的全部。于是不得不学着说话，学着对不同的人说话，学着说不同的话。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"辩论","slug":"辩论","date":"2025-02-24T06:13:14.000Z","updated":"2025-02-24T07:12:56.604Z","comments":true,"path":"2025/02/24/辩论/","permalink":"https://starcried.github.io/2025/02/24/%E8%BE%A9%E8%AE%BA/","excerpt":"","text":"我的第一次辩论是在小学的语文课上。老师设定了一个论题，要求每位同学自行加入正方或者反方发言辩论，两方分坐在教室的两侧。这个议题自然是那种模棱两可的问题，而我自然十分纠结自己的选择，直到老师开始催促我换座位，我便随便选择了正方。很多同学都是有备而来，和对方辩手辩得有来有回，而我一直没有发言，因为我在仔细思考每个人说得是否有道理。令我印象最深的是，老师见我一直没有动静，于是点名让我起来回复对方的说法。我记得，我站起来梳理了很久大家的发言，把有利于正方不利于正方的所有观点都列举了一遍，然后得到了结论：“我觉得对面说得有道理。“ 大家哄堂大笑起来，大家觉得我作为一个“好学生”的这通发言实在有失水准。老师甚至还评价我是“墙头草”。我急得反驳，辩论不就是在寻找真理吗？即使是对手，说得对就是对呀？我忘了老师讲了什么，大概说是“你要为自己一方辩论”就让我坐下了。 很长一段时间里，我都不是很理解“辩论”到底在做什么。我纠结的点在于，“墙头草”不是什么好名号，这是对那些意志不坚定的人用的，我怎么会被冠以这个名号呢？我们讨论问题，和意志是否坚定有什么关系呢？辩论的最终立场，不应该站在“真理”的一方吗？类似的，我在很长一段时间里也都没有搞懂“律师”是做什么的。我以为法律清晰规定了什么是对，什么是错，法官直接按照程序判决就好了，为什么还需要律师来辩论呢？这不是显得法官不够专业吗？那些为坏人辩护的律师，他们为什么要为错误辩护呢？ “辩论”究竟是在做什么？问 deepseek，得到的回答是 辩论作为一种理性对话形式，其核心目的并非单纯地击败对手或赢得掌声，而是通过观点碰撞实现更深层的价值。具体而言，辩论的核心目标体现在以下几个方面： 一、真理的探索与逼近 二、决策质量的优化 三、思维能力的淬炼 四、社会共识的培育 听起来和我之前想的差不多。然而这和我成长过程中得到的经验并不相同。我意识到，我可能对“辩论”这个词理解的角度错误了：无论是书上写的，还是 deepseek 回答的，它们对“辩论”的解读是宏观的，就像在后世对历史做评价；而身为辩手在辩论中的目的有可能是完全不同的，正如历史中的人物目的和造成的结果可能根本不同。小时候的我并没有搞清楚自己的角色，以为自己是观众或者主持人，于是发言并不符合辩手的身份。而那些踊跃发言的同学知道自己在做什么：试图在争论中获胜。 有趣的是，deepseek 一直在强调辩论“并非单纯的击败对手或赢得掌声”，但是如果完全不抱有获胜的目的，就会变得像我一样不知所以。这蕴含了一些有趣的平衡与相对的哲学。 现在我能理解辩论者的感觉了。其实辩论不过是“文明”一些的吵架罢了。吵架的原因有很多，比如说服对方，说服观众，或者仅仅是压制对方让自己获胜，甚至不为了获胜只是发泄情绪（表明立场，恐吓对手）。辩论也差不了多少。上大学后，我也以辩手的身份经历了很多次辩论，归根结底都为了一个目的：维护自己的利益。为了这个目标，你需要寻找论据，避免提及自己的弱点，构造有说服力的逻辑和论点，甚至很多无关内容的因素：冷静，气场，甚至诡辩等“语言艺术”。这些反倒都和真理搭不上边。 现在想来，小时候是那么单纯和高尚，将追求真理作为自己的目标和利益。长大后却越来越变得狭隘了。然而人类和社会就是这样的，没有那么多绝对真理可言，只有生存和利益长存。不去适应的话，就会惹得大家哄堂大笑。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"2024 年终总结","slug":"2024 年终总结","date":"2025-02-18T15:34:24.000Z","updated":"2025-02-24T16:33:55.175Z","comments":true,"path":"2025/02/18/2024 年终总结/","permalink":"https://starcried.github.io/2025/02/18/2024%20%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","excerpt":"","text":"前言 虽然已经 2025 年二月份了，看到晓天的博客，深感总结和计划的重要性。刚好也已经过了阴历新年，这个新年经历的事情或许比过去一年还要多。开学后就一直在颓废，没有什么动力，或许写一些总结和新年计划能好一些。 好像从来没有写过这么长时间跨度的总结。一年的时间说起来短，但很多事我已经快记不清了。说到底，我现在也才活了二十多年罢了。一年相对生命来说还是蛮长的，可以做很多事情，也可以经历很多事情。时常觉得天地很大，我却很小。一直想去更多地方，但大多数时间总是在相同的地点反复徘徊。人生大多数时候还是要待在同一个地方，感觉我其实应该多读些书，现在脑袋里装的都是些急功近利的东西，读书能引导我看向自己更深层的需求，这样能少走很多弯路，也能更踏实些。 我翻看着 2024 年的日历。去年寒假的时间，我还在东北和大伙一起滑雪。今年只能待在家照顾父母。虽说我没做什么事，但还是感到很大的压力，说是在家休息也没能彻底放松下来。倒是很开心能和父母住在一起，久违地聊聊天，偶尔吵吵闹闹。之前我不很经常和家里人打电话，是因为我不喜欢聊那些家庭琐事。但现在，我觉得能和家人待在一起，给父母倒倒水，做做饭，换桶矿泉水，背妈妈上下楼，是蛮幸福的事情。这种转换在提醒我已经长大，而长大意味着责任，意味着变化，很多变化。 收获 日历上有许多交通日程。除了去年寒假去东北和河南的日程安排，我在下半年的十月、十一月底也作为教练带队出行，一个人负责预定十几个人的机票和酒店。我一向不喜欢做计划，但很多事情不做计划根本无法完成，尤其是牵扯到不止自己一个人的事。这几趟旅行我都安排得很好，尤其是十月去成都的酒店临近日期被告知少定了房间，我也很好地做了沟通找到其他酒店进行安置。自大学以来我掌握了许多在社会上与人打交道的知识和方法，我认为我还是比较能处理一些事物的，能迅速定位自己和对方的社会角色，并且判断对方是哪一类人，并确定用怎样的方式进行沟通，做到尽量与人为善，也不损害自己的权益。 想起来下半年的时候在洗浴中心和其他人发生了口角与推搡，那是我第一次报警和打医护电话，虽然最后没叫救护车来。警察更倾向于安抚，这也无可厚非。我觉得我能在冲突中做得更好一些。我学到的是，急救电话都会先转接地方区域管辖，所以其实优先打区域电话会更快一些。 六月左右我开始和小伙伴们做微光 1.0，直到快国庆才完成。从原料挑选，学习询问，到亲手制作，做手工不是什么简单的事情。如果我有更多的时间，或许我会选择全部亲手做，但课程还是有点多。因此，除了写一个流程文档，自己搞定建模、打印、缝纫、热熔胶之外，如何合理规划协调人、时间、地点也是一项重要的学问。所以制作周期被拖得很长。对于一群没有固定活动场所和时间的爱好者来说还算不错啦，成品还是比较满意的。虽然如此，还是约了一套全装微光 2.0，毕竟全装对我们来说还是太勉强了哈哈。 暑假去华为实习了一段时间，对我来说还是比较全新的体验，虽然最后成绩不是很好，但对于我这个过去混吃混喝的学生来说还是蛮新奇的。这个博客就是在那段时间摸鱼搭建的。去到正规的大公司做项目，体验工作后人们的状态，然后斟酌再三还是选择还是再学校再待待吧XD（虽然但是华为夜宵和健身房、班车等福利挺不错的，今年他们也搬到青浦的全新园区了，说不定毕业之后我就去那工作了呢） 刚说到人生抉择，关于本科毕业之后的选择，我考虑了很久，和思政老师谈过，和朋友们谈过，和家里人谈过。出国几乎是不可能了，虽然我非常想去，可能之后有机会去旅游吧。虽然不想搞学术，但修个博士还是很有必要的。然而想留在学校并没有那么容易。根据去年强基计划电院的政策，我必须在大三上半年及以前获得超过 80 的核心学积分才可以转电院——然而我的分数刚好在死亡线上。于是大三上这学期，尤其是期末的时候，我顶着很大的压力硬着头皮学那些数学课，出分时成绩一度低于 80，但凭借着一些给分高的课拉上来了。可笑的是，我大部分时间都用在了那些低分的课上，得分高的我反而甚至就没去听几次。不管怎样，结局是好的。 我还是十分喜欢音乐，但也许需要多花些时间训练技巧。摸了摸吉他，但没有坚持；在乐团也演出了几回，去了上海捷豹音乐厅演出，（每次演出凳子谱子都不够啊啊啊啊）也算是见过大场面了。乐团负责的老先生感觉是那种很有气质的老艺术家，带着贝雷帽，把学生和校友交响乐团合并了。身边的人全都很有能力和才华，我能处在这样的环境里实在幸运，也促使我继续学习音乐。 通过实习，代课，做教练等方式，我赚了一些钱，给自己买了很多东西，比如智能手机，和兽装。以及，给家里转了 10000 元。爸爸工作实在太不容易。我急切地想实现经济独立，能够帮助家里减轻负担，以及度过这次难关。经济实在是困住梦想的一大原因。如果不是因为经济，许多事情都可以实现，许多问题就可以避免。 计划 今天微光 2.0 终于算做好发过来了！今年空闲时间比较多，准备多出出它跳跳宅舞什么的。顺便练练修图和剪辑，做做账号。我深知，能取得欣赏的根本原因，是自身的能力。 我希望，2025 年，我能有一个更好的精神面貌来对待生活与工作，尽量减少快餐娱乐时间，找到更合适的调剂方式，能去多花些时间在自己真正喜欢的事情上。 完成实验室项目，顺利转段 学习编曲，做出自己的第一个作品并发布 经营账号，每月至少发一个视频 筹备完成暑假骑车回家的计划 继续健身，减重到之前的水平 有一些搁置的计划，我在等待一些契机实现。比如，学习投资理财（一个安泰的老师说在上海这地方掌握一些理财知识还是蛮重要的）；经营媒体账号，最好能在暑假之前有一些关注度，为长途骑行视频服务。还有继续学习画画、建模等，感觉需要更多时间系统性地学习，一次做太多事效率会很低。 总结 我仍然认为我是幸运的，无论前路如何。身边的一切都在改变，我也是，而人生是一门应变的学问。 我更希望去求变，趁着我还年轻。我已经回头看够了。 该向前看了。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"新年","slug":"新年","date":"2025-01-29T11:35:43.000Z","updated":"2025-02-24T07:13:00.539Z","comments":true,"path":"2025/01/29/新年/","permalink":"https://starcried.github.io/2025/01/29/%E6%96%B0%E5%B9%B4/","excerpt":"","text":"今天是农历新年春节。我不知道上一次令人愉快的春节是在多少年前，应该是在爷爷卧病在床之前。 2 月 17 日晚上，我正和朋友们坐车准备去吃饭，妈妈给我打来一个微信电话。我笑着给妈妈说我准备去吃大餐，吐槽我考得一滩烂泥的专业课考试。妈妈只说我回去记得打个电话。我答应了她，和朋友们去吃这学期的最后一顿大餐。 妈妈已经瞒了我一个多月了，也不差这一顿饭的时间。 今年也许是我见的人最多的一次。所有亲戚，朋友，认识的不认识的。然而今年一起跨年的人依然地少，越来越少，越来越沉闷，年夜饭都不用加凳子了。倒是姑姑家新养了一条比熊犬，叫“八月”，因为是八月买的。然而它的地位太低，因为有老人和不喜欢狗的人在家，别说上桌子，它每天只能被关在 \\(1\\times 1\\) 的栅栏里，和自己的排泄物作伴。 那天晚上我躺在床上，妈妈告诉我，考试前爸爸去医院做的检查，查出来是胃癌。之前他们告诉我说是息肉。而妈妈之所以骨折，也是为了第二天给爸爸陪院。妈妈一句一顿地说着，我透过手机看着她的脸，看着她逐渐湿润的眼眶，看着她被泪水浸润的皱纹。我不是很想回忆她在说这件事的时候我是什么心情。我唯一记得的是，我不停的在告诉我自己，不能哭，不能在妈妈哭的时候哭，不能在妈妈需要我的时候哭。 幸运的是，妈妈告诉我，经过检查，爸爸的癌症虽然是恶性的，但是是早期，而且并没有转移，可以直接做胃切除手术根治。在半个月前，爸爸的手术已经顺利结束，她也做完骨折手术出院了。不过爸爸的胃恢复功能需要一段时间，本来预测现在已经恢复好出院回家了，但是并没有如此顺利，于是我必须暂缓回家的进程去西安给爸爸陪院。 八月被放在客厅里，妹妹或者我一经过，它就激动地站起来扒拉着栅栏，嘤嘤叫着，眼巴巴望着，希望有人能将它的门打开。它的栅栏并没有顶，一跳就可以跳出去，但它从未尝试过做出那一跳。或许是因为它不知道它有能力跳出去，或许是它知道即便它跳出去了，也会被主人撵回栅栏，再被打上几巴掌。也许它尝试过，只是我没有看到。 2 月 18 日，我坐着早上九点的高铁赶回西安。爸爸在的康复医院在西工大附中附近。那天，很多高中同学们回学校进行返校宣讲。我从相同的边家村站下车，往相反的方向走去，走到一个完全陌生的地方。那里虽然离我的学校很近，但我从未去过那里，也从未想过去那里。 康复医院又破又小。我从最近的大门进入门诊部，大堂的灯光有些压抑，照射着上世纪装修的石头地板和墙壁，反射出医院特有的暗绿色。到住院部的路蜿蜒曲折，穿过一栋栋新的旧的楼栋，来到肿瘤科病区。我走过一间间病房，浏览着门牌上的编号，一步步走向我的父亲。 爸爸并没有告诉奶奶他的病情，也不准备告诉她，但她还是能看到爸爸鼻子里伸出来的引流管。奶奶煞有介事地让我把两个红灯笼挂在门口，说是为了消灾，然后派我和妹妹出去给太爷爷太奶奶烧纸，自己在房间里拿着手机念佛经。爷爷似乎没有什么变化，还是一副病恹恹的模样，套在鲜艳的红衣服里，再套在轮椅和束带上。 在医院的这段时间里，许多亲人朋友都过来探望爸爸。爸爸的精神状态挺好，声音底气十足，也可以在楼道和街区走动。天气越来越冷，在医院也只能打些营养液和一些神奇的扎针、艾灸等中医疗法。爸爸早已经厌倦了这些无休止的治疗，他明白，我也明白，只要一直待在医院里，他就一直是个病人。 2 月 22 日，爸爸的胃还是没能恢复功能（事实上到现在也没有），但西伯利亚寒潮就要吹来了。医院的病房并没有比八月的栅栏大多少，集中供暖的暖气热得人发昏，我只能盘坐在生硬的病床上弯着脖子用电脑写大作业。妈妈还在娘家被外公外婆照顾着，我们回去好歹还能帮她洗漱做饭。思考再三，爸爸决定回家。 长辈们还是一如既往地给我和妹妹发压岁钱，即便我们早已成人，即便我们已经分担起家庭的重担。妈妈没有再替我把压岁钱收走，爸爸也没有精力再陪我去给祖先烧纸。之前一直是爸爸陪着我在除夕晚上出去做这件事，那是我们两人一年内少有的安静相处时光。黑漆漆的路上，两个男人默默地走着，有时会有远处的烟花和炮仗声响起。爸爸告诉我，老爷爷老奶奶会在新年的时候回家来，我们要在路口处把冥币烧给他们，指引他们家的方向。到了路口，爸爸找来两根粗树枝，画一个圈，把冥币叠在黄纸上放在里面，然后点燃。火苗越烧越大，带黄火星子的浮尘飘入空中，混着黑烟，熏得我睁不开眼睛。朦胧中，我只看到爸爸蹲在地上那黑色的身影，被火光照亮的温暖的脸庞，晕染在灰色的雪地中，那么的不真切。突然，整个画面盖上了一层红光，抬头望去，是天上的一朵烟花绽放开来了。 回家的那天下午，舅舅开车送我和爸爸直接到外公外婆家。外公外婆身体都还很好，每天走的路比爸爸妈妈加起来都多，而妈妈已经在那张垫了一层床垫的木板床上躺了一个月了。她的右小腿完全折断，脚踝粉碎性骨折，一个月前去医院做手术打了钢钉，现在仍然只能翘得比心脏高，还不能拄拐走路。目前的问题是，她恢复的这段时间里缺乏腿部运动，好的那条腿已经无法承受她的体重了。于是，我那个健壮的小舅直接把我妈扛下了楼，然后又扛上了楼，送我们都回了家。 春节待在家里十分无聊。我躺在床上，和妈妈聊了很久，聊了许多。我们聊到了家里的经济问题，而在这之前妈妈是对我闭口不谈的。爸爸不久之前还为了赚更多的钱转到了更忙的岗位，拼死拼活在加油站工作，住在巴掌大没水没网的加油站宿舍里，夜间一来车就得醒来，干得昼夜颠倒，身体患癌，一年不能赚几万。而我才接的代课的活三小时就能赚一千多。我躺在床上，搂着妈妈说，我不忍心再让爸爸做这样吃力无用的工作，之后如果有机会，就让爸爸病退吧。我之后不管是读博还是工作，都会有收入的，不用再为了挣这点钱透支身体。说罢，我给妈妈转了一万块钱，帮她还朋友的借款——爸爸妈妈因为这次的病，借了很多亲戚朋友的钱。这些钱和恩情都要慢慢一一偿还。如果我们家里能更宽裕些，或许很多问题都不会成为问题。 在回爷爷奶奶家之前，我一直在老区家里照顾爸妈——也许是照顾吧，事实上大多是爸爸在做饭。一些脏活累活下楼的活确实是我做。除了继续做大作业，我还抽空做了一道土豆烧鸡块，拿着手机教程，洗菜切菜做菜洗碗全程亲手操作，在没有味精、老抽、生姜以及蒜苗当成葱的情况下，大获成功。虽然爸爸没法吃，但妈妈还是给予了很高的评价。多的菜没法做了，因为我其实只想做我爱吃的，而家里只有亲戚朋友送的那些乱七八糟的我没兴趣的材料。何况我也很累了。 1 月 28 日，除夕，我们一家三口准备去奶奶家。四十多分钟的车程对爸爸来说勉强可以坚持（本来计划这个寒假我回来学车，但现在没机会了）。然而，我必须考虑如何安全地把妈妈送下楼。妈妈尝试走了两步，发现完全下不了一层阶梯，于是我蹲下把妈妈背在背上。成功站起来时，我不禁为这一年多的健身成果感到庆幸。稳步下了三层楼，最后在把妈妈放在轮椅上时失去了重心，万幸爸爸在身后护住了妈妈。 妈妈告诉我，在我小的时候她也总是摔跤，甚至在怀我的时候就摔了一跤，吃了保胎药我才得以幸存。另一次，她抱着我，也是下这一段相同的楼梯，她不小心滑了下去。但是她尽力把我托起来，没有磕到我。那次好像她没有受什么伤。从那之后，她再也不敢抱着我走路了。十几年过去，妈妈早已经抱不动我，但当她又摔倒的时候，虽然只有她一个人的重量，却受了如此严重的伤。于是，这便轮到我背她下楼梯了。 今年放炮的人似乎又比往年的少。很久前，又或者是不久以前，铜川还会下很厚很厚的雪。等到春节的早上醒来，我和妹妹会在窗边叫嚷着，闹着，拉着一家人跑到窗外的雪地上，用通红的手指抓雪，滚雪球，要堆出一个雪人来。爸爸妈妈和姑姑姑父还有奶奶站在一旁看着，或陪着我们一起滚，或只是在笑着聊天，偶尔大声告诉我们别往泥巴里面跑。我没有听，也不压实雪，滚出来一个和着泥和树枝的大雪球，往大人面前一放，突然塌成了一个泥雪堆。我记得，笑声，叫声，冻得发热的手，红红的脸蛋，不知是因为冷还是羞。那好像是我唯一的一次堆雪人。 现在已是深夜。爷爷在房间里呻吟着，姑姑起来给爷爷换纸尿裤。我在客厅里写着博客。也许生活没有那么多梦幻泡影，更多的只是家长里短，鸡毛蒜皮和屎尿屁。我一个人为那些遥不可及的诗与远方拼命地奋斗奔跑，现在突然被迫停下来时，却发现记忆中被珍藏的那些画面，只是小时候的一场雪，一顿饭，一场梦，一步路，在婴儿车里看到的那些人。令人惊恐的是，这些画面正在无声无息的消退走远，在某个平常的下午，被我彻底忘记，甚至记不得什么时候是见它的最后一面。我很难控制自己不去想，如果这次爸爸的病不是早期，如果手术并非那么顺利，我是否还能记得我见他的最后一面…… 新年。很神奇的，是为了除旧迎新，大家都却回到老地方，见记忆里的人，做以前做过的事。一年又一年，过去的事情，都变得模糊不清，而新的一年，又将开始。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"麻木还是理性？","slug":"麻木还是理性？","date":"2025-01-06T08:20:35.000Z","updated":"2025-02-24T07:13:05.935Z","comments":true,"path":"2025/01/06/麻木还是理性？/","permalink":"https://starcried.github.io/2025/01/06/%E9%BA%BB%E6%9C%A8%E8%BF%98%E6%98%AF%E7%90%86%E6%80%A7%EF%BC%9F/","excerpt":"","text":"之前，我一直很佩服那些在压力环境下仍然能够理性思考和决断的人。我以为，理性意味着聪慧，成熟，强大，于是立志于成为那种理性主导的人。如今，朋友经常说我十分理性，在许多情况下都能保持清醒思考，而不是在慌乱中被情绪支配。代价是，我好像更难被生活中的小事牵动情绪，并且一步步扩大至方方面面，甚至对自己、亲人朋友的痛苦都无动于衷。而每当我这么想的时候，我都会担心自己是否会失去同情、难过之类的情绪，成为一个所谓理性但实际麻木的人，麻木到失去作为人的情感。 至少，我之前是这么想的。 我的妈妈骨折了。 她在奶奶家住。晚上起夜，为了不吵醒睡在客厅的爷爷的陪护，关着灯走到卫生间。两步路的距离，上百遍的经验，她还是不小心摔倒了。这一摔，竟然把小腿两根骨头都折了，还有脚踝附近粉碎性骨折。 这件事，妈妈拖了半个月才让我知道。我当时在微信问我寒假什么时候有时间去西安耍，她告诉我，我没有时间做别的事了。因为就在她摔倒之前，我爸才去医院做了胃部手术，这几周时间里，家里竟然没一个能站着的。我十分平静地表达着自己的关心，甚至想开开玩笑幽默一下。或许是为了在期末周保持平稳心态。这也是妈妈在做的。妈妈瞒着我半个月，就是因为我快要期末考试了。而我居然也没给家里打过电话。只是在一个月前突然十分想家。 前几天和妈妈打电话的时候，我十分平静地问着她的情况，问谁在照顾她，做手术是否顺利，躺在床上怎么打发时间。她说，她在外公外婆家住，我今年回去得负责照顾爸爸妈妈了。我微笑着，说，我考完试就回去把你们接回家。没事的。 “没事的。”这三个字说出口的时候，我忽然感觉到我眼角流下的一丝温热的眼泪。明明我的心情十分平静，就像古希腊哲学家的大理石雕塑一样面不改色。 没过多久，就是今天早上，我最好的朋友突然摔车了，手腕非常痛，腿也擦伤了。这次，我也很冷静地关心他的情况，为他包扎，问他要不要去医院。我感觉我在很理智地解决问题，然后提出建议，让他把那辆破电动车赶紧换了，换个大点的，新的。 然后，我说，“没事的。”那时，我感受到一股熟悉的温热湿润眼眶。 我感到高兴，因为我发现我对情绪的感知在潜意识中仍然敏感，只是变得不易表露出来。在对外界的探索和接触中，我逐渐学会了保持沉默和内敛的技巧。事实证明，这些技巧是有用的，是成熟的重要步骤。虽然它也是一种麻木。要说麻木的话，那也是我对常驻的痛苦感到麻木。在频繁的压力和焦虑中，强迫自己保持冷静，忽略情绪，直到对情绪受体不再敏感。 ……我不知道我在胡言乱语些什么。可能是期末周压力太大，不想复习偏微分方程罢了。从高中之后，我的表达能力逐渐下降，自我反思时间也减少了。我感觉我并没有变得更理性，因为我的数学成绩并没有变得更好，也没有强迫自己现在去复习（很明显现在复习是最优解）。这么看来，我好像是麻木多一些。只是没被麻翻而已。 ……我好像在之前的博客里说过类似的话。看来我已经掉进循环了。 我很努力地长成大人，但保护我长大的母亲却摔倒了。 可能“长大”就是逐渐变得麻木的过程。员工越老经验越丰富，只不过是员工做工做得麻木罢了。然而他们却把麻木当做“经验”，当做“理性”，当做“成熟”，拿出来给人讲，让小孩走他们的老路，变得所谓“理性”、“成熟”，接受他们创造的那个世界，那些世界所谓的“规则”，一遍又一遍，像齿轮旋转，却在原地踏步。 我看不到我的未来，因为我不知道要往哪里走，也没有对未来的愿景。我学着数学，却越发感到对探索未知的无力。茫茫的未知包围着我，吞噬着我，我拼了命地与虚无搏斗，然而挥出的每一拳都打在我自己的身上。我的脚下没有地面，我的面前没有道路，我依靠着惯性前进，却根本分辨不清方向。 几个月前我摔车的时候，我没有感到难过。但是我会为其他人的痛苦和不幸感到悲伤。为什么？可能和那些喜欢看动漫电影磕 cp 的人差不多？我不想把我的情感和情绪依靠在别人身上，但我自己又没法处理……我好像把什么东西混淆了？ 现在不应该想这些，甚至不应该写这些，因为这些问题不可能很快得出答案。如果我一直写的话只会反反复复沉浸在这些无边无际的思考中，我会变得越来越麻木。 我应该写点别的东西，比如我买了双新鞋；元旦和朋友们在酒吧跨年很开心；不久前发现自己的博客被学弟欣赏，不能一直写这些乱七八糟的脏他们的眼；虽然过年要回去照顾家人，但是可以正式地有时间学做饭了。 至少，最差，我得到了一个结论，我并没有变得很理性。反正数学成绩不是很好。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"任务","slug":"任务","date":"2024-12-03T13:24:13.000Z","updated":"2025-02-24T07:13:53.143Z","comments":true,"path":"2024/12/03/任务/","permalink":"https://starcried.github.io/2024/12/03/%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"最近虽然仍是累，但是自从我不用赶着作业的 DDL，而是拖着迟交以后，反倒放松了不少。各种乱七八糟的事情到现在也差不多结束了，然而还有小测和紧接着的期末，我已经做好了完全付出在学业上的准备。 尽管这么说，如果躺在床上，我依然会沉迷于手机好几个小时，直刷到头昏脑涨，起来也无心学习，干脆直接睡去。其实起来走走会好很多，或者用最近我找到的新方法：洗个澡，感觉会刷新状态。效果不算特别好，但聊胜于无。 “我不喜欢现在学的课程，没有完成课业的动力。”我对朋友和心理咨询老师说。他们会告诉我：把它当做任务做就好。我很奇怪，什么叫当成任务做就好？当成任务就不会给自己造成心理负担吗？什么是任务？是指不得不做的事吗？真的有所谓不得不做的事吗？仔细想想，似乎只有小时候我才会把一些事当成“不得不做”，甚至一些很小的事。基本上，是大人告诉我应该做什么，如果我没有做到的话，我会感到十分恐惧和悲伤。这些事大概持续到高中，随着年龄的增加慢慢减少。我认为的最后一件事，似乎就是课业。它在我被大学录取的那一刻消失了。 前几天马原课上，一位同学问老师关于他在第一次课走错教室未签到的事。这位成绩很好的同学说话很快，交流很少，在大一第一节数分课上因为后座的同学抖腿而在课堂上突然大声抱怨，在线代课上因为觉得自己算错题是因为老师没解释清摔门走出教室，很像我小时候的状态。（虽然我上学期也摔门离开过教室，但我及时返回并向老师道歉了，或许老毛病没法完全改掉）马原老师告诉他成绩肯定会受影响，但是比较少。他一遍遍重复自己是走错教室了，声音快速带结巴。在他终于放弃离开教室后，我看到他在教室门口站着，低头呆愣在原地，好像缺了这几分天就塌了一样。虽然我并不想去和他交流，但在某种程度上我非常共情他，因为我曾经就和他一样。 我想起小时候在幼儿园，老师会布置一些算术题留作家庭作业。在等待妈妈接我回家的时间里，我会找地方把作业做完，甚至妈妈已经到了也要等做完再回去。提前甚至超额完成任务得到满足感，之后的时间就可以自由支配，这种先苦后甜的快感不知为何慢慢消磨殆尽了。现在想想，可能是当时的任务比较简单也比较少吧。 随着我长得越大，见识越广，经验越丰富，我越不觉得有什么任务是我必须得做的。我仔细思考，认为这种心理的来源并不主要是我看开了，而是随着能力的提升，我有了更多选择和退路。去年我对自己职业生涯规划时已经确认，进厂工作是我的保底，我应该更加没有后顾之忧地去实现和发展自我。然而这件事或许想得有些太容易了。如果真的没有后顾之忧，就意味着我没法将这些课业视为所谓的任务去完成。于是，我会去做一些新的事情来转移注意力，试图用新赛道的成就感来获得动力。如果我已经做好了完全付出在学业上的准备，那么就意味着我完全没法专心在学业上，而是会偷更多的时间去刷手机浪费时间，或者写些日记以整理思绪的名义来发泄情绪。（我有时候会刻意贬低自己以自我激励，我仍然觉得自省是十分重要的） 我养成了把待办事项记在手机上的习惯，然而，在学期内，我的待办表似乎从没空过。每次看到它，我只会徒劳地增加焦虑，然后什么都不干。 啊啊，这学期过了，一定就会好起来吧。再撑一会。然后，我要去做我自己喜欢的事。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"像机器一样学习","slug":"像机器一样学习","date":"2024-11-12T16:11:47.000Z","updated":"2025-02-24T07:15:07.620Z","comments":true,"path":"2024/11/13/像机器一样学习/","permalink":"https://starcried.github.io/2024/11/13/%E5%83%8F%E6%9C%BA%E5%99%A8%E4%B8%80%E6%A0%B7%E5%AD%A6%E4%B9%A0/","excerpt":"本文含有隐私信息，访问请联系微光。","text":"cfa2926ad01c1ca5b72f4176a524df6353092533768cfe9a7117e732ae0ff86832be8b0a660fb2b1f260622092713713b48c3ea957ab5601b1d0a9b2e281e21bd30e6c08d8b460a749745f70ca82fd8000453ee59bf49eb79440af25e69ee06f5cafda35035afe291cc61275aaf8927094501206f5926668612b19e51aba9bd2cf65724104c9d48a8fcad2104ac4865c78ee5f61ae468871dacb84fa5a1df812813f5c7269c035f0bfe82ced068a57579fbcb431e816f2619698a848c865a64f435b51dfc42a1ea959cfa284edc0dd208f4785d8adc1413d638a607d475637b288e719d977a4786ee6a0257dcd99f645cdaa10b2b66a27b7744c6801938ea099870b7ac2af310402af2ef41fa703bdcc3e16df12cb44b2bd93afe96abf57c0f8f54da5f46de51e58530c283c3d96dae7d6f961c84fd14ffdda8b1cb41a27f47cf77ad84a473bf2da72fcc64c89b8328157917830e9e17ed2818348fef521eb80200f9e0efc5cc1c8b27ee013360bdd969913e6bfc1d5bb861b95e1a84259682184617e6d4a5df4c27ba9d76e5b567bd368b4708c37230141f1a847487f17857329c8531c175ce3c4e066cc36784dfaab286f2c3fbb1577e9b45543065ae87d1039047fdb39d81ce5db252e493dbde3949d9eafb26f482dade7e2824b5debbd50a263b26e5b29643be54e31f9f41d77c040146f950ec0cf319a6ba932c248883f59617063d196c2c976e95f37c2daee42530543954205a7de197a0a1e40f4c3613beb699305d659b44faf57ef54a4f1b5cb28a03eb8a2ec79954d7c29e2de24c9eb04b26867d0ea3eb36c91aae7e6507c6615f0b0d6c64ae9ca30faadff4aeb2732964f9a4867147b61cbd51c082eb52ac6352c6a17375ae13f97648bd710a13e65a56bcad4bae3fe0df2db0fb862b27dcd63e2e522c5b613edcbbdb39cd16077b4b1108391c47a0ad6baac439e233780311e22b4858a1e12a96f7aebc68f13e0547654a9895a5a9aa3daf55cab0b51f04ad956d5f0c239ea530586bb2d90f3121b98ba74e4b6d0369b765e9b4e66c7fc860e6c0fb70616e2f5f27d270d1c88c2b4d024901929e54c6bd61af469039bba 请输入微光提供的通行证：","categories":[{"name":"Marathon","slug":"Marathon","permalink":"https://starcried.github.io/categories/Marathon/"}],"tags":[{"name":"Me","slug":"Me","permalink":"https://starcried.github.io/tags/Me/"},{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"日记 2024-11-17","slug":"日记-2024-11-17","date":"2024-10-24T06:49:31.000Z","updated":"2025-02-24T07:14:33.288Z","comments":true,"path":"2024/10/24/日记-2024-11-17/","permalink":"https://starcried.github.io/2024/10/24/%E6%97%A5%E8%AE%B0-2024-11-17/","excerpt":"","text":"2024-10-24 十分疲惫。 2024-11-16 十分疲惫。 我在上个月 24 号创建了这篇博客文章，结果敲下四个字后，竟然就放下了，实在有些好笑。是因为我已经疲惫到没法写日记了吗？ 昨天我们强基半个班的同学都来到合肥，中科大，参加什么交流活动。但其实真正交流的只有一上午，剩下便是参观博物馆、校史馆之类。中科大的少年班十分出名，我想，如果我早知道可以这样走，估计也会想着去报名少年班。 下午不到四点就解散了，去逛了附近。安徽农业大学居然一出门就是一整条小吃街。然而，合肥没有什么有特色的小吃，物价却赶得上上海（第一次见到五块钱的北冰洋）。回到酒店，躺在床上，硬生生刷了五小时的手机，到现在将近十二点，只刷得我头昏脑涨，眼神涣散。 本来，我是想来用空闲时间复习一下下周的小测的。最优化方法和偏微分方程，后者我几乎有一个月的课都没听。中科大的强基学生有信息与计算科学专业可选，必修课里也没有偏微分方程。和同学交流以后，我发现他们大多只选了二十多学分的课，而我选了三十多学分。这些课程搞得我压力很大，宁愿去刷手机都不愿去面对现实。 前几天，微分几何的期中成绩也出了，又是一次打击。我真的不想学自己不喜欢的东西了。于是我在早上的交流活动中公开表达了我对科大同学不用学微分方程、可以走信息与计算科学方向的羡慕。上交数院副院长在这里，但我不知道是否有一点用。 到十二点了，明天的安排是去参观红色景点，好像是顺便完成党团任务。我受够这些没用的东西了。 我的头很昏，好像只有在我头昏的时候才能写出字来。宣泄一些负面情绪？好像也并不是很负面。可能是手上做些事情，以理清自己的思绪吧。 前几天我还在给其他人说，或许没有那么多事是“必须”得做，只是我们没有放弃它的勇气。我其实应该是大部分在给自己说。我选择去做那么多事，选了那么多课，根本没有能力去把它们全部做好，我知道这一点。但是我还是会因为我没法把它做好而感到沮丧。这是一个困境。 我不知道自己真的要做什么，生怕错过了了一丝一毫的机会，努力让自己变得更好，所以我参加了所有的活动，干了尽可能多的事，但却有些适得其反。 我本来上一段想写更多反省的话，但是突然意识到我之前已经写过很多次这样的话了，而事情并没有变得更好。说这些话是没用的，不应该被去做。我没有做到真正的反省。 我想去看个心理医生，但是那些心理医生似乎都不太专业。如果他们能解决自己的问题，谁会想去做个心理医生呢？ 我的头好晕。我刷了太多的手机了。为什么考试将近我还在颓废？我有很多次这样了。哦，我想起来了，在刷手机看那些有用没用东西的时候，我有在注意时间流逝，我有注意到我的眼睛变得疲惫、大脑变得迟钝。我想到，我一旦停止刷手机，我的头就会变痛，我就会注意到我的眼睛没法聚焦到远处，我就会意识到将近测试，自己还什么都没做。我在逃避这一切。 我想逃避这一切。我累了。我需要一个无忧无虑的假期。 无忧无虑。天哪。我在去世之前真的能达到这个状态吗。 世界是，这样的。我在世界里，我不在我的世界。无时无刻，我不在追赶，在嫉妒，在逃避，在徘徊，在失落。这听起来很痛苦。但我现在实际的感觉只有我的头痛。 我想创造我的世界。好想。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"Blender 制作可用于 VRChat 的个人模型","slug":"Blender 制作可用于 VRChat 的个人模型","date":"2024-10-16T11:52:34.000Z","updated":"2025-08-26T07:29:14.979Z","comments":true,"path":"2024/10/16/Blender 制作可用于 VRChat 的个人模型/","permalink":"https://starcried.github.io/2024/10/16/Blender%20%E5%88%B6%E4%BD%9C%E5%8F%AF%E7%94%A8%E4%BA%8E%20VRChat%20%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"前言很久以前，我就已经萌生了制作微光模型的想法。我的设想十分美好：自己设计绘制三视图，根据三视图建模，再导出模型 3D 打印头骨自制兽装。这其中的每一步要做好都不容易，更何况我都曾完全没有涉足。然而现在看来，我确实踏踏实实一步步做出来了，这不能不说实在是一件值得骄傲的事情。 其实早在今年 4 月 30 号，我的生日，我已经将微光模型的第一版做了出来。不知出于何种原因，我并没有将它分享出来。也许是我觉得他还不够完美。之后我继续将模型导出为 VRChat avatar 和 vTuber 形象。到这一步，我决定将模型完全完善到满意再分享。但是之后，由于临近期末周，以及朋友的一些玩笑话，我暂时搁置了模型打磨，并将重心转移到制作兽装上。 现在，兽装已经做好。然而我却不再有足够的耐心和时间来完善模型，甚至没能为他加一件披风。前几日《黑神话悟空》发售，我十分喜爱这部游戏，尤其喜欢创始人的一段话：走上西游路，比取到真经更重要。我知道，我经历了很多事情，它们中的大部分并没有达到完美。我并不想成为一个完美主义者。我更希望我的努力、我的成就能被大家看到。“越是贪图圆满，越是搜不干净。” 至少，权当做个学习笔记，万一之后想继续完善模型，可以参考这篇文章。我在这里会将主要步骤描述清楚，并尽可能通俗易懂地讲解每个部分的作用和原理，加上一点我遇到的问题和解决方法。结合具体操作的视频教程，相信完全不会的新手也可以做出和我一样的效果。 2025 UPD：微光2.0 也制作完成了。这次我用假期的时间，从三视图到 Unity 各个部分全流程跟着 Youtube 的一个全流程视频（12小时）完全过了一遍，优化了艺术能力，并且尽量理解了操作的逻辑。 准备工作Blender大概是去年，我最早开始盘算学习建模的时候，在网上看到许多关于选择软件的建议。一些论调认为现在的主流工作流还是 Maya 等传统软件，Blender 与主流工作流衔接不好。然而，Blender 开源免费、轻量、综合、简单、社区活跃、插件丰富，对于个人创作者来说十分合适。对于我来说，我并不想之后去游戏公司给别人打工，Blender 无疑成了最好的选择。并且就在我用的这段时间里，Blender 更新了许多版本，发展潜力巨大。 不同版本 Blender 功能有差别，在查看教程时最好查看对应版本的教程。我使用的 Blender 版本为 4.0，较新，而中文网上信息较落后，甚至 Blender 官方中文文档也会出现错误。因此，我建议在学习时主要参考英文文档和视频教程，并灵活利用中文 QQ 群或 stackoverflow 等社区。 在学习建人物之前，建议先通过阅读文档和视频熟悉 Blender 的基础操作和功能，以及了解大致建模工作流程。雕刻建模与多边形建模不同，对新手来说应该先熟悉多边形建模。 建模包括白模、材质、纹理、着色器、骨骼、光照等等。我们并不是要在 Blender 中做动画，而是需要导出模型到其他地方，比如 VRChat 所用的 Unity 中。在游戏引擎中，有不同的环境、光照和适用于模型的着色器。因此，我们在 Blender 中主要需要做的是：制作白模、纹理绘制、绑定骨骼与权重和形状键。 三视图正如画画需要参考图，建模也需要参考图。这里注意，建模所需的三视图和概念图不同。三视图是指模型的正、侧、顶正交视图，对应建模时的三个正交摄像机视角。这要求模型对应位置在视图中的投影平行，比如正视图与侧视图的肩处于同一高度，否则无法从三视图得到模型。 三视图建人物模型时一般是 T-pose。这便于建模和骨骼绑定。在导入模型到 Unity 时，也要求模型为 T-pose。 我的模型比较简单，因此我自己画了三视图。 VRChatVRChat 基于 Unity 引擎，并且有官方引擎 SDK。若要导入模型到 VRChat，除了需要在 Unity 中制作 avatar，还需要先做一些准备工作： 你的账号需要摆脱访客身份才可以上传自己的模型。在游戏中活跃一段时间后，可以自动成为正式会员。 中国地区上传模型时会被墙，需要使用全局国外代理。 之后按照官方教程设置模型、着色器、形状键。 制作模型3D 模型制作过程很难用文字描述，具体需要参考视频教程。建议跟随入门教程掌握了基本操作之后，再找一个专业的系列教程跟随操作。我看的教程主要是 VRChat 官方推荐的，其内容十分详细，包括低模、精细化、材质、骨骼、权重、形状键、上传 VRChat、导出 Vtuber 模型、加衣服等。 VRChat 官方推荐教程https://www.youtube.com/watch?v=OKWsUAIsgpg&list=PL2EEbgwoJzdsC9wfKA2ZO2kAf4HDqC8a8 我不是专业的，因此并没有详细的技术细节，只简单记录我工作的大致流程和遇到的问题。基本上，跟着视频教程做，遇到问题 Google 一下、问社区、问 AI，基本没什么问题。 作为自学了一点的初学者，我对建模的感觉就像雕塑，需要耐心和经验；作为数学系的学生，我对建模的体会就像解决最优化问题，需要权衡质量和效率，这会在之后的工作中体现出来。（好的部分是，作为新手的我们还没有到需要卡常数的那一步） 常用快捷键1、2、3 切换模式，e 挤出，s 缩放，r 旋转，k 切割，m 合并，f 填充，x 删除，o 选取相连项，Ctrl+r 环切等。 Ctrl+Shift+M 选取镜像 白模先建低模再细分细化。头部比较精细，与身体分开制作。头部可与身体连接或分开。如果要连接，注意接合处上下的布线一致。 头部：根据三视图由点到线然后到面进行拟合，注意布线满足之后缝合线的需求。眼睛部分做圆盘与身体分开。头发可用贝塞尔曲线制作，略复杂。 身体：挤出圆柱拟合身形即可。手部略精细需要单独做。注意手肘等关节处适合绑定骨骼的布线。 注意以下影响模型质量的因素： 优化面数，减小渲染压力； 减少三角形，渲染得更平滑，方便布线； 不用 n-边形（五边及以上），防止不同模型文件格式转换时出现问题。（可以在统计中找到多边形，使用选择工具选取它们，简单的解决方式是将其三角化） 可以看到，我们需要解决面数和模型细节的最优化问题。优化你的布线，让复杂的地方精细起来，简单（或者不常看见）的地方面数少一点。 blender 的对称功能并不好用，有时候会有莫名其妙的节点被固定住无法移动。建议使用镜像修改器，对称调整仅用于之后微调。 细分修改器可以使用，但不容易控制，我在制作 2.0 时并未使用。 尝试优化拓扑结构，可以自己钻研或者看教程。很重要，会影响之后骨骼绑定和贴图绘制。 gret 插件可以帮助将不同的流形合并，用于制作风格化毛发。 UV 贴图UV 展开是将模型的三维信息转化为二维图像。在 Blender 中，我们在 UV 编辑器中展开模型表面。展开后的 UV 贴图可以用来制作纹理。UV 的意思是表示二维的两个坐标轴。 简单来说，其实就是将物体的表面剪开，然后平摊到平面上。这个表面是有弹性的，可以适当拉伸和缩放。要回到三维，就是将展开图重新缝合起来，因此 UV 连接的地方叫做缝合线。如果你玩过 Minecraft，知道材质或皮肤文件是什么样，那其实就是纹理贴图，从二维到三维的映射即为 UV。 虽然可以拉伸，但我们还是希望所有地方（尤其是细节多的地方）的高斯曲率越小越好。可以预想，如果我们不加限制地地加缝合线，我们总可以将 UV 贴图的高斯曲率降得无限低。不幸的是，就像缝纫一样，缝合线并不是越多越好，缝合处可能导致渲染过渡不平滑等问题。因此，我们不仅要尽可能减少缝合线，还需要将缝合线隐藏在不引人瞩目或锐利的地方。这是需要解决的另一个最优化问题。 如果你想用 Photoshop 制作 UV 贴图，可能需要注意每一部分的 UV 整体一致。 UV 其实可以重叠，重叠部分会读取相同的纹理，可以节省空间。比如眼睛正反面的 UV 可以正交投影到平行于眼睛的平面。 纹理绘制材质是模型表面颜色的表现形式。材质决定了模型的外观、质感、材质属性等。比如，金属度会影响光照反射。其中，纹理是材质的重要内容，它体现了物体的固有色。作为人物模型，纹理绘制是我们的重点。 在实际操作中，很多阴影、高光、凹凸等细节如果改模型和渲染会耗费很多资源，但其实这些细节人眼并不易察觉，且并不会随着环境改变太多。因此，在纹理绘制中，除了表现物体的固有色，还会将这些细节的直接呈现效果表现出来。 作为动漫人物模型，我们需要达到的是三渲二的效果。因此，我们需要在“着色”工作面板用节点将纹理图片直接映射到模型表面，以去除环境和光照的影响。直接将图片连到输出即可。 节点是材质纹理和着色器风格化的关键步骤，通常这部分的设置对新手来说不符合直觉，需要多练习。但三渲二的效果恰巧比较简单，于是并未深入研究。 以下是一些要点和遇到的问题： 贴图大小一般为边长 2 的整数次幂的正方形，如 512、1024 等。我用的是 2048x2048。格式为 PNG。贴图文件是独立于模型文件的，请务必注意保存，快捷键 Alt+S。 Blender 有自带的纹理绘制工具，但功能比较简单。可以通过装插件实现包括图层在内的复杂功能。如果你仍然觉得工具不够用，可以尝试使用 Photoshop 等软件绘制纹理（因为贴图文件是独立的），此时你就会注意到 UV 展开每个部分整体性的重要性。 纹理绘制时需要留出足够的出血，使其覆盖 UV 范围，否则边缘容易出现错误。 查看变换的色彩管理会影响颜色。为了得到一致的结果，它应该被设置为 标准。 Blender 的变换的默认值并非标准，这会导致你在 3D 视图中的颜色与图片编辑器中不同。请一定注意该问题。 如果你需要将材质变为透明的（如添加表情），不能直接将图片连到输出，需要在着色器编辑器中添加透明 BSDF 节点和混合着色器节点，并用图片的 Alpha 通道作为系数输出材质。 骨骼与权重现在你有了一个很自信地站着的人物，但是却死气沉沉的，看着像加载出错的样子。我们得让它动起来。 模型要靠骨骼才能动起来。骨骼的结构类似一颗有根树，每一根骨头有其父节点（骨头），祖先骨头的移动会连带子骨头一起移动，这意味着每个骨头的位置和角度信息其实是相对于其父骨头的。这很符合常理：你保持头与脊柱平行，弯下腰，头会随着身体一起向下移动，而不是停留在原地（哈哈）。如果你的头真的停留在原地，那么说明你的骨骼没设定好父级或者更权重没刷好。 权重是什么？权重其实是一个统称，在这里特指骨骼权重。注意，我们是看不见骨骼的，我们能看到的、我们的目的是网格的移动。网格是跟随骨骼移动的，你可以将骨头看做它附近网格的父亲，我们将网格的移动依附在骨头上，这样，我们只需要控制骨头就可以控制其附近网格进行相同的位移旋转。那么具体这个骨头控制网格的哪些节点、控制多少呢？这就需要给网格赋予权重了。 选择一个骨头，在权重模式中给你希望它控制的网格刷上权重。刷的越多，骨头的移动对节点移动的影响越大。注意，一个节点的在各个骨头上的权重之和应该是 100%，否则它将部分保持绝对坐标。具体操作中，你可以给人物摆出一些很夸张的动作，以检查权重是否正确。 如果你之后想添加衣物，衣物同样需要绘制权重绑定到骨骼上。 我两次遇到了无法在权重绘制时选择骨骼的问题。在 Blender 4.0 后，操作为先选择骨骼，Shift 加选网格，在权重绘制模式中按 Ctrl+Shift+LMB 即可。 如果网格受骨骼影响很生硬，那大概是因为有些节点只有单一权重或没有权重。网格的最终权重是将所有骨骼的权重归一化。因此查看网格是否的确被多个骨骼影响。 形状键骨骼方便其他程序比如游戏控制我们的人物肢体，然而我们仍然需要一些细节的固定动作。这将用于 Unity 动画。比如做表情时，人物的五官网格会有不同的位移。这些比较固定的动作可以用形状键来实现。 形状键使用方法也十分简单。对每一个网格，创建一个形状键（会自动创建基础形状键），然后将网格各个节点移动为你想要的形状，可以设定 $0-1$ 以内的值来。由于形状键是平滑过渡的，你甚至可以控制权重为中间过程。结合多种形状键，可以创造出多个组合动作。事实上，Blender Cats 插件给出不同音的唇形就是依靠这种方法：只需给出 AH OH CH 三个音的唇形就可以组合出几乎所有发音的唇形。你也可以利用这一点来做出新的表情。 制作动漫人物可能会需要一些表情贴图，直接用网格做，平时缩小隐藏在头内部，使用形状键时放大调出来即可。 网格-从形态键混合 可以快速地从已有形态键得到新的形态键。如果你想制作的表情为基础表情的组合（如害怕表情可为眼睛缩小瞳孔+面部悲伤），你无需将所有表情用形态键捏出来（不同网格的形态键也不互通）——在导入 Unity 后，会重新设置表情选项，那时可以用多个动画（形状键，骨骼）来实现复杂的表情。 至此，制作模型的基本流程全部完成。可导出为各种不同格式。 导出模型导出模型时，注意导出时的参数：选择对 .fbx 应用变换，因为 .fbx 模型和 .blend 模型数据的单位不同。如果你想把材质贴图打包导出，请选择“复制”。 导入 UnityUnity 是 VRChat 所用的游戏引擎，我们需要将模型导出为 .fbx 文件再导入 Unity 中。 Unity 是一个游戏引擎，因此它有自己的一套逻辑，为游戏场景服务，模块很多。但是我们只需要导入一个角色到场景中，因此如果不是对引擎很感兴趣，这边建议跟随教程操作，否则会出现不可预料的错误。 如果你遇到了模型形态键丢失的情况，查看是否在 blender 中给网格应用了所有修改器。我曾保留了一个空的数据传递修改器，导致形状键丢失。 在重复导入 .fbx 文件时，请务必确定导出时的参数一致：选择对 .fbx 应用变换，以避免单位不统一导致的缩放问题。（如果你覆盖资源时发现变换乘了100，通常是这个问题导致的） VRChatCreatorCompanionVRChat 提供了官方的开发工具包，从官网下载后根据指引下载 Unity Hub 和对应的 Unity 版本，从 VCC 创建工程即可。 导入模型将 .fbx 文件拖入工程即可将其作为资产导入。导入后需要将模型作为为“人型”进行设置。注意去除启动识别不对的骨骼，比如下巴。 导入材质如果你选择了打包材质，那应该会自动设定好。否则你需要选择“使用旧版外部材质”，并将贴图作为资产导入。 你需要给材质设置着色器。有一款适合风格化的动漫着色器：Poiyomi Shaders。下载它并作为 Toolkit 导入即可。VCC 中可以在 Manage Packages 里找到并启用对应的工具包。 将模型设置好后，将其拖入场景。 添加动画可以给模型添加动画，包括自己设计的和导入网上下载的。 人型动画（包括 VRC 里的默认动作）都是根据你导入模型资产时设置的“人型”骨骼来做的，因此请务必保证设置正确且为 T-Pose。 用于人型的动画作用于 Action 层。模型具有很多“层”，每层具有不同的优先级以控制不同的部分。比如，Action 层控制人型动作，将人物动画放在该层就可以控制动作，同时在动画执行时就无法进行跑步、跳跃等动作。 用于非人型骨骼或者网格变换的动画作用于 FX 层。FX 不会影响动作，所以用于制作表情。 控制动画需要两个组件：控制器和控制参数。可以作为资产被创建。 注意，如果你在 VRChat 里添加了眨眼动作，同时你又制作了包含闭眼睛的表情，那么需要将（待解决） 物理骨骼物理骨骼用于在游戏内使骨骼获得物理效果，包括弹性、飘动、碰撞箱等，可以用于尾巴、耳朵和毛发。 首先，给你场景里的模型里创建空对象。在空对象中创建 VRC Phys bones。完成设置根骨骼、碰撞箱大小（可以用曲线控制）等即可。注意，不要影响人型骨骼。 添加动画时，如果是不影响 humaniod 部分的骨骼，可以进行 transform 变换。但请注意：添加了 VRC 物理骨骼的骨头无法进行 transform。如果你这样做了，在启动预览和 VRC 中会失效。因为脚本是在运行后执行的。 测试上传打开 VRChat SDK，登录账号（需提升等级后才能上传），给模型起名和描述等，点击下面的 build and test 即可在本地预览模型。 如要上传，请开全局加速，然后点击上传即可。","categories":[{"name":"创作","slug":"创作","permalink":"https://starcried.github.io/categories/%E5%88%9B%E4%BD%9C/"}],"tags":[{"name":"微光","slug":"微光","permalink":"https://starcried.github.io/tags/%E5%BE%AE%E5%85%89/"},{"name":"3D 建模","slug":"3D-建模","permalink":"https://starcried.github.io/tags/3D-%E5%BB%BA%E6%A8%A1/"}]},{"title":"华为实习游记","slug":"华为实习经历分享","date":"2024-09-04T01:23:56.000Z","updated":"2024-09-26T05:11:08.104Z","comments":true,"path":"2024/09/04/华为实习经历分享/","permalink":"https://starcried.github.io/2024/09/04/%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86%E5%88%86%E4%BA%AB/","excerpt":"","text":"前言 得益于我参加大学生信息竞赛的经历，在今年五六月份的时候，我收到了华为 HR 的邀请，参加一个华为与上交、中科大、浙大等学校的“菁英班”项目，并借此机会去华为实习。 实习时间为两个月，包含项目的培训和部门实习环节。实习期间在 AI team 处理一些具体算法的工程实现。客观成果为一次实习经历、初高级人才认证和一些实习补贴。 数学专业本并不要求实习，我本来也没有实习的意愿。然而，在我收到 HR 邀请的时候，我发觉我自己对未来的规划并没有那么明晰，也没有了解和准备。这次实习正好是一次很好的机会，让我得以清楚选择自己未来的方向，搞明白自己真正的兴趣所在。 何况，被大厂邀请去参加实习，这好事我拒绝干嘛？也算是打信竞的一项福利吧。 实习经历 得到 offer 华为的 HR 通过我之前填写 ICPC 的信息加了我微信，让我参加华为的“菁英班”项目。这个项目会培训一段时间，然后在部门做课题，整个流程算作实习。 HR 小姐姐很热情，专门带专家跑来交大请我们吃饭。交谈中了解了一些公司情况，以及之后的打算。我的打算就是先去体验体验练练手，之后还是想要读博的。专家也很热情，也主动加了微信，虽然我感觉最近一段时间是不会用到这方面人脉的。 offer 的流程是两次面试和笔试，大二学生无需笔试（或者机试）。第一次面试问个简单算法题，现场写出来即可，学习信竞点击即送。第二次面试是部门主管试你的人，正常一点自信一点感觉就可以。大厂的人员素质还是蛮高的，平易近人有耐心还幽默，反问环节我问了问实习地点的环境，非常棒，而且快要搬到新建的青浦区了。这次实习是在上研，如果我真的去工作的话到时候就在青浦了。虽然离市区远但是我还蛮喜欢像闵行这样的郊区环境的。 审核通过后会收到电话问你是否愿意接受 offer，接受了做个测试（感觉像定位你的位置，有没有野心之类）打印申请书请学院或导师盖章去报道就行。 为了这次实习，我甚至把小学期的课都翘了。好在都是水课，甚至不用考试。作业全部用 ChatGPT 辅助完成。 通勤 实习不包住宿，外省实习生有额外 1k RMB 的住房补贴，咱虽然在闵行但也算在上海的没有。我一开始蹭住了一段时间，然而感觉蛮别扭的也不实际，于是之后只好学校上研通勤了。闵行和浦东之间很远，好在华为有班车直通学校，不过也是每天 2h+ 的通勤时间。班车坐一次 15-18 RMB，如果你坐晚上九点的车可以免费。晚班车声势浩大，上研南边的路上停满了巴士，我第一次提前半个小时到才堪堪找到正确的车。 华为班车，环境很好，有时候人都会坐满 环境 华为上海研究所（上研）很大，全部属于华为。然而，华为还有许多租借场地。我所在的 HarmonyOS 终端部门就在一公里以外的东方万国企业中心而非上研本部。 离场才进入上研的工作区域 华为的研发环境很不错，虽然外包场地只是几个办公楼，但工位还是很宽敞的，空调很舒服，就是厕所网不好不适合摸鱼（x）。 东方万国研究中心，我工作的楼，拿完夜宵回校 员工福利也不比上研差。 健身房：上研有健身房，分有氧、无氧和团操区。东方万国也有健身房，但是感觉是华为合作的商业健身房，华为员工都可以去免费健身。 东方万国的健身房，有氧居多 夜宵：晚上八点半可以去食堂领免费夜宵（做为加班福利），东方万国和本部差不多。有吃不完的水果和很好吃的面点、饮料或者卤味，可以任选。每月会上新。我实习了两个月没能把所有品类吃过一遍。 每天晚上会将所有夜宵套餐展出，可以选择喜欢的组合 交通：正如我所说，华为有到各个主要地点的班车。而且华为有许多场地，场地之间有接驳车。（但是我没坐过） 餐饮：上研有很大的食堂，价格还算合理，但租借场地的食堂就是又贵又难吃了。我基本上都是吃外卖，以及一些周边的店。平常工作日会发一些水果零食奶茶雪糕给大家，还会组织一些有奖品的小活动（我一趟实习获得了三个水杯两件 T 恤）。 日常送奶茶，或者玩个踢毽子之类的小游戏再送 以上华为的服务部分都是华为后勤部负责的。除此之外，东方万国其实有一部分是商圈，甚至还有个付费游泳馆。说实话，如果在附近租房子打工感觉会有还不错的生活体验。 培训 项目刚开始有一周多的培训。这部分培训主要将我们当做日后员工以及 HarmonyOS 开发者来培养。培训内容包括华为的岗位制度：技术管理两条线路，等级制；纯血鸿蒙系统架构下的软件开发：ArkUI 使用实践；以及华为公司的现状即发展之类的。 培训期间非常轻松，还有免费小零食吃到饱。除了听听课就是做团建游戏，虽然很幼稚但很开心，毕竟在放假嘛。 实习生活 我被分到了 AI team，正好我的兴趣也在这边。导师给我分了两个项目，但都比较简单是 Python 转 C++，我直接做 API 搬运工即可。正好学学如何写工程代码和使用 OpenCV 的库。该说不说，这个库的功能真是十分强大，AI 也已经发展到了很先进的阶段，是时候跟上潮流学会使用和研究了。 工位环境不错，适合摸鱼，我还带了个折叠床便于午休。研发岗位有弹性的工作时间，必须到的时间只有 9:00-12:30，14:00-17:30，剩下一个小时前后补一下即可。而且打卡是定位打卡，只要你在园区内都可以打卡，无论你是在吃饭还是健身都算工作时间，对实习生来说十分友好。虽然中午 12:30 才下班，但其实大家 12:00 就陆续去吃饭拿外卖了，13:00-14:00 办公区会熄灯，大家躺在折叠床上午睡。总之，这两个月实习我大多数都是在悠闲中度过的——上完班吃个饭健个身，回来摸会鱼或者做会学校作业，然后拿夜宵坐免费晚班车走人。 值得一提的是华为内部的办公系统，非常方便快捷，提供工号和名字就可以实时联系到公司内部的人，也可以随时开会讨论。除此之外，公司还提供付费软件以及知识分享平台，以供员工学习和分享。完全符合我对大厂高效率的想象。 实习成果 两个具体的项目为“表情评分排序”和“视频抖动检测”，我负责的都是比较简单的实现部分。具体细节我记不住也应该得保密，不过也没什么技术含量就是学了学 OpenCV 库，以及如何用 AI 写代码。 看了那么久机器学习的理论终于也是到实操上了，这次实习也是收获颇丰的。 一个比较实际的收获是在公司里的工作对接经验。在一开始浪费了许多时间的实际上是工作没有交接好，导致我做了许多无用功。这也算是一个比较大的收获吧。之后我有问题直接联系前面的同事开会讨论，效率就高了很多。在公司里大家还是主要在乎自己的事情，你的事还是需要主动去麻烦别人的。 结业 HR 小姐姐说我比较开朗活泼，唱歌也好听，问我能不能去实习结业典礼上唱歌。多稀罕啊，有人说我开朗活泼（虽然这几年大家的评价都挺好，但我听了还是十分欢喜），于是便答应了。 反正我都在上海捷豹音乐厅一个人找了几分钟凳子了，这种场面洒洒水啦 离开这个地方还是有几分不舍的。大厂不愧是大厂，无论是领导还是同事都十分有素质，平常也会一起去吃饭，没遇到所谓的职场问题。看来无论在学校还是社会，你周围的环境还是蛮重要的，环境里的人也会影响你。走的时候，和部门的大家以及 pl 都打了招呼。 看来，至少要有好长一阵没有华为美味的夜宵吃了。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"在草地上打滚","slug":"在草地上打滚","date":"2024-08-19T01:15:34.000Z","updated":"2025-02-24T07:14:26.911Z","comments":true,"path":"2024/08/19/在草地上打滚/","permalink":"https://starcried.github.io/2024/08/19/%E5%9C%A8%E8%8D%89%E5%9C%B0%E4%B8%8A%E6%89%93%E6%BB%9A/","excerpt":"","text":"最开心的事，是和最亲近的人一起去做一件浪漫的事，比如在草地上打滚。 如果感到难受，迷茫，疑惑，应该去发发疯，比如一个人来一次无准备的骑车，把自己累到回去倒头就睡，然后发现其实没有什么事是真正困难的，其实自己要做的事情很简单。 真正需要在乎的事情、需要在乎的人其实很少。许多事情其实都没有那么重要，重要的事情往往都发生在自己身边。如果发现一些东西或人自己努力了也无法挽留，也许应该仔细考虑它是否真的重要。有那些时间，应该留给自己去草地上打滚。 最近消费了很多东西，不断提醒自己不要落入消费主义陷阱，但又觉得其实是必要的。或者，自己只是不想花那么多时间去处理一些琐事。之前为了下载百度网盘的资源，花了很多时间找渠道，但其实只需要花钱买个会员就可以解决所有问题。于是我开通了很多会员。我想买一台相机，真正了解之后发现自己并没有那么高的消费水平，于是换了一台手机代替。我在重新计算自己的需求和成本，我发现我变得和之前完全不一样了。然而，我觉得我有这个资格和能力，我没有向家里要钱。 最近做了许多事情，有一些一直想做的事情。比如，修缮我的博客，把之前的东西全部搬过来，还有看《泰坦尼克号》。做完觉得，很多事并没有那么难，但是我却一直放着。这些事情在我脑中存在的时长已经证明了他们的重要性，是最没有理由觉得“不重要”而被拖延的。 重新衡量一些事物的价值，用钱或者其他什么东西。然后，把握我自始至终的方向，让自己始终在道路上前行。 我想做的事，从来就只有在草地上打滚这么简单。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"博客园 Cnblogs 迁移到 Github Pages","slug":"博客园-Cnblogs-迁移到-Github-Pages","date":"2024-08-06T12:11:51.000Z","updated":"2024-10-16T11:56:28.934Z","comments":true,"path":"2024/08/06/博客园-Cnblogs-迁移到-Github-Pages/","permalink":"https://starcried.github.io/2024/08/06/%E5%8D%9A%E5%AE%A2%E5%9B%AD-Cnblogs-%E8%BF%81%E7%A7%BB%E5%88%B0-Github-Pages/","excerpt":"","text":"前言 大概是四年以前，我开通了我的博客园账号。 博客是一个很原始的互联网形式。我并没有使用其社区功能，只是当做一个跨平台电子笔记本来用。如果写的文章能给别人帮助的话，那就再好不过了。 我的第一个博客文章标题是《快速幂》。当时我才初学信息竞赛，根本没有完全理解快速幂的原理，也不知道矩阵是什么。然而，我还是从晚上别人的博客里抄来了快速幂的公式，甚至包括矩阵快速幂，复述了一遍，通过这个过程进行学习。当时我甚至不会用 Markdown，就使用博客园默认的 TinyMCE 编辑器一个个手动点击来输入上标下标。 那篇博客的最后一句话是“大家一起进步吧XD”。我想起我当时是作为一个博主的身份，以自己的文章会被很多人看到的心态写下这篇博客。内容写得十分努力，然而也漏洞百出。在 NOI 结束之后，我把这篇文章错误的地方都删掉了，以免误人子弟。 从 2020 年 5 月 5 日，停课搞竞赛开始，我写了近有 150 多篇文章，总计 34500 多阅读量。很多之前的文章在不经意间已经有几百的阅读量了，有一篇题为《高斯消元——行列式》的文章甚至达到了 2600+。然而其内容却非常敷衍，透露出一股刚学竞赛的愚蠢。我不止一次地想把这些早年文章修改整理一下，学竞赛的时候，竞赛结束的时候，高考后的假期。然而，我始终没有动手。 总是发现，学做一些事情，就像小时候牙牙学语，并不总是按部就班，而是整个人倏地置身其中，任由自己不知所措、摸爬滚打地成长。学习竞赛就是一个很好的例子。我抄过很多题解，抄过很多代码，在那许多不在教室而在机房度过的日夜里死磕看不懂的题目，在无数坐牢般的比赛中用自己的想法得到尽可能高的分数。我急着摆脱前一天差劲的自己，尽可能多地去学习新的东西，去刷更多的题，让自己 OJ 的过题数飞涨。然而，在每场模拟赛和正式比赛后，我却没有踏踏实实地去补题，去反思，去总结。我总是记不住上次比赛的题目，甚至到现在都不知道高考那些题做错了。这样的学习方式可能对我这种只有一年时间的竞赛生收益很快，但上限不高。也许，这就是我差别人的地方。博客园的样子就是很好的反映。 我从来没有记日记的习惯，也并不喜欢整理笔记，尤其是在学期已经结束、再也不会上这门课之后。但是现在我发现，竞赛带给我的感觉却很不一样。不只是因为上大学后开始打 ACM，而且我发现之前在高中学到的很多东西，在很多不经意的时刻会再次出现。大学后的每一门新的课程，都让我重新审视之前学过的知识。诸如微积分、线性代数、概率论、数论等等，我都有了新的认识。每每在课堂上学到、在题目中用到它们，我都会想到我在很久以前，又或许是不久之前，在电脑前一点点敲下关于它们的不求甚解的文章，抄背没有完全理解的模板。 因此，在这次暑假的时间里，我下定决心建一个全新的博客，好好装扮它，作为我的心灵庇护所。我想把之前欠的账尽可能还上，不再被回旋镖打到。之前，我总想着快速地把上一秒的自己甩到身后，仿佛那是一个拖累我的“别人”。但现在我发现，每段时间的我都确实是我，无论他叫 Star_Cried 还是微光。他们都没有在拖累我，正是他们一步步推动着我成为现在的自己。 成长的路程总是有舍有得。Github 相较于博客园，更难被搜索到，更难以访问，而且我会失去之前的阅读量。不过我建立博客最初的目的，也只是为自己而写而已。这次的迁移，我不想它作为一个新的开始，而是将我之前所有的一切都搬过来，擦拭干净，摆放整齐。 欢迎访问：Star_Cried 的博客园。(不再维护，仅留档) 博客迁移 下载博客 我觉得各大博客网站为了自己的用户量都不会去给迁移出去的方式。博客园也是如此。如果你的博文不多，那你大可以手动复制；但是我的文章有 200 篇左右，手动复制实在是累人。 网上有很多迁移的办法，大多数都是个人写的小工具。我试了很多，最终使用这个 cnblogs-blogger-downloader 将文章成功导出，效果不错。其它工具由于博客园版本更新频繁的原因，大多数已经不再适用了。我用的工具在发布日期仍可用。 网上的迁移方法大致分为几种： 网页爬虫。这种访客形式的爬虫工具无法访问文章源码，只能获取到文章的 HTML 页面，无法获取到文章的 Markdown 格式。 博客园导出工具。博客园可以备份文章为 xml 文件，许多工具对该文件进行解析，可以获取到文章的 Markdown 格式。然而，我试用了许多工具，最晚到 2022 年，这些工具都已无法使用。对照 xml 文件发现，现在的文件格式和之前有较大出入，代码字符串匹配的方式无法识别。 MetaWeblog。cnblogs-click-backup-util 利用多博客同步的 API 接口的工具，理论上可行。但我不知为何在验证部分失败了。(在我发帖询问后作者及时更新并回复我问题为用户名和博客地址不同，没有继续尝试) 博主端爬虫。cnblogs-blogger-downloader，感谢这位作者的开源。该工具利用 Cookie 访问博客园后台，将文章按分类导出，直接导出源码。非 Markdown 文章会导出 html 格式，Markdown 理论上可以解析。 导入博客 将 Markdown 文件放在一个目录下，用脚本添加 Hexo 的 Front-Matter 头信息，再放入 Hexo 的 _posts 文件夹即可。 123456789101112131415161718192021222324252627282930313233343536import os# 定义要添加的前缀模板prefix_template = &quot;&quot;&quot;---title: &#123;title&#125;categories: [OI]date: 2022-04-30 00:00:00tags: [博客园]---&quot;&quot;&quot;# 定义目标文件夹folder_path = &#x27;./cnblog/ALL&#x27;# 遍历文件夹中的所有文件for filename in os.listdir(folder_path): if filename.endswith(&#x27;.md&#x27;): file_path = os.path.join(folder_path, filename) with open(file_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as file: content = file.read() # 获取文件名（不包括扩展名） title = os.path.splitext(filename)[0] # 生成带有文件名的前缀 prefix = prefix_template.format(title=title) # 添加前缀 new_content = prefix + content # 写回文件 with open(file_path, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file: file.write(new_content)print(&quot;前缀已成功添加到所有.md文件中。&quot;) 手动修改 刚才的下载和导入过程没有给博客自动添加头信息，如日期、分类和标签等。需要手动修改。在此过程中顺手对文章进行了删改整理。（这其实是最耗时的步骤） 非 Markdown 格式的文章，由于其基本都是早期文章，内容不精，进行删改转换格式。 对不精良的博客进行删除和重写。 对大多数文章进行了格式调整。有空修改内容。 图片引用原地址，等挂了再修改。 所有导入文章添加了博客园的 tag，方便分类。 所有 OI 竞赛算法题目相关的日期默认为 2022-04-30，日记日期为博客园发布日期。 至此，博客园的文章全部迁移到 Github Pages 完成。","categories":[{"name":"Web","slug":"Web","permalink":"https://starcried.github.io/categories/Web/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://starcried.github.io/tags/blog/"}]},{"title":"利用 Github pages 和 hexo 搭建自己的博客","slug":"利用-Github-pages-和-hexo-搭建自己的博客","date":"2024-08-01T09:25:23.000Z","updated":"2024-11-11T06:04:49.036Z","comments":true,"path":"2024/08/01/利用-Github-pages-和-hexo-搭建自己的博客/","permalink":"https://starcried.github.io/2024/08/01/%E5%88%A9%E7%94%A8-Github-pages-%E5%92%8C-hexo-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"前言 Hello world! 这是我在新博客的第一篇博客文章，记录这个博客是如何搭建的。由于我并非专业人士，仅简略记录我的搭建过程和遇到的问题，并且不详细解释每一步的操作。如有疑问，请访问参考部分。 目前该博客处于美化阶段，主要内容为替换默认图片（背景，图标等）。博主艺术创作能力有限，欢迎提供帮助。 待办（For myself） 124 默认封面背景 589 qrcode 807 视差壁纸 1237 cursor settings Live2D 搭建博客 博客可以像搭建访问量较大的网站一样实现。一般来说，搭建网站需要购买服务器、域名、备案、购买云服务器等一系列繁琐的流程，如果要制作静态网页还需要自己手搓或者利用 WordPress 等 CMS 系统。而用 GitHub Pages 和 Hexo 搭建博客，可以快速搭建个人博客，而且不需要购买服务器、域名、备案等繁琐的流程。 Github Pages 是 Github 提供的静态页面托管服务，可以直接将静态网页托管到 Github Pages 仓库中，然后通过域名访问。相较于其他静态页面托管服务，Github Pages 免费、稳定、安全，但是在国内访问和加载资源较慢，适合个人博客。 理论上说，你完全可以自己手搓 HTML 页面和脚本完成博客。但对于像我这样的新手或者重点在成果而非过程的人来说，使用现成的框架和工具可以节省大量时间。Hexo 是一个基于 Node.js 的静态博客框架，它可以快速生成静态网页，并且可以用 Git 部署到 GitHub Pages。 创建 GitHub Page 登录 Github，创建一个名为 username.github.io 的仓库，其中 username 是你的 GitHub 用户名。这就是你的 GitHub Pages 站点的仓库。可以通过访问 https://username.github.io 来访问你站点的 index.html 文件。 安装配置 Git 从 Git 官网 下载安装。 因为 Git 是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。在命令行输入： 12git config --global user.name &quot;user_name&quot; # user_name填入GitHub用户名git config --global user.email &quot;user_email&quot; # user_email填入GitHub注册的邮箱 查看已设置的用户名和邮箱，在命令行输入： 12git config user.namegit config user.email 配置 SSH key: 1ssh-keygen -t rsa -C &quot;user.email&quot; # user.email为GitHub上注册的邮箱 三个默认设置就可以，不需要密码。在 C 盘 .../Users/your_user_name/.ssh 目录下找到 id_rsa.pub 公钥文件，复制里面的内容，在 GitHub_Settings_keys 上新建添加 SSH key。 输入以下命令检测是否配置成功： 1ssh -T git@github.com 如果出现 Hi username! You've successfully authenticated, but GitHub does not provide shell access. 字样，则配置成功。 如果返回 Connection closed by 20.205.243.166 port 22，有可能是代理的问题。请关闭你的代理清除缓存（重启）并重试。 安装 Node.js 从 Node.js 官网 下载安装。 我用 Package Manager 安装 Node.js 遇到了问题，可选择使用 Prebuilt Installer 安装。 安装 Hexo 在命令行中输入以下命令安装 Hexo： 1npm install -g hexo-cli 创建一个文件夹作为你的博客配置文件夹所在位置，并在其中打开命令行。输入 123hexo init blogcd blognpm install 即可创建你的博客项目。其中 blog 是你的博客文件夹名。之后所有的操作都在 blog 文件夹中进行。 配置 Hexo 安装 hexo-deployer-git 插件，用于部署到 GitHub Pages。 1npm install hexo-deployer-git --save 编辑根目录下的 _config.yml 文件，配置你的 deploy 部分站点信息。 _config.yml1234deploy: type: git repository: git@github.com:StarCried/StarCried.github.io.git #你的仓库地址 branch: main 现在你已经搭建好了你的博客，可以进行本地预览和部署。 如果你本地预览正常而部署后静态资源未加载（比如主题格式混乱），请检查你的 _config.yml 文件中的 url 和 deploy 部分是否正确。 除了 deploy 部分，你还需要配置其他部分，包括 site 等。 使用 Hexo Hexo 有以下常用命令： 123456hexo init # 创建一个新的 Hexo 站点hexo clean # 清除缓存文件hexo generate # 生成静态文件hexo deploy # 部署到 GitHub Pageshexo server # 启动本地预览服务器hexo new &lt;layout&gt; &lt;title&gt; # 创建新文章 Hexo 的工作流程是，在项目中进行主题配置（_config.yml 文件），用 hexo new 命令创建新文章、在 _posts 文件夹中编写文章后，运行 hexo generate 命令生成静态文件（要部署到 Github Pages 的文件，在 .deply_git 文件夹中），然后运行 hexo deploy 命令部署到 GitHub Pages。 美化博客 Hexo 官方提供了丰富的主题，你可以在 官方主题发布页 中查看。注意，大多数主题是由社区提供的，其配置方式和插件支持等千差万别，请根据自己的需求选择适合的主题。我是用的是 volantis 主题，阅读文档以自定义美化。 主题安装 参考 官方文档 安装主题。 主题文件夹下也有一个配置文件 /node_modules/hexo-theme-volantis/_config.yml。在博客根目录的 _config.yml 文件旁边新建一个文件 _config.volantis.yml ，这个文件中的配置信息优先级高于主题文件夹中的配置文件。将配置文件复制过来修改，以免配置丢失。 使用 npm 安装主题的配置文件在如上位置，而使用传统方式安装的主题配置文件在 theme 文件夹下。 遵循官方文档，修改配置文件 _config.volantis.yml 中的配置信息即可。 使用资源 在配置文件中，你可能经常看到图标使用 volantis-static 位置的图片资源。这是主题的官方静态资源库，可以直接使用里面的资源。 如果你想上传自己的资源，最简单的办法是使用图床或者另开一个 github 仓库，然后将图片链接替换到配置文件中。如果你觉得加载速度太慢，也可以使用 cdn 服务，参见文档。 密码插件 如果你想加密一些你的文章，使得只有正确输入密码之后才可以查看，那么你可以使用hexo-blog-encrypt 插件。 只需要按照文档安装和配置即可。不过每次上传文章前需要清除缓存。 数学公式 Hexo 自带 MathJax 插件，可以渲染数学公式。volantis 主题默认启用该插件，你只需要在每个用到数学公式的文章前的 front-matter 中添加 plugins: [mathjax] 就可以使用数学公式了。 使用的话，在文章中使用 $ 和 $$ 来包裹公式即可……吗？ 对单行公式来说是这样的。但是对于多行公式，由于默认渲染器的原因（hexo-renderer-marked），会错误解读 // 优先为 Markdown 语法，导致渲染失败。（VScode 编辑器的 Markdown to PDF 插件也会遇到这个问题） 你可以根据官方文档选择自己喜欢的方式解决。 我解决的办法是更换渲染引擎。然而不同渲染引擎解决的方法不同，依然有可能遇到插件冲突问题。 比如，我第一次更换了 syzoj-renderer： 12yarn remove hexo-renderer-markedyarn add hexo-renderer-syzoj-renderer 如果你没有 yarn，可以安装一下（我没试过 npm）。 1npm install --global yarn 它解决了多行渲染的问题。然而，这导致了标签插件没有正常被渲染。由于该插件有过和 Pjax 插件冲突的先例，怀疑是渲染逻辑的硬伤，于是更换了 pandoc： 12yarn remove hexo-renderer-syzoj-renderernpm install hexo-renderer-pandoc --save 同时，你还需要下载 pandoc 并将其导入环境变量或加入配置文件。 测试，解决了所有已知问题，并且浏览时右键公式可以复制源代码，十分方便。 图床 如果你想在博客中插入图片，那么你需要一个图床。将图片上传到图床后，你可以直接引用链接到博客里。 你可以直接将图片上传到博客仓库，然后引用，但 GitHub 的国内加载速度实在太慢。在多次试用之后，我找到了一个比较合适的图床网站：imagehub 图床，它免费、快速，但稳定性未知。 Live2D 插件 除了主题整合的可以直接使用的插件，你也可以自己装额外插件。在进阶玩法里有一个看板娘插件（实际是将 Live2D 模型渲染到页面上）。我想更进一步使用微光模型。然而模型还没影子 待更新。 转移博客 之前我主要使用的博客是博客园，需要将内容进行转移。参见 博客园 Cnblogs 迁移到 Github Pages。 参考 GitHub-Hexo-从零开始搭建个人博客 GitHub Pages + Hexo搭建个人博客网站，史上最全教程 volantis 官方文档 hexo 官方文档","categories":[{"name":"Web","slug":"Web","permalink":"https://starcried.github.io/categories/Web/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://starcried.github.io/tags/blog/"}]},{"title":"兽装制作","slug":"兽装制作","date":"2024-06-02T03:32:29.000Z","updated":"2024-10-16T11:57:10.163Z","comments":true,"path":"2024/06/02/兽装制作/","permalink":"https://starcried.github.io/2024/06/02/%E5%85%BD%E8%A3%85%E5%88%B6%E4%BD%9C/","excerpt":"","text":"前言 学校的各位已经自制了两套兽装了，然而没有一个完整的文档进行总结，以至于从材料准备到工作流程都是当场想当场学当场买，十分低效。为了用我能做到的最好的努力将微光实体化，并给将来可能的新 home-made 小动物提供指导，写下本篇。 大二期末开始的工程，于大三国庆时完成。 微光半装。包括兽头、爪子和尾巴几个部分。花纹较少，有少量头发。 本文中，我会简述我制作的各个步骤和用到的工具与材料，并给出一些注意事项。最后附上材料价格参考。 粗体文字为重要，删除线文字为微光未选。 爪子 材料 四面弹绒布 毛布 棉花 衬底布 包边布（用弹力绒代替） 打板纸（牛皮纸） 滴胶指甲（可选） 工具 电动剃毛器 针线 剪刀 美工刀 记号笔、滑石粉（在黑色布上标记） 热熔胶枪（可选，滴胶指甲） 制作步骤 使用打板纸对照手型画出爪子的形状，并将其剪切为爪掌、爪指各部分，且正反各一面。正面可以加入肉垫的形状，肉垫的洞不用裁走，裁剪外缘即可。可以用笔标注版型的名称和对齐线。 按版型在毛布上标出缝合位置和毛向，毛向应向外。可以用笔标注对应版型的名称和对齐线。（如用布指甲，应在打板时提前留出缝合位置） 在裁切毛布前先剃毛。仅爪指部分应当剃为 3mm 左右短毛。（可选） 使用美工刀裁切布料。 用四面弹绒布裁出肉垫的形状并用回针缝缝合到爪掌和爪指上。如肉球有体积，则将手指的内部毛布上割开并塞入棉花，最后缝上缺口。缝合一半的爪子正面 毛布在内从爪尖开始缝合各部分 如果需要衬底，使用同样拼合完整的版型裁两片衬底布缝合边缘，并贴合毛布的背面缝一圈固定在毛布上。 最后，将爪子翻过来，使用包边布将边缘缝合固定。 如用滴胶指甲，此时用热熔胶将其贴到对应位置。（可选）。 将缝合时夹住的毛挑出，最后修毛。做好的爪子 兽头 微光使用正面打印头骨和 EVA 制作兽头基底。也可使用海绵直接制作，在此不做讨论。 准备工作 自己设计头骨 头骨骨架支撑结构，决定了大体形状和大小，根据自己头的大小和形象风格确定。 可选用商用头骨，当然也可以自己设计 3D 模型进行打印。由于正面面部结构比较复杂精细，而后脑可能需要减重或者柔软和舒适性，所以头骨可以全打印或只打印面部。 微光使用的是自己设计的 3D 模型，使用 Blender 软件进行 3D 建模面部，导出为 stl 文件，即可在 3D 打印机上打印。没有打印机的话，可以找接代打的装师或网上代打。注意，自己建模最好找有经验的装师先检查一下模型，以免导致打出来不可用。微光找的工作室是绒光芥子。 如果自己设计头骨，模型文件具有自己的版权，请注意防止盗用。 似光老师帮忙处理和打印的面部头骨 眼睛 需设计好眼睛的图案。根据头骨测量好眼睛的尺寸，并在打印前预留好足够的空间。微光的眼睛是我自己画的。 材料 打印头骨 EVA（4mm，少量1mm） 毛布 打印防尘网（定制，眼睛） 棉花 布基胶带，卫生纸，保鲜膜 内衬布 拉链 无纺布/魔术贴 头盔内衬 亚克力球（眼球，250mm,可选） 牙齿（可选，打印或布） 充电宝 风扇 钕铁硼磁铁 工具 电动剃毛器 针线：粗针粗线 剪刀 美工刀 记号笔 热熔胶和热熔胶枪 头模 电烙铁（带刀头，切割亚克力球，可选） 制作步骤 基于打印头骨使用 EVA 制作兽头的基座 将EVA裁剪成多条约3厘米宽的长条，包裹拟合后脑的形状，圆润且牢固即可。若需透风可留较多空隙。 将头盔内衬粘合到头骨内部，试戴头骨以调整高度。为了不影响安装眼睛，可以将此步骤放在其之后。 为耳朵打板，裁剪 EVA 并贴在头骨上。 制作眼睛 本来想用亚克力和 EVA 制作较深的可动眼，无奈眼眶相对于打印防尘网上的眼睛太小，只得改变方法。 裁剪出较厚的贴合头骨内眼眶外缘的 EVA，确定防尘网在 EVA 后的位置。 用热熔胶粘合防尘网、EVA 和头骨三部分。此时眼睛位置已经固定，如问题请尽快调整。 这样优点是无需占据眼眶的大小，之后可以替换眼底，没有亚克力球不会起雾。缺点是会让防尘网更靠近眼眶使得可动效果降低且没有亚克力球的反光。 打板 用碎布基胶带拟合头骨骨架（直接粘在头骨和 EVA 上）。耳朵有现成的版可不用拟合。 保证已用头盔固定好高度。兽装主人穿戴好骨架保持稳定。 同伴用平整的保鲜膜平整地缠绕头骨一圈，直到胸口和肩处。将脖颈处用弹力带束缚以得到脖子（如不用拉链，脖子处需比头部大，用其他方法固定），然后用碎布基胶带粘在保鲜膜上拟合脖子到胸口。此过程持续时间较长。 从拉链处裁剪直到中之人头可以脱出。 拆板。用记号笔在版型上画出花纹。头部毛向为从鼻头向外辐射状，按照不同的毛向用记号笔画出边缘。保证每片毛毛向一致、颜色相同、边缘处角度较大、交界处最多只有三片毛相连、尽可能拆的少而大。腮毛处需留缝合线。每片毛标记毛向、颜色、对齐线和缝法。其中，面部缝法为平缝，裁布时不留出血。脖子及以下为锁边缝，留出血。 将版裁下并妥善保存。可以拓印到打板纸上。 缝合毛布 按版型裁毛，注意信息转移准确和按照缝法留出血。如果要求对称，仅需裁剪一半的版型，将其对称再裁一遍毛。 缝合。注意按照毛色选取合适的线。注意缝合强度，交界处应加强。耳朵和其他部分可以分开。 拉链处不留出血，将拉链两边分别缝在两片毛布上即可。 做两侧颊毛粘或缝在脸两侧。 粘毛 将一体的毛布用热熔胶粘合在骨架上。粘贴前，用黑色弹力绒包裹粘在嘴边缘。 这是很重要的一步。先粘耳朵。面部毛布先从鼻子开始粘。需要注意： 保证左右对称，对照毛布背面和头骨，正面长毛容易看不清。 贴合，不要留空隙。否则剃毛的时候会因为褶皱剃秃。多的毛布可以之后再修。 热熔胶不要堆积在一起造成凸起。 微光的刘海是缝合的，除此之外，头后面也有头发。将底层毛布剃短，裁剪多片头发交替粘上即可。 修毛 最后也是最重要的一步，修毛。用剃毛器加装 6mm 甚至 3mm 限位器从鼻子开始顺毛向剃毛，将面部剃短。保持耐心和细心，塑造出毛毛的最终形态。 安装配件 打印牙齿直接粘合即可，可能需要海绵或 EVA 垫高。 睫毛用不织布或者魔术贴做，后者可以配合粘贴眼皮。眼皮也可用磁铁做 用磁铁固定腮红等配件。 安装 5V 内部小风扇。充电宝也可以固定在头骨内部。 尾巴 时间紧，毛布少，没做。 大致步骤相同，将尾巴按花纹和曲率拆成三个面进行打板裁剪缝合即可。注意尾巴根的加固。 成本 材料采购截止时间为 2024/10，除了头骨和部分已有材料和工具，其他材料均为网上购买。 下标仅列出购置的材料、工具和成品的费用，不包括已有材料和工具。 名称 数量 单价/元 总价/元 头骨 1 50 50 毛布（起司毛） 1 75/半码 75 毛布（冰淇淋毛） 2 95/半码 195 电动剃毛器 1 178 178 亚克力球 1 24 24 布基胶带 3 12 36 打印防尘网 1 10 10 电烙刀 1 18 18 不织布 1 8.5 8.5 棉花 1 17/2斤 17 四面弹布 2 5.5 11 头模 1 30.8 30.8 拉链 1 4.4 4.4 魔术贴 1 23 23 风扇 2 6 12 充电宝 1 100 100 磁铁 1 24 24 尾巴 1 58 58 兽装袋 1 46.8 46.8 其他 100+ 100+ 总计 1021.5+ 注：头骨部分，截止时间代打参考价格为 PLA 0.15元/g。","categories":[{"name":"创作","slug":"创作","permalink":"https://starcried.github.io/categories/%E5%88%9B%E4%BD%9C/"}],"tags":[{"name":"微光","slug":"微光","permalink":"https://starcried.github.io/tags/%E5%BE%AE%E5%85%89/"},{"name":"手工","slug":"手工","permalink":"https://starcried.github.io/tags/%E6%89%8B%E5%B7%A5/"}]},{"title":"3.13 服药记录","slug":"3.13 服药记录","date":"2024-03-13T13:48:00.000Z","updated":"2025-02-24T07:25:31.239Z","comments":true,"path":"2024/03/13/3.13 服药记录/","permalink":"https://starcried.github.io/2024/03/13/3.13%20%E6%9C%8D%E8%8D%AF%E8%AE%B0%E5%BD%95/","excerpt":"本文含有隐私信息，访问请联系微光。","text":"cfa2926ad01c1ca5b72f4176a524df63b8ef215ab9ddd5fcf3035f1054938484b410bc6c8d8d8b3ea8dac432d7b89eac8f2cd150a58903adb14be53a0f356338bd9d3387b9a2d0ed62d5945146216b99030dc586075ff5e8a57f6cfa04f8e5c22f0fff5b4b289a482dce81d9416a8ce1300986d73cd5ac3bdec04a6942f033cc8dc5815206c827346390562d8ecddb504d3842de14a8aaf95602bc239ffb88f4c843820780d5212d80bdb2cd4c028125955b3acc2d462a1cc068581be4a4189295c3b0903fbab629ae9625dd939cbb5bc2ca56c32d618c87a27aad5d97b77fd7ab97e190dccdfeecfe4c6b665f7a2c0914e00e7820d77953e80fc04da1b05b6ce7cc8925bf95a5d8b0b34c934439bcb8f3ca9813e3f1df3bd363c1a9196ca4ed4ab2372c62694be06dc7cda18180a231afce11201f5d5bb99eb71425de6108867e2f533506095b1a9aa4a510db7f7385d464f934461c651e1ef3f26d08b2ad4e332c12b9e4d8f17d3a75fb4bf7e53789f571c421ea4638cc191f27b42bd64538dc593235c4c02256e8965daa933b7bc1c7f6814a4da6735ea0229a3c89372a2b0cb5e6ace6973876eb50fc1f3105748004aa2a590309637bf909e17dc87062465e143cf5098d607f24a0e3e1f0c1e827507d8d39a66ac41e113fc347e848d2df265292f6d3898f498ccc36a8faeb7a9946468e42bdeb3bba7246c5e30f1cd602350427963a982b7a9188141ad5bf30844ae1cdb3338398603a2b92783c466b7abd073ef4ea8f2b2e53c575d83088151ac6adeb603e54c245938a77645573d70bb31905e5cf3234fb9816e86a1a888f92cdf26d81710c5b82600fcb679c715e205bb867fbbc7c4177a3b53df35d660b7b0b50c041f8d07599122c4221e83aaa62fe45b718eb3afde337e2c0d5e080a6910705854e0d4dc724a1c884ee50f1801d74551d63e05afb12b4d989624b6ceb2fa237085bd631526dece7ee79836916d47feb53f09f3bffb8c36d5e9f2631c0cf9dd8fdcceaa59b68e924d153dd4e16fa87ab95cc111deeba6b0bb0d70f1d295b33e1189978c68798cc5e60e59532db4ca1d20f2e5153e3b0f61750a9e7d9914a915d92ff3ff709dbd6ec9bb3c0b31281abbaf39c8a3dbf1af7e1d572fc2dbf7e786c6c038d0f0273f61e490b59b9b7edc1704f004fd946f06e8ec0a3fe5965b0a1ce98fdbd79fb475b02dbb850215926a784a20e5a4867f2bef145f40b0ce802e028f5875cd546284266198b65de928d59993c8d7545e04d48d7ef455553dd1a6ccffa67ddab4d5abc9abee5634882547a2298a85e770aec470ec2d5a56b787fcc3429bc9edb2ba2b253ba79d66ab33b78542aad0e11bf8f61bbe02b4ce8737598a333b55a80c39ce9a85065ead817a1409b466285cb50020397ce37fb3696696f20fbafd69665802f12f58c8c9aa8e81a86f3b54e29a27a6de8cf4781aa473fe4b4d50f618a192d6a849f07610dc9ea80f7c8a777c22392e2b9143b3cc2edb6659833231099008cee1d8068ac7298bb3b485fbf86e3cf33a6efafbb07ceca35ab5eee6dabbd51db65e8d7e8025f9179637a48e8f42cbb733f56f00877a3c30d61279de12f2776e06cfd22cf7150bd203c787071b21c77073c4e69307c9a456f1980d15b7b674d2b9c7b6ecfaa19702c7decc98ae940875384afd425730dd1d3608528bdec7b866368cbb132fac9524978890e29f3557310f2cf45a84e8a79128e45753f5c3b4315650036b56786fa188233dd039b1c346dfb874c05be8be6adb31d181a8c1fba527215d525130032e77d58ec1087a1538c0f9194e4a8fdcbfd1294c35b0463c0a072d596bd1fa561a8ac2a65f132b638d0eb66e90fbd0295a9b214bccb5ac983b95135beb378a1dbfe22eae1d4ca31bad301f48a990ac12e41a02ae8902b380277dae33475c7bb0503499b6f1b432fe5cfa8f039e317f6d8baf5774319ef140c26fce0f643fd2279bb31a0888295eaab4e75e728f91173479c74ef19c48c907a93dc465bb550646e19c33ad7a91dfe2efee03b17b543a3e9fd4f5fb8c7da290cf5a0ec6be14ea881825b2a5a534e5a3155f6f46fd747ef6099d80b94dcfec6ece1c0ccf6e37e18c44f61f02cbfd1759738a2fa4878ba4b9540ccd86e9132c78ce7955ff86a084f7f40f1fe6ef0af66b05057ca611376c485c987638cc78645b69ddba87526b1bf2430429368a50181d0aad38f881d5a2155df88cf958eac972b950314e88d3fd4b80df127aa339588f578db74ad3c3bbc8139853b14fa3943ae1876de0f5da52898425b4107bf07cb7ae5cef9bb8856af9a18c9ce857e6fad5f879a99e5ce2ccf3c81a5e3cde0126a321f09cd2c96032e2c18e481e84d9319653011027dc3b88f6f2e4f93381bd3e656a92e99116bea1dea575b64c72f421049905c26a7ac7d612cab9f5bcbfd70afcc3029ddac51675f9bbec14f557f1fb1d64aaad5dc6d1ec76860db37c105e3afb39c5a083e7b9a02e8db186a55806ff0d8fc01f7df916d5ece92d79be7f82e8659e78563caee3fae7bb4ffc7c6145febc0f336333307df178adbead0055773f448a9433a4730cab4bc4acda4c079dc9ab8fe7ce81166c4b97f50a2151c85f0a0dd2819c1eed9d2c52b58bd6ad52a4cd544a9f2a3a2d765827e805649dcfec7358290dae7e12080146ad53925e901d1c5c536856f4879633f7f77d50aace4da7ba136fe9ad7b39de847b20bd96142c46f4ef5eb6db0d10dde983860c179e258abb0dba7c9bd76c4a07f8dce154e9ccb912bad17dfa3f9123958449f406a826dcbeb9e37370c11c491c3acbbe8e1490907a0e4af78ff6e1598c98b80a0e16272e951883c03b38ec9c59777b91c054a04c8056e1a1d973423dcefd12b49a1c52a9e87eb5273fd8f50fb18c6f4d5cf9f4622b5cbdd93d84950bf088b000f7a3c00f9166bf0e5a346dd076e4bbfbab721d0681d6fe82914ec056ca30b9f742985efb9450644677f27cef106caeef463f683014881c5818074f694c2b1919a93ab63d1ec388698495bd89960e9e8c627373abcef3c0c5aa5bcf4d4b779fcf1f93fe541e61ed6127f6521164ebfb0e7aa30430c35736b5f178c80f82f3d0bd852c47eec7b8ae6d41f9cea5c06bf879fc6abd25c67037d93d25fa1afc78879dd033f6ab69efbb80636e6c4126966 请输入微光提供的通行证：","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"Me","slug":"Me","permalink":"https://starcried.github.io/tags/Me/"}]},{"title":"新生……？","slug":"新生……？","date":"2023-10-09T14:01:00.000Z","updated":"2025-02-24T07:16:39.320Z","comments":true,"path":"2023/10/09/新生……？/","permalink":"https://starcried.github.io/2023/10/09/%E6%96%B0%E7%94%9F%E2%80%A6%E2%80%A6%EF%BC%9F/","excerpt":"","text":"2023.10.09 大概是国庆前一周的星期一，我去华山医院复诊，想去找z玩。然而他当天不在，回学校的路上冒犯了他。 也许是z的性格，他没有原谅我。这本来不是什么大事，但是我却无比在意。我自认为是因为他之前很照顾我，理所应当道歉。这种感觉持续了整个兽展，到今天。直到刚才，我可能对这种感觉的由来产生了怀疑。 我这种在意另一个人的看法的感觉，无比像之前的我。 从我认为之前的我已经死去时开始，我一直声称我目前爱的人只有我自己。既然如此，对于一个刚认识不久（实际上只有几面）的人，在确定对他没有其他感觉的情况下，我这种心情实际上算什么呢？ 这种希望取得他人认可或者谅解的心情，这种不适感，太熟悉了。如果把z换成任何一个另外对我好一点的人，我敢确定我会有相同的心情。 所以呢？我到底是想去的谁的认同？谁的原谅？我有我想象的那样，已经摈弃了之前的自己，获得了自信的、坚强的我的新生吗？ 看来过去的影子会一直笼罩着我。我不知道这是好是坏。至少我现在会很好地选择对象，倒也不是什么大问题。也许，我也不需要摆脱这影子。也许他会引导我做正确的事？ 无论怎样，我得先把这件事解决。 2023.10.27 停了一半的药（感觉确实有原因），借助 br 问了他一下，自然回答是没什么事。整个事情感觉就像是我莫须有地自作多情，然后骚扰他，然后自己结束。虽然我不知道他是怎么想的，并且他对我态度确实也没有很好，不管怎样我不能再想这件事了。 于是最近心情略乱，也没什么干劲。期中考结束，非常担心自己的成绩，感觉应该把更多的心思放到这里来。我心里分明知道，此时我不应该在任何其他人身上浪费时间。值得我花费时间的只有我自己。 我现在有很多想法，并且准备去实行。如果一切进展顺利，那么这些琐事自然也会按我的意思来。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"异维A酸","slug":"异维A酸","date":"2023-09-08T16:07:00.000Z","updated":"2025-02-24T07:23:16.568Z","comments":true,"path":"2023/09/09/异维A酸/","permalink":"https://starcried.github.io/2023/09/09/%E5%BC%82%E7%BB%B4A%E9%85%B8/","excerpt":"本文含有隐私信息，访问请联系微光。","text":"cfa2926ad01c1ca5b72f4176a524df63a6480dc114ce32dfc272f15a7d0ad2dc5f6ced6c570bad1fbb87ac277ff00eace88c458dbd83a46509ebeda71642c6b04c40a0bb885d87a4562ea5536d954ef15e56009f9fa511e2a6171e07c2a3f4e6f80a23cf31a2dddf8f69b934baeb494bb73ceb2dbf580594e123dbdcf6c37117f1bc1b000f58ef3296c80b0471decb46b1379a18fd79f7522f2888855ca4ce646a78a160aaa63831b430da4ceb532749dc0714baca18880d9a01dfd942e56607d14c4d16c60f704070ac302cb5166c67ea5db4d6b8be74e8024759580d94d845b33649e7825d050e96a59a851d48970e9842d876c35109994e4c632fbbd4b3bd85920cc7e6463cab9e30e17b5345afb11f66fdf83f0b046f20e797e01b4c334465c569010bf57b6f6805d3b1f7f5f8a850bf865e931dfb77a82ca2b9a1dcb5014d8e02e80324bb499de31266881aca037dfad795a049b7ce1d873e84f22b1a5adaf23a7e2299c0ff5bb9120cd016a9aea444e5b41ad94bdc28b45bdb9755c75de71ec6b67d84e78f8366f46b8245f3f28e15e912475fb71165e55c1d3afbf870fbf26b69c0786236a47139abf82b539656ee819a6e5c2d0bb67c3ef0980ec4382edfbcd9ea3cc7bd266577161ae9bfe36f1e9a52c5dda1c691c9934164725bf8100430877abed7d9658e8e4ccf200a35efc5ad44b4d18a1950433cf508192e6550e0b93a313691665dbd7add94957c4372abf498c5fcf0bb60423276e1d98a2a3c6d9e530a8de40b9fcd67d8d49a664cc909e866480ddeae8a9889f6025e7f1ce7cff0f4a1ab46fd2332ddc70bfaf0a2b59b7cc0c7ab9e215508216714951320af58969b4fd01344ada67fe2e02c7a9fbf8e0899ea6f882ee422db8e5062df0cd41c769c5a57441f381de46241283b289741af63a14f3e0fb20d53c8fff6f0624347a1a04bebd9ba48dad7c4429216a4462d8fc43d8685a6f220d4bd291c6653266b6d4ad3bec5a56fc1f9ea24a3bf7de5b5043c3e20bf973f6ff990cc7247c17ba085b66049bf586177204eeb8502b2e0ef957c139b406233cdef304cb020721718863b2b87c353bbfb56554f0c1d0c9835ecf72d229083abf95ba78579e50b4aa29ff48fd8ea9070b58c2cf48afb12c4ed8134f095ceba64f6dd5039e23b693172ba5a92d64dde6cc776c5da30f3e892351ea9d7141632bef9625658251ff7db2ba03058b372c8f7b4d68f2318d13b1633558d159197848918534c490999375c532996ee2c8171e0918c1bee69d1429282d0f5b945a5a3217a787c08db11a23f44ab534fa596014c923fcb7e42f30db1eae08fdcd52b1902f7fa1a2e9296a50473c0fb80886f238473f644aa3293ab01d1e052ca2fbe3f5f373f9f203c1bc3f7d7ed442162eedd3dd9485acb43fad77fbdeff831cdd9b4a742f7f9855c297bf54ade0548814efe341434562aad32ddbc6e348c13686acf7ae2b315b09395169b8cb3b9a0a86dfd168605c93b12f1971250eda7b9341ce721fb8e06dac6f30d94fd604883efd3e67072f3746ab90c16228451a0e98870cc30eb0c3bb0014cf0a0619908bde2aad42be21a01a37a3965c211cad027fc92da02dad633b0c32c6d98c1ed24a5e77232ec774be41b48e393a9a60284c8dfe77a3fbad5ab41ada12b1c8df64f4ed815b50d3ec4c1a36b0b72ff96d42dfd7f590e15de2e1a4d2385201dd2b947552423014107c40c2d9e4259db9967447fc706f4f35c8d4d97d072016fe6c1b40ef2f741df85e64be69c420cf171b04b28acfe8ad86ed7bdafd405a629425e0d40d81d44300e8a102e8dbeecce81a4afb6e2a469a3d52d3b9a93a3375f06060a36280512521066e56a4e2271bdc546c1c138558c6edef9c0badaf7b4424130b2bc53919fa74a6a4fd60475085f99bd349c2f57ad288d06f2039db8eeb474ffa8f77a1e3691a6bd73680f4adc067c646cd48ab27663167d6e26f9f1744378750ba74a8a1ac173499249e33f291fbed7a1f9de41008b5f31ed53f944f51eadea2bf4884bd36c5c4e7b4f4ae7323a987318e7826b2d9613e0a38e6ac72ab6147379e6fed5d83c8008e2819667ddb4940b944bd271e90d258f71a207162218c00eba7e6eb7a97baecb43adb7560082601915b434fee31daab0cc10f4b106ef6a73c799f68efe859c01ae94b1b9d18d2198fc1750a6f8bccfaaa0c6358ea628ea5ca76581a1ef7f1be5a2c099a7a570b4091660795a7ea389a114b85afc591e63fc16c4e0b5db40267a554f714d4212db3f10624a7dfec2dd7c66efc9daa57feb149b36fe3aead51351078540614eedc3f6824d5ea8a91d0ad15fc1b27b3180d285ad0706b9498e4c8c5d5a988352498696d3c245df4b5f1521aa73e2168565b6053c7939569a158921ca7bbb5a863f2100070fc357529152e9c6a6298be74b4dfe7d56655eca04ba0fe4b0d91ee4a3c6502909133e3c6547192a76384be0bdd605398e0e49e72625a4d5b84c87f7f55ae099ce2854edcf0b21aeba9c5d9234dca213177bd60296a318d6237ae521903a51ee16c1f2de144e4312fa22a5f1128758bff9a004b568316d6ebdb7930a3ea03c05b91df9e0c4324a90ff258bef75a6c8604d51da3a1e052c3fef1e4ca99bbad61a826a302c913dac7f25a0222e02bd52bb56ea6918255f205ee1af7f1432e1ec820841495839a79064c288f13b4a6286a40db42d7cc3ea784de1104b9d 请输入微光提供的通行证：","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"Me","slug":"Me","permalink":"https://starcried.github.io/tags/Me/"}]},{"title":"家庭作业","slug":"家庭作业","date":"2023-05-29T09:07:00.000Z","updated":"2025-02-24T07:23:29.382Z","comments":true,"path":"2023/05/29/家庭作业/","permalink":"https://starcried.github.io/2023/05/29/%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A/","excerpt":"本文含有隐私信息，访问请联系微光。","text":" 请输入微光提供的通行证：","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"Me","slug":"Me","permalink":"https://starcried.github.io/tags/Me/"}]},{"title":"日记 2023-05-05","slug":"日记-2023-05-05","date":"2023-05-04T16:00:00.000Z","updated":"2025-02-24T07:22:00.878Z","comments":true,"path":"2023/05/05/日记-2023-05-05/","permalink":"https://starcried.github.io/2023/05/05/%E6%97%A5%E8%AE%B0-2023-05-05/","excerpt":"","text":"前一段时间迎来了微光的诞生，我的生日。人生第一次有朋友来庆祝我的生日，人生第一次骑行百里去看日出。虽然腿受伤了，但可以一起去健身房。感觉整个人都被治愈和感动了，现在（至少今天）做事好有劲。被关心的感觉真好。 再一次的，我喜欢上交，喜欢这里的人。 假期给了我足够的时间去调整和休息。倒是没有花费很多时间思考，但是无论在学校、去城里玩、骑车还是睡觉都是很放松很自由的状态，和亲友在一起可以很放纵不担心社交，不用紧绷神经担心和计划自己的每一天。甚至自己没事的时候会想去主动学些东西。说实话，这就是我想要的生活。是微光在过的生活。 总有那么些微光能够照亮我的生命。我更愿化为一点微光。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"伤","slug":"伤","date":"2023-04-26T15:40:00.000Z","updated":"2025-02-24T07:24:09.019Z","comments":true,"path":"2023/04/26/伤/","permalink":"https://starcried.github.io/2023/04/26/%E4%BC%A4/","excerpt":"","text":"膝盖有一处伤，大概是初中得的，竟然连是如何得的都已经记不清了。想来，大概是当时受到冲击。不过膝盖这种地方多多少少都会被碰一碰，何况我还小，碰的又不很疼，应该很快就会好的。 在高中不知何时，膝盖在桌子上又磕了一下，我感到针刺般的痛。摸一下，竟发现那个位置凹陷下去一块，像被粉碎了一般。我开始慌了，赶忙告诉父母。因为高中学业原因且此伤并无大碍，拖了很久才在我的坚持下顺便去骨科医院看了医生。 医生问我有什么症状，我说，没什么症状，只是受冲击和过度运动后会痛。然后我指了指我的膝盖说，就是这里，摸着像感觉碎了一块骨头一样。 医生没去摸，说，拍个CT看看，骨头没事就没大事。 掏了钱，去做了CT。骨头没事。医生说没事。家长说没事。我说，有事，你摸一下，感觉碎了而且会疼怎么会没事。 医生仿佛很不情愿的摸了，一下，然后说，骨头没事，其他软组织结缔组织什么的我们骨科医院也看不了，你要是不放心去别的地方看吧。 父母很开心，没事就好，骨头没事就没大事。我没有时间再去其他医院，无奈只得离开。 上了大学，不到一年的时间里，我多次花费大段的时间去骑车、滑雪、打羽毛球。在滑雪时，不可避免地会摔跤，膝盖高速磕在雪地上的痛感十分强烈。可我又不愿放弃滑雪的机会，于是在几天时间里，每天晚上用云南白药涂抹膝盖。即便如此，我仍感到我的膝盖逐渐连弯曲都会疼痛。这下我一定要再去检查一遍了。 于是最近去了医院。医生说，有什么问题。我回答，膝盖几年前受了伤，一直以来没什么影响，但是如果被碰到会疼。 医生说，哦，那你这次来看什么的。 我很疑惑。这难道不算伤吗？还是说只要不影响所谓“正常生活”的伤都不用看，非得等事情严重化了才配治疗？还是说，我去滑雪，去骑一百多公里车不算“正常生活”？ 医生说，那你去拍个CT吧。我说不，我拍过了，骨头没事。医生说，那就去做个核磁共振吧。 掏了钱，两周后做完了。脂肪点损伤及关节积液。医生说，没事，回去休息，少运动，保护好，消消炎就行。 我休息了多久？我难道要一直休息下去吗？…… 我有一处伤，很久以前得的，至于是怎么得的我已经记不清了。 他们说，这是小伤，没大事的。但是每次我被戳到痛处，那个地方还是会疼。 我把那个地方指给他们看，他们说这种伤无关紧要，甚至不愿意去触碰我，不愿意去了解我的伤。 我很害怕伤会扩大，于是不停地问。他们的无所谓失去了耐心，说，如果你戳到痛处会疼，那就不要被戳到痛处啊。 可是，我要去做自己想做的事啊。他们说，你不是怕疼吗，那就别做了呗，又不是活不了。 也许，并不是这么回事。只是我觉得这件事会有更好的解决办法，一种不需要我承担艰难抉择的办法。 有时候，我会希望他们注意到伤本身。有时候，伤本身似乎并不那么重要。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"日记 2023-04-26","slug":"日记-2023-04-26","date":"2023-04-25T16:00:00.000Z","updated":"2025-02-25T02:34:15.563Z","comments":true,"path":"2023/04/26/日记-2023-04-26/","permalink":"https://starcried.github.io/2023/04/26/%E6%97%A5%E8%AE%B0-2023-04-26/","excerpt":"","text":"总感觉状态很差，不知为何。明明有那么多值得高兴的事情，却一直不觉得庆幸，反而不断抱怨自己遇到的各种困难。对学习没有很高的兴趣。 说到底，我还是认为自己不是非常乐意学习。我多么希望自己能从数学和学业中得到乐趣和满足。也许这是一件好事，逐渐认清自己的兴趣位置，更能指导我过自己想要的人生。不过现在我只是纠结。 我在学很多东西。在学如何学数学，如何上大学，如何做好自己，如何去爱他人，如何平衡生活，如何处理情感和情绪。也许……也许我太急功近利了，太焦虑了，太迷茫了。我需要时间，并且需要在这些时间内先撑住。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"2022 ECfinal 赛后","slug":"2022 ECfinal 赛后","date":"2023-03-26T06:42:00.000Z","updated":"2024-08-13T02:32:21.460Z","comments":true,"path":"2023/03/26/2022 ECfinal 赛后/","permalink":"https://starcried.github.io/2023/03/26/2022%20ECfinal%20%E8%B5%9B%E5%90%8E/","excerpt":"","text":"情绪倾泻警告 3.26 1:30 他妈的…… 这种感觉，这种在决赛场上失利的感觉，THUPC，NOI，三年的 ECfinal，全部都是…… 他们在祝我成功，每次都是，但我每次都…… 整整一个下午一个晚上我都在阻止自己想这件事情。我把平板的电量从满格耗完去看从没看过的克苏鲁恐怖游戏，看到眼睛充血。我点了凉皮和肉夹馍，但是却难吃的要死。然而我竟然把它们都吃了！ 我不想去我队友的房间，不想去见他们。刚好也没拿充电线，明天的华为挑战赛也别他妈的去了。 已经到凌晨了……也许我去补补我那该死的没写完的作业会好受点。 我觉得我已经做得很好了……但是却总是不够好……明明有些题目、有些问题是可以解决的，只要再给我一些时间…… 我不想去埋怨队友，他们真的很棒，并且埋怨有害无利。我很清楚这点。可这样我就只能埋怨自己……为什么非得去埋怨呢？那为什么不能把事情做好呢？ 我不适合做队长，肯定不适合。我不知道明年我是否还要参加 ACM。上学期的驴日的成绩已经足够我警惕了。 可是我不想离开……我真的很喜欢和大家一起解决问题、一起赢得荣誉的感觉……然而我却不能承受失败的后果…… 是我做得不够好吗 是我还不够努力吗 是我的错吗 我还有改正的机会吗 我还能得到原谅吗 求求了 求求了 我好想和人诉衷肠。但是说话没法解决问题。 我好想放弃睡大觉。但是没人为我行为买单。 我好想得到认可。但是我总是一败再败。 没这本事却想名扬天下。没那富贵命却养了富贵病。永远达不到的要求，永远低不下的头，永远无法得到宁静的灵魂。我不想屈服，但我也不想永远无止境地跋涉。我想解脱，我想解脱，真的没有其他办法了吗 3.26 11:30 现在是第二天中午。又看了一早上的 不得不说，这种复古酒店的氛围太合适了。 今天就要离开。本来很正常的作息被搞得混沌。在这里毫无意义地浪费时间。哦，早上的比赛没有去。 我开始理解为什么有人喜欢恐怖游戏了。这种廉价的精神感官刺激可以逃避现实，欺骗自己的大脑假装自己在面对威胁生命的恐惧，可以忘掉现实中这些有的没的东西……","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"},{"name":"ACM","slug":"ACM","permalink":"https://starcried.github.io/tags/ACM/"}]},{"title":"微光","slug":"微光","date":"2023-02-14T15:59:00.000Z","updated":"2025-01-06T08:18:37.784Z","comments":true,"path":"2023/02/14/微光/","permalink":"https://starcried.github.io/2023/02/14/%E5%BE%AE%E5%85%89/","excerpt":"","text":"“微光”的来源 我很小的时候，总是喜欢一个人胡思乱想。 当夜幕渐渐地压下来之后，母亲会拉上窗帘，关掉卧室的大灯，然后打开只能模糊照亮大床的床前灯。灯光在母亲那边，被母亲坐起的身形挡住。此时她会去做一些用针线修补的事情，而我就贴在她身旁昏昏睡去。 可我并不总是很困的，但我又生性安静不会闹腾和打扰母亲，于是就在令人昏昏欲睡的微光下尝试入睡。闭眼时感受着被窝的温暖和身旁母亲的温暖，拉拉被子，和母亲贴近些；睁眼时试着看清没有光亮的熟悉又不熟悉的房间。没有照明的屋子比白天神秘得多，天花板是黑色的，吊灯只有浅浅的轮廓，微弱的灯光打在窗帘上显现出渐变的明暗效果，帘布上的花纹变得神秘莫测，显现出不同的图案。我会饶有兴味地看着这些图案，有时会渐渐地睡过去，有时睡不过去，就会在脑海中想一些奇异的事情。倒不会有窗帘上的花纹飘到我的梦中去，而是想一些虚无缥缈的事情，或者没有事情，单纯的想一些“虚无缥缈”，像在浩瀚的宇宙中自由地飘荡，无助的飘荡。 有时候飘荡的久了，我会感到控制不住的孤独和悲伤，然后流泪。我和母亲都还记得，有一天晚上我止不住地哭出了声，母亲见我没有任何预兆地哭了非常惊慌，忙问我哪里不舒服。我只说，我没事。 宇航员在宇宙中脱离了牵引，在太空里无助地飘荡。他能看见宇宙中发来的微光。在上学之后，我知道这些微光是从遥远的恒星传播了无数年来到眼中的。 这个距离，对我们来说是永远，是遥不可及。 可无论怎么想，微光仍源源不断地从遥远的星星来到眼中。 大概是我上高中的时候，有一次我过生日，父亲送了我一本书。那本书很有年头，我查了一下已经不再印了——杰克·伦敦的《热爱生命》。是一本他的小说集。里面有一篇《雪狼》（又译为《白牙》），讲述了美国阿拉斯加淘金时期的一只灰狼，作为纯种灰狼和猎犬的子代，从野蛮的雪原经历生命中一次次的机缘巧合和一次次的生存绝境，最终得到了属于自己的安宁的故事。我反反复复读那篇文章。在读的时候，我能感受到我就是雪狼它自己，面对生命中的种种磨难和痛苦不竭地寻找希望，在被伤害和驱逐后仍能够勇敢地信任生命中存在的爱。这首生命的赞歌深深地影响了我的人生观。 生命的意义是什么？在茫茫宇宙中，我们也许不值一提，但生命对于自己这个个体来说就是一切。生命也许没有意义，但若你坚信它有，并努力地寻找，也许本身就是一种意义。 就像在追逐宇宙中的微光。 上高中后学信息竞赛，要给自己想一个网名。思考良久毫无头绪，情不自禁地打下 Star_Cried 这两个词。星星在呼喊。星星的呼喊是什么呢？是燃烧自己的生命爆发出巨大的热和光亮，不远光年来到你的眼前，化为无尽黑色宇宙中的一小点微光。 设定 外貌 种族：北美灰狼； 配色：整体为北美灰狼黑灰白配色，眼睛下和胸口为白色，眼下左右各有点黄色。黑瞳带深蓝。 通常着衣，带兜帽的长袍（不一定戴）、披风或大衣，披风为左半边披风。 披风：星空带渐变。 衣服配色：类似披风，深蓝色。 装饰：不同世界观、不同时期，不同服饰、不同装饰。 世界观 可存在于任何世界观。在每种世界观中独立。 经历：一只普通的狼，有对世界美好的幻想和期望，在经历很长一段时间的漂泊、体验过人生百态之后变得些许麻木，但也因此有很多技能和经验。有过朋友和故事，寻找生命的意义。 性格：智慧，冷静，热心，幽默，理性思考，但是浪漫主义者。重视亲情和真挚的友情。讨厌麻烦、重复、枯燥，缺乏耐心。不喜欢承诺，因为会尽力去履行。有一套自己的行为准则。 喜好：神秘的蓝黑色；凉爽的天气；静谧的环境；甜味和咸味；音乐（乐器和演唱）；默契的朋友和完美的合作；喜欢涉猎各种技能。 讨厌：虚伪；政治；孤独；无力感；酸味、辣味","categories":[{"name":"创作","slug":"创作","permalink":"https://starcried.github.io/categories/%E5%88%9B%E4%BD%9C/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"微光","slug":"微光","permalink":"https://starcried.github.io/tags/%E5%BE%AE%E5%85%89/"}]},{"title":"在 Ubuntu 22.04 上部署 WordPress","slug":"在 Ubuntu 22.04 上部署 WordPress","date":"2022-12-27T05:40:00.000Z","updated":"2024-10-16T11:56:32.750Z","comments":true,"path":"2022/12/27/在 Ubuntu 22.04 上部署 WordPress/","permalink":"https://starcried.github.io/2022/12/27/%E5%9C%A8%20Ubuntu%2022.04%20%E4%B8%8A%E9%83%A8%E7%BD%B2%20WordPress/","excerpt":"","text":"很简单的事情被搞得很复杂，踩了很多坑……以及莫名其妙的错误。 本来碰壁了之后会一拖再拖。昨天新冠阳性难受了一整天，晚上退烧了，不想学数学就想搞搞这个，第二天早上就弄好了。果然这种东西需要的最重要的是耐心和时间。 教程 搞了好久才找到这篇博客重新搞了一遍。博主基本上是手把手教了，很新，而且有链接可以直接跳转引用的位置去看。用的是 Nginx, MySQL, php7.4, php-fpm。 按图索骥就好，下面是一些我碰到小细节问题。 配置 Nginx 的时候记得把域名和网站文件位置替换成自己的。 如果想把 WordPress 部署在根域名 example.com 而非子域名 example.com/wordpress，只需把文件内容直接放在 html 文件夹内即可。 普适教训 国外的信息比国内的新很多，最好还是去外面搜索信息吧。 论坛是很有价值的，大多数问题都可以在（国外）论坛被解决。实在找不到也可以发帖自己问。 不要错过任何一条信息，尤其是在用命令行的时候。 看教程的时候要注意各种版本。有时候最新版可能会不适配。 历程 第一次拖了好长时间是因为 mysql 无法登录，提示密码错误。但在网上搜到的所有教程都说刚装好的 mysql 是可以不用密码 root 登录的。想到可能是我之前瞎操作让系统帮我设了密码啥的没记下来，于是开始尝试重置密码。但是试了很多教程，要么是要找的配置文件压根不存在，要么是版本不同，搞下去越来越乱。 于是干脆重装了系统……不得不说，问题解决了。 另外，mysql 在不同系统上的操作以及文件名也不完全相同。我甚至专门去把 mysql 指令学习了一点。 然后大概就……没了。我也不知道我为什么花费了那么长时间。","categories":[{"name":"Web","slug":"Web","permalink":"https://starcried.github.io/categories/Web/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"blog","slug":"blog","permalink":"https://starcried.github.io/tags/blog/"}]},{"title":"日记 2022-12-22","slug":"日记-2022-12-22","date":"2022-12-21T16:00:00.000Z","updated":"2025-02-24T07:22:30.968Z","comments":true,"path":"2022/12/22/日记-2022-12-22/","permalink":"https://starcried.github.io/2022/12/22/%E6%97%A5%E8%AE%B0-2022-12-22/","excerpt":"","text":"学期快要结束了。自视半年以来，仿佛什么都没干似的。期望年后如果疫情政策能彻底放开，可能就有动力去干很多事情了。不过话说回来，数学本来就是在室内坐板凳的专业，封闭应该对我没有影响才对。 前几天看到一年前发表的说说。那天西工大附中晚上突然封校，半夜十二点全校走读生回学校拿书本。当时避之不及的病毒如今不得不与之共存。现在母亲也患上了。未免让人思考如此长时间的防疫是不是真的有必要。可是这和我又有什么关系呢？不防疫会改变任何事情吗？ 不知道自己要去寻求什么。从上海回来之后坐车环绕老区，越觉得这个我生活了数年的地方是如此之小，从汽车站到家门的距离不及学校周长的四分之一。在学校时常绕校园骑行，限制速度的只有遍地的减速带，而到了家里，限制速度的是这时感逼仄的空间。如此多人生活了如此久的地方，说到底也只是个小山沟罢了。随着我们这代人的离去，这里居住的人只会越来越少。对我来说，我想去更远更广的地方。 梦想总是很大的。但不是为我这种每天睡到中午起床、晚上打游戏的三更半夜的人准备的。总是期待着明天会更好，却不去付诸行动。知道自己错了却没有勇气去改变。好消息是，我变得不再在意别人的目光；坏消息是，我难以为自己而活。看来我只是丢掉了自卑，而并未变得自尊。我本觉得对不起的是家人，但现在真正对不起的是我自己才对。 想赢得别人的尊重首先要尊重自己。这事还真他娘的困难。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"日记 2022-11-18","slug":"日记-2022-11-18","date":"2022-11-17T16:00:00.000Z","updated":"2025-02-24T07:22:41.128Z","comments":true,"path":"2022/11/18/日记-2022-11-18/","permalink":"https://starcried.github.io/2022/11/18/%E6%97%A5%E8%AE%B0-2022-11-18/","excerpt":"","text":"成绩出来果然差的离谱。从小到大最低的成绩吧。如果放在以前，我估计会慌得要死然后奋力追赶，但现在我只感到慌乱却不想动。不过让我感到宽慰的是我们 ACM 队出线了。如今可以赶紧调整状态和心态到正常的学习生活了。要不然，就晚了。 感觉自己有心理问题，结果这个念头马上在和学长的聊天中消除了。果然还是缺少交流和宽慰。大多数心理问题都是这样。找个人说说话就能解决很多事——原来我仍然喜欢钻牛角尖，只不过现在是把自己牢牢地包裹住，然后对自己进行过量的批斗和贬低。但身边从来有温暖和美好，只要能主动去探寻。 聊天的时候总是执着地去否定自己，否定他人给出的建议，认为对方的建议和分析没有直击要害，没有告诉自己问题的答案。但实际上这种问题根本没有答案：自己要去寻求什么，自己的热情在哪里，没有人能回答。在他人身上寻找这种答案只会自讨无趣。但聊天的重点不在这里。我可以倾诉，可以分享，可以从别人解决问题的方法中学得东西，即使不适合自己也有借鉴意义。不管怎样，这是一种缓解问题的方式。真正要解决问题，还是得靠自己动起来。 睡了一下午。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"日记 2022-11-09","slug":"日记-2022-11-09","date":"2022-11-08T16:00:00.000Z","updated":"2025-02-24T07:22:36.697Z","comments":true,"path":"2022/11/09/日记-2022-11-09/","permalink":"https://starcried.github.io/2022/11/09/%E6%97%A5%E8%AE%B0-2022-11-09/","excerpt":"","text":"自觉现在是十分懈怠了。不好。但又不知如何是好。 习惯了翘课，但是翘了课又不知道干什么。不过至少没有了以前的那种紧迫感。不对，早都没了。 翘课是坏习惯。尤其是借着竞赛的名义翘课。 有很多事情想做，但又不是特别想做。没有动力。没有吸引力。没有兴趣。怎么年纪轻轻就萎了（不是） 每天晚上打好长时间游戏，打完又觉得空虚，觉得虚度光阴，却又不想上课。 想找一个每天都能让我鼓起干劲泡着的事情……或者……人。不会觉得无聊，又充实有所收获那种。 无枝可依。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"日记 2022-10-23","slug":"日记-2022-10-23","date":"2022-10-22T16:00:00.000Z","updated":"2025-02-24T07:22:49.381Z","comments":true,"path":"2022/10/23/日记-2022-10-23/","permalink":"https://starcried.github.io/2022/10/23/%E6%97%A5%E8%AE%B0-2022-10-23/","excerpt":"","text":"小时候，我经常在晚上莫名其妙地默默流泪，却不知何因。 刚才正在做自我人格分析，突然想到这件事。很奇怪，小时候我几乎每天晚上都会哭（不出声那种，经常吓到父母，但是我什么事都没有），却不知道原因。并不是我忘了原因，而是当时就不知道为什么，父母问我的时候我也不知道为什么，就是“难过”，那种没有缘由的感觉，像心痛，但是我的心脏没有问题。 突然很怀念那种感觉……这样看来，我现在每天都有点没心没肺。虽然那种悲伤根本……毫无意义，但是我觉得却比我现在做的所有事都更有意义、更令人怀念。 明明这一个多月以来经历了很多事情，有很多值得纪念的事，认识了很多有趣的人，但是能驱使我再一次动手写博客的，竟然是这种莫名其妙的想法。 也许我现在看起来心智健全，但可能我内心深处真的需要一点心理治疗。或者……让我能再体验到小时候的那种虚无的悲伤。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"The Truman Show","slug":"The Truman Show","date":"2022-10-02T13:52:00.000Z","updated":"2025-06-23T03:27:20.660Z","comments":true,"path":"2022/10/02/The Truman Show/","permalink":"https://starcried.github.io/2022/10/02/The%20Truman%20Show/","excerpt":"","text":"The Truman Show Is that the best you can do?You are gonna have to kill me!!!What will we do with the drunken sailor…(Drunken Sailor) 非常激励人心、有启发的一部电影。 我不知道如果我是楚门的话，我能否抛弃家庭、抛弃朋友、抛弃现有的一切去追逐自己的梦想。或者说，当我身边的所有人、所有事、整个世界都在否定我时，我是否还能够坚持自己那“不切实际”的执念。我不知道我是否有勇气和整个世界作对。 我觉得大部分人都有过像楚门一样的执念。可是相较于电影中比较明显的破绽，以及从上帝视角来看的结果，现实中我们的执念或许更加难以实现，或者是错的。比如说，我曾经猜想有没有可能我才是世界上真实存在的人，其他人都是为我服务的。即其他人“存在”是因为我和他有交集，在我观测之外的人根本不存在。这和《楚门的世界》的演出非常类似（如果我之后有幸能钻研唯心主义的话，也许能找到更系统的理论。至少我现在仍然认为这种观点是有价值的）。 但是即便我是对的，即便真的我是生活在虚构的空间中，这个空间的边界也可能没有电影中那样具体可触。假如这个“边界”是真实存在的，也许它在更高维的空间，也许你穷尽一生也没有办法到达它（这可比楚门遇到的“风浪”困难得多得多）。在这种情况下，可能“边界”对于我们而言存在与否都无关紧要了（可以说是错的了）。因此，我认为绝大部分人都无法到达他们的“执念”。我们也许尝试过，但无数次的失败总会将我们的想法否定——这就像是从小孩的异想天开转变为大人的现实老道（没人逃脱过这点）。我不禁思考，在电影中，楚门一直有被困住的想法是因为周边环境一直在阻挠他实现自己的目标，他从未真正地尝试过一次。如果剧组有能力让他误以为自己已经尝试过但仍然无法到达边界，他会不会真的放弃，或者接受自己精神有问题。 Seaboard Island，中译为“桃源岛”，代表着楚门的舒适圈。它就像一个世外桃源，就像导演所说的，待在里面完全可以度过你的一生。从出生到死亡。导演有句话没说错：在外面的世界，你会遇到比在这里更多的谎言和困难。但楚门仍毅然选择了踏入从未涉足的黑暗。或许，生命从来不害怕迎接挑战，生命只会害怕平庸和一成不变（算是另一种死去吧）。至少在楚门身上，在少年的心还未燃尽的人身上，是这样的。 After all, it’s a “Truman show”. 我们每个人都有自己的世界，都有自己的“桃源岛”。但并不是每个人都能克服心理障碍向远不可及的天际义无反顾地前进。 当然，我也在电影中得到一些非主线的感受。 电影中时常穿插一些观看节目的观众的画面。我们这些观众的观众，看着可能会觉得他们仿佛很关心楚门的一举一动，甚至为他欢呼喝彩。但在电影最后楚门走进那扇门，意味着节目的结束时，两位刚才在为楚门的成功泪流满面的警察紧接着讨论“接下来看什么其他节目”。楚门经历的一切对他们而言只是一个节目而已。这也许是在警示看电影的我们——当你看完楚门所经历的一切之后，你会怎么做？很大的可能是，什么都不会改变。我想到一种家庭妇女，在家里看那些大城市的商人或者富有家庭的电视剧，乐此不疲地欣赏这那些与自己毫无关系的脱离群众的商业产物，随着 BGM 的渲染或者一两句大声的台词为那些不属于她的故事哭得稀里哗啦，然后继续做自己的事。 楚门出去之后的故事也令人遐想。他将抛弃自己从小到大所经历的一切。他将重新接受他的身世。他能够到达芝加哥。但是，他会遇到新的边境。他永远会的。 还有一些，不再细说。 影片中有一些非常经典的镜头。比如楚门触摸着边界，缓缓走向通往 exit 的台阶。有趣的镜头有，所有人手牵着手地毯式搜索楚门；太阳突然出来后所有演员归位一动不动。 镜头运用和艺术处理也非常有趣。影片前半部分在卖关子，我们和楚门一样用局限的视角观察，和楚门一样感到怀疑。有一些有边框的摄像机镜头和场外观众的镜头在不断暗示。在与父亲重逢后，我们恍然大悟，用观众的视角观察楚门的一举一动。但我觉得我们存在第三个身份：观众的观众，也就是我们自己。影片的开头，导演在向观众讲话，我以为是在给我们讲，但实际上是在给楚门节目的观众讲话，但只有我们在恍然大悟后回过头来看才能明白这一点。以及最后看观众们的反应，目的也是留给我们自己的反思。 其他地方我也不太会分析。总之，这是一部经典的电影，而它的经典是有原因的。 Oh, and in case I don’t see you…Good afternoon, good evening, and good night. 顺带一提，Drunken Sailor 是我在玩 Assassin’s Creed: Black Flag 时很喜欢的一首船歌。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"点评","slug":"点评","permalink":"https://starcried.github.io/tags/%E7%82%B9%E8%AF%84/"}]},{"title":"I ❤ SJTU","slug":"I ❤ SJTU","date":"2022-09-06T15:02:00.000Z","updated":"2025-02-24T07:25:19.698Z","comments":true,"path":"2022/09/06/I ❤ SJTU/","permalink":"https://starcried.github.io/2022/09/06/I%20%E2%9D%A4%20SJTU/","excerpt":"","text":"最近更新：2023.3.26 本来想将上大学以来的日记都写在这里，然而还是有些难以启齿的事情，需得分开来发布才可以加密。因此，有内容完全相同的博客文章独立发布，并且自以上日期之后日记不在这里更新。 这里仅做留档。连起来看一遍还挺有意思的。 I ❤ SJTU 这个家伙愉快地踏入了上海交通大学的大门。 他将在上海交通大学闵行校区度过他的若干年大学生活。 让我们看看他会变成什么样子。 这里会记录日常，也会记录他可能有（回忆）价值的思考碎片。 2022.9.6 军训已经几周了。如果算上之前 ACM 队训练的一个月，时间也许更长。 上海交通大学，全国最大的校区，我即将在这里度过四年或更长的时间。虽然我已经在这的一会相对来说只是很短的一部分，但是却有开启我成年人生的重大意义。 学校课程还未确定，但真正的课早已开始。军训开幕当晚我请教母亲针线活，参加军乐团，训练和报名 ACM，打听消息、咨询学长自行车的事宜，并且从家里借了第一笔钱。我很幸运这里基本上都是非常善良耐心又高水平的老师和同学。在大学，你可以轻易找到专业特长的学长或者老师进行帮忙。而这就是中学以前所没有的全新资源：人脉。伴随着这项资源的，是对交际能力的需求。是时候增长这方面的能力了。 从高中过渡到大学得十分顺坦。也许这和我初中离家高中住宿加疫情封校、高中就开始竞赛生活、高考之后没有查成绩志愿随便报、提前到校学习等有关。所以我并没有有什么不适应，也没有体验到很多同学所经历的非常强烈的“思乡之情”。相反，倒是父母经常打电话来抱怨我不和他们联系。几乎到了那种除了要生活费就失踪了的状态。也许之后这种心情就会愈发显现。不过就现在看来，很快适应自己生活也许是件好事。 高考好像离我很远了。开学之后我就很反感讨论高考的事情。不过似乎在上交的也没几个很乐于讨论这件事的。所谓英雄不问出处，我们很幸运迎来了一次重新出发的机会。上交的资源也是极好的。生活学习条件也很好（物价也许有些许贵）。非常期待之后的课业学习。 感觉上大学之后，能推动自己学习的最大动力来源就是自己。没有人规定你什么时间必须坐在哪里学习，甚至真的翘课没有人管了。学习也是自主学习和交流为主，这和我竞赛阶段倒是有些类似，因此我应该可以较为快速的接受这样的学习模式。还有就是奖学金吧，真的很想不给家里添负担，顺便能自己支配钱款去做自己想做的事。 真的是，每次都感觉自己有一大堆心得体会，但确实去写的时候又发现是如此之少。我还没有什么成就呢，没有什么可记录的。 说起成就……差点忘了一件最重要的事。一定要尽快搞清楚自己的目标何在。 想起来之前被拒绝之后一直想吐槽的一句话： &gt; I'm Shanghaied by THU. 当时就是非常的愤愤不平。现在看来倒觉得那时十分有趣。也许我能为 Shanghai 这个词赋予一个新的含义呢？ Hello, SJTU! Hello, Shanghai! 2022.10.23 小时候，我经常在晚上莫名其妙地默默流泪，却不知何因。 刚才正在做自我人格分析，突然想到这件事。很奇怪，小时候我几乎每天晚上都会哭（不出声那种，经常吓到父母，但是我什么事都没有），却不知道原因。并不是我忘了原因，而是当时就不知道为什么，父母问我的时候我也不知道为什么，就是“难过”，那种没有缘由的感觉，像心痛，但是我的心脏没有问题。 突然很怀念那种感觉……这样看来，我现在每天都有点没心没肺。虽然那种悲伤根本……毫无意义，但是我觉得却比我现在做的所有事都更有意义、更令人怀念。 明明这一个多月以来经历了很多事情，有很多值得纪念的事，认识了很多有趣的人，但是能驱使我再一次动手写博客的，竟然是这种莫名其妙的想法。 也许我现在看起来心智健全，但可能我内心深处真的需要一点心理治疗。或者……让我能再体验到小时候的那种虚无的悲伤。 2022.11.9 自觉现在是十分懈怠了。不好。但又不知如何是好。 习惯了翘课，但是翘了课又不知道干什么。不过至少没有了以前的那种紧迫感。不对，早都没了。 翘课是坏习惯。尤其是借着竞赛的名义翘课。 有很多事情想做，但又不是特别想做。没有动力。没有吸引力。没有兴趣。怎么年纪轻轻就萎了（不是） 每天晚上打好长时间游戏，打完又觉得空虚，觉得虚度光阴，却又不想上课。 想找一个每天都能让我鼓起干劲泡着的事情……或者……人。不会觉得无聊，又充实有所收获那种。 无枝可依。 2022.11.18 成绩出来果然差的离谱。从小到大最低的成绩吧。如果放在以前，我估计会慌得要死然后奋力追赶，但现在我只感到慌乱却不想动。不过让我感到宽慰的是我们 ACM 队出线了。如今可以赶紧调整状态和心态到正常的学习生活了。要不然，就晚了。 感觉自己有心理问题，结果这个念头马上在和学长的聊天中消除了。果然还是缺少交流和宽慰。大多数心理问题都是这样。找个人说说话就能解决很多事——原来我仍然喜欢钻牛角尖，只不过现在是把自己牢牢地包裹住，然后对自己进行过量的批斗和贬低。但身边从来有温暖和美好，只要能主动去探寻。 聊天的时候总是执着地去否定自己，否定他人给出的建议，认为对方的建议和分析没有直击要害，没有告诉自己问题的答案。但实际上这种问题根本没有答案：自己要去寻求什么，自己的热情在哪里，没有人能回答。在他人身上寻找这种答案只会自讨无趣。但聊天的重点不在这里。我可以倾诉，可以分享，可以从别人解决问题的方法中学得东西，即使不适合自己也有借鉴意义。不管怎样，这是一种缓解问题的方式。真正要解决问题，还是得靠自己动起来。 睡了一下午。 2022.12.22 学期快要结束了。自视半年以来，仿佛什么都没干似的。期望年后如果疫情政策能彻底放开，可能就有动力去干很多事情了。不过话说回来，数学本来就是在室内坐板凳的专业，封闭应该对我没有影响才对。 前几天看到一年前发表的说说。那天西工大附中晚上突然封校，半夜十二点全校走读生回学校拿书本。当时避之不及的病毒如今不得不与之共存。现在母亲也患上了。未免让人思考如此长时间的防疫是不是真的有必要。可是这和我又有什么关系呢？不防疫会改变任何事情吗？ 不知道自己要去寻求什么。从上海回来之后坐车环绕老区，越觉得这个我生活了数年的地方是如此之小，从汽车站到家门的距离不及学校周长的四分之一。在学校时常绕校园骑行，限制速度的只有遍地的减速带，而到了家里，限制速度的是这时感逼仄的空间。如此多人生活了如此久的地方，说到底也只是个小山沟罢了。随着我们这代人的离去，这里居住的人只会越来越少。对我来说，我想去更远更广的地方。 梦想总是很大的。但不是为我这种每天睡到中午起床、晚上打游戏的三更半夜的人准备的。总是期待着明天会更好，却不去付诸行动。知道自己错了却没有勇气去改变。好消息是，我变得不再在意别人的目光；坏消息是，我难以为自己而活。看来我只是丢掉了自卑，而并未变得自尊。我本觉得对不起的是家人，但现在真正对不起的是我自己才对。 想赢得别人的尊重首先要尊重自己。这事还真他娘的困难。 2023.1.2 前几天得了新冠不知道什么毒株，第一天发烧在床上躺了一天，第二条严重鼻塞，第三天失去嗅觉和味觉，直到今天才基本恢复。 失去味觉和嗅觉体验很奇妙。能像吃橙子一样吃柠檬直到牙齿发酸，喝骨汤能尝到油脂的感觉却没有肉的味道。没有感知地就尝不出任何东西了，却感觉非常平静，仿佛身体什么都不知道似的。实际上这次新冠我的主观感觉也就只是大号感冒而已，但实际上身体内部发生了什么变化我自己也不知道。如果哪天我真的永远也尝不出味，我可能也不会有什么太大的感觉，甚至回忆不出之前能有过的味觉刺激。如果哪一天我得了老年痴呆，我自己应该压根不会意识到，也不会为我自己感到悲哀。我作为一个高级神经中枢能掌握的事情实在太少了，甚至无法掌握自己的身体。 希望这次得病的效果（指抗性）能持续一段时间。如果一切都能回到三年前的正轨的话，我可能就能体验到真正完整的大学生活了。 2023.3.16 昨天是母亲的生日。一定要记住。记住关于你爱的人的事情是很必要的。 好久没有更新博客了，主要原因是上学期数分挂了。很显然，上学期并没有“很快回到正常的学习生活”。之前与一位同乡学姐闲聊，她让我不要像她一样太一心卷学业。挂科后我只觉得可笑，没想到我有的是完全相反的问题。从结果上看，还是我的这种问题更严重些。这学期一来，才知道强基计划对于不及格的学生只有一次宽容的机会（我已经用掉了），意味着以后四年内我如果再有一门科目不及格就必须退出强基计划。于是尽可能推掉其他活动，有时间都泡在图书馆内复习，没什么娱乐（但仍然参加了 MCM 和 ACM 训练）。 由于我可悲的自尊心作祟，我没把这件事写在博客上，直到现在补考过了。希望我能记住这次的教训：只要在学校，永远是学业第一。如果想像比尔盖茨或者乔布斯那样的话，最好先辍学。不过话说回来，一有时间就去图书馆的做法挺好的。钱老就喜欢泡图书馆。虽然我不去看书，但和大家一起学习总是很有动力，何况上交的图书馆离得又近设施又好。 前几天水灯节，下一周又有百团大战，菁菁堂也开始放电影了。水灯节那天的人潮我真是数年未见，十分感动。我们很幸运能体验疫情结束的大学生活，之后也会有越来越多的活动和机遇的。 （所以我为什么给自己买了个显示屏） 补考完感觉又有些松懈了，仅这一周就骑了两百余里的车，给学习的时间又少了点。明天晚上去图书馆静心学习。 补考之前非常焦虑，感到自己犯了难以挽回的错误。事实上也是无法挽回，但人生就是如此，每一次抉择，每一个分数。好的是学校给了我第二次机会。焦虑时问了同 ACM 队的学长，问了 yyu，问了班主任，问了导师，他们给我的建议都是：有能力，没问题，就是没上心，都觉得我很有希望，并且建议我减少花在娱乐和社团的时间。看来我的能力没法两把都抓。必须得舍弃些什么了。比如昨天就推掉了不太感兴趣的数学 prp 科研项目。这是好事。 很多事很麻烦，很糟糕，很渺茫。但是学校的朋友都很热情，并且都是和我一样的人。我们面对着相同的事，相同的前景。我喜欢上交，以及这里的人。 2023.4.26 总感觉状态很差，不知为何。明明有那么多值得高兴的事情，却一直不觉得庆幸，反而不断抱怨自己遇到的各种困难。对学习没有很高的兴趣。 说到底，我还是认为自己不是非常乐意学习。我多么希望自己能从数学和学业中得到乐趣和满足。也许这是一件好事，逐渐认清自己的兴趣位置，更能指导我过自己想要的人生。不过现在我只是纠结。 我在学很多东西。在学如何学数学，如何上大学，如何做好自己，如何去爱他人，如何平衡生活，如何处理情感和情绪。也许……也许我太急功近利了，太焦虑了，太迷茫了。我需要时间，并且需要在这些时间内先撑住。 2023.5.5 前一段时间迎来了微光的诞生，我的生日。人生第一次有朋友来庆祝我的生日，人生第一次骑行百里去看日出。虽然腿受伤了，但可以一起去健身房。感觉整个人都被治愈和感动了，现在（至少今天）做事好有劲。被关心的感觉真好。 再一次的，我喜欢上交，喜欢这里的人。 假期给了我足够的时间去调整和休息。倒是没有花费很多时间思考，但是无论在学校、去城里玩、骑车还是睡觉都是很放松很自由的状态，和亲友在一起可以很放纵不担心社交，不用紧绷神经担心和计划自己的每一天。甚至自己没事的时候会想去主动学些东西。说实话，这就是我想要的生活。是微光在过的生活。 总有那么些微光能够照亮我的生命。我更愿化为一点微光。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"日记 2022-09-06","slug":"日记-2022-09-06","date":"2022-09-06T15:02:00.000Z","updated":"2025-02-24T07:22:25.799Z","comments":true,"path":"2022/09/06/日记-2022-09-06/","permalink":"https://starcried.github.io/2022/09/06/%E6%97%A5%E8%AE%B0-2022-09-06/","excerpt":"","text":"军训已经几周了。如果算上之前 ACM 队训练的一个月，时间也许更长。 上海交通大学，全国最大的校区，我即将在这里度过四年或更长的时间。虽然我已经在这的一会相对来说只是很短的一部分，但是却有开启我成年人生的重大意义。 学校课程还未确定，但真正的课早已开始。军训开幕当晚我请教母亲针线活，参加军乐团，训练和报名 ACM，打听消息、咨询学长自行车的事宜，并且从家里借了第一笔钱。我很幸运这里基本上都是非常善良耐心又高水平的老师和同学。在大学，你可以轻易找到专业特长的学长或者老师进行帮忙。而这就是中学以前所没有的全新资源：人脉。伴随着这项资源的，是对交际能力的需求。是时候增长这方面的能力了。 从高中过渡到大学得十分顺坦。也许这和我初中离家高中住宿加疫情封校、高中就开始竞赛生活、高考之后没有查成绩志愿随便报、提前到校学习等有关。所以我并没有有什么不适应，也没有体验到很多同学所经历的非常强烈的“思乡之情”。相反，倒是父母经常打电话来抱怨我不和他们联系。几乎到了那种除了要生活费就失踪了的状态。也许之后这种心情就会愈发显现。不过就现在看来，很快适应自己生活也许是件好事。 高考好像离我很远了。开学之后我就很反感讨论高考的事情。不过似乎在上交的也没几个很乐于讨论这件事的。所谓英雄不问出处，我们很幸运迎来了一次重新出发的机会。上交的资源也是极好的。生活学习条件也很好（物价也许有些许贵）。非常期待之后的课业学习。 感觉上大学之后，能推动自己学习的最大动力来源就是自己。没有人规定你什么时间必须坐在哪里学习，甚至真的翘课没有人管了。学习也是自主学习和交流为主，这和我竞赛阶段倒是有些类似，因此我应该可以较为快速的接受这样的学习模式。还有就是奖学金吧，真的很想不给家里添负担，顺便能自己支配钱款去做自己想做的事。 真的是，每次都感觉自己有一大堆心得体会，但确实去写的时候又发现是如此之少。我还没有什么成就呢，没有什么可记录的。 说起成就……差点忘了一件最重要的事。一定要尽快搞清楚自己的目标何在。 想起来之前被拒绝之后一直想吐槽的一句话： &gt; I'm Shanghaied by THU. 当时就是非常的愤愤不平。现在看来倒觉得那时十分有趣。也许我能为 Shanghai 这个词赋予一个新的含义呢？ Hello, SJTU! Hello, Shanghai!","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"结束了？结束了。","slug":"结束了？结束了。","date":"2022-07-06T12:56:00.000Z","updated":"2025-02-24T07:19:21.008Z","comments":true,"path":"2022/07/06/结束了？结束了。/","permalink":"https://starcried.github.io/2022/07/06/%E7%BB%93%E6%9D%9F%E4%BA%86%EF%BC%9F%E7%BB%93%E6%9D%9F%E4%BA%86%E3%80%82/","excerpt":"","text":"2022.7.6 昨天是清北强基计划出结果的日子。班里许多同学都考上了清北。至于我，早已被上海交通大学数学与应用数学系录取。 我不知道心里面是什么滋味。在班里能前往我心心念念学校的同学中，没有我的名字。 或许有人会说，行了吧，上交还不够吗？相当于上海的清北嘛，虽然总排名差了一点。或许我的家长会说，不错了，现在你是家里学历最高的人了。上交对于你来说不一定比清北差。诚然。在我此前的无数篇碎碎念中已经说过，我不适合清北。诚然。去上海和去北京有着截然不同的命运。到时候我会认识完全不同的人，经历完全不同的事，谁又说这种可能不会比去北京的可能更好呢？ 可是，可是，在给亲戚朋友说我要去哪的时候，我总是心里不舒坦。“上交”的名字总没有“清北”的响亮。这种感觉，就好像别人买走了你最爱的玩具，别人实现了你梦寐以求的梦想。尤其是，我之前立了那么多的 flag，到最后没能实现。心里空落落的。这种事的原因，也许是因为长久以来别人的耳濡目染，也许是我对自己的心理暗示，也许是我的学途之前走得太一帆风顺了。无论怎样，最痛苦的事不是你无法实现你的梦想，而是你能够一窥梦想殿堂的景色，甚至拥有进入其中的可能，却在踏入大门的最后一刻，踩了个空。 然而，路还得走。为已经发生的事情难过不能解决任何问题。况且，上交很不错不是吗，我又不是全盘皆输，只是跌到了之前已为自己找的退路上罢了。虽然如此，克服这种心理估计还得好一阵子。 我是一个极其自负、自满、叛逆又懒惰的人，万幸的是还有一点点学习的天赋。凭借这点天赋和我的自负，我从小县城一路爬上西安最好的高中，并且在高中参加竞赛，停课一年拿到信息学竞赛银奖。但是在清华学科营和高考中失利，最后考入上海交通大学。 许多老师都警告过我：像我这样的人，早晚是要耐挫的。我已经在我成人的那天感受到了。 性格决定命运，我知道，这只是我将来会耐的无数挫中的有显著影响的第一个。如果这第一个我都撑不过去，那么我将没有未来可言。 我的高考分数只有 646 分。这远远跌出了我的预期（因为我考完没有估分）。因此我们开始担心上交的强基是否通过。强基录取结果在高考出分后一拖再拖，直到拖过了一本志愿填报的 Deadline。于是，不可避免的，我得面对填报志愿这件事。 但事实上，我没有勇气去面对。当我在设备上查询我的分数能被什么学校录取时，我发现我的分数连华科大计算机系、浙江大学、甚至南京大学都上不了（而这些是我之前瞧不上的学校）。于是乎，我开始躺在床上摆烂，脑袋空空。父母急匆匆地问我想去什么学校，我却什么都不回答，一心只想着上交的结果出来把我带走。对我这么自负的人来说，我实在是无法接受比上交更糟糕的结果了。而这些结果从我父母的嘴中传出盘绕在我的耳边：哈工大深圳校区，南开大学，西安交通大学……还有一堆我听都没听过的大学。我觉得我神志不清，根本没有心思去想如果我连上交都走不成，该怎么办。我之前的说法一直是“如果走不了上交我就不上学了”，意思是，如果我真的到了这种地步，我大概就会在大学摆烂，那么我去哪个大学也就无所谓了。 我没有勇气去面对完全的失败。 这是一种懦夫的行为，我知道。但是我一向都这么脆弱不是吗？我什么时候表现出，面对挫折能顽强地挺过去？一直以来，我的自负自满，都有我的实力做支撑，最后也都很幸运没有酿下恶果。但是，面对真正的挫折，完全的失败，我完全束手无策，无法接受。我的心理承受能力在这种事面前展现地十分脆弱。也许我平时表现得很理性，比如舍弃什么应该去干什么，但是那都是属于在可接受范围内的利益最大化的决策。上大学没有这样的决策。上大学是一刀切。学校，专业，两个名字便是所有。 所以，到志愿最终提交的时候，我甚至没有去看一眼——全部都是我父母填的。我多次焦灼地给上交招生办打电话，得到的回复总是“希望很大”。于是，我抱着这很大的希望，幸运地等到了我想要的结果。 然后在清北强基结果发布的时候欲求不满 估计以后还要耐挫。 高中生活对我来说过得真是好快。我难以想象，不到一百天前，我还在教室坐着刷理综题。三年以前，我第一次自信地踏进这个学校，对未来满怀憧憬。 高一的时候，听说有竞赛。当时的文化课成绩比较稳定，但是不在顶尖水平，然后根据之前的经验觉得自己裸考上不了清北，就来信息学竞赛碰碰运气。一开始学竞赛真的是煎熬，因为它不像文化课有老师带着你走进门，真的就是直接上来就给你讲东西，语言和基础知识全靠自学。反正我当时听得一头雾水。而且因为是少数住宿的竞赛生之一，没有晚上练习的条件，所以基本上什么都不知道，模拟赛全在乱搞。教练让刷的题根本不可能完成。于是，我多次在晚上躲在阳台里哭，给父母打电话，颤抖着诉说我的痛苦：文化课学不上去，竞赛也搞不好。甚至多次教练也在劝我退出竞赛。 高一期末之后，我跟着 fgf 选择了停课训练。当时的情况是，教练劝我别冲动，家长为我的文化课担心，我知道自己什么都不会，却对而不明真相的班主任说自己成绩还行，使他支持我停课。现在看来，当时属实是孤注一掷，我的赌徒心理也展露无遗（但是我却没有坦然接受失败的勇气）。与其说是心理，不如说是我的性格，那种不服输的性格、叛逆的性格、自负的性格、不顾一切的性格。而且，计算机是我喜爱的东西。我很幸运，我的父母最终选择了尊重我的意见，允许我去做我自己喜欢的事。这样看来，我也是遗传了我父母浪漫的优点呢。 至于竞赛时的具体细节，我的其他博客已经记录地很详细了。总而言之就是，我并没有拼尽全力。 高三回到学校开始学习文化课，也是一段非同凡响极度叛逆的经历。我凭借着自己的银牌成绩，无视学校制度，几乎每天早上和中午都迟到。晚自习翘掉的时间多于我上的时间（我没有翘晚自习去外面，只是回宿舍睡大觉。因此我高三甚至拥有我初中都不曾拥有的十多个小时的优质睡眠）。作业没写的部分远超我写的部分。如果下午放学之前是连着的语文课、英语课或者自习课，我就会直接回宿舍翘掉下午的课。这种事在西安最好的高中里，实在是不常见。我敢说以前的古人和后面的来者肯定没有几个（当然是要考到和我一样的成绩的）。甚至在疫情期间坐在班里上网课，我曾把手机带到教室使用（最后因为经验和技术不够被逮住了，虽然也没有惩罚我）。老师布置的作业总是做不完，而我又不屑于去抄作业，于是便每次上课站着就是了。总之就是，在义务教育的最后阶段好好体验了一把放荡不羁的青春。至于这样做的结果，现在已经知道了。不过至少到现在，我还没后悔。 当然，我回宿舍并不总是睡大觉。在早期，我突然想练吉他。于是我在高三完成了吉他的入门，基本可以完成 C大调 的和弦，可以弹一些简单的曲子。加上我唱的歌也不算难听，最终可以完成简单的唱奏，在晚上宿舍聚会的时候来上几曲。在中期，我又捡起来我许久未动的小提琴。小提琴声音的穿透力特别强，我很庆幸我的水平没有差到让宿舍同志们厌恶的地步，甚至偶尔会有几个人进来看是谁在演奏（不是因为太难听）。经过舍友的推荐，我在手机上搜到《告白之夜》的谱子并联系到能接受的地步。没有小提琴架，我便把手机架到上铺的床上，看着小得可怜的谱子练习。加上我初中自己练习的一小段林赛的《千本樱》，在宿舍整个活还是可以的。到了后期，同学们都开始使劲卷了，为了不打扰他们，加上强基被清华拒绝没了动力，便大多数时间躺在宿舍的床上睡觉。偶尔会和其他一起摆烂的同志玩几盘三国杀。直到最后。 值得一提的是，虽然我违反了规定带了手机，但我在学校的时候没有在手机上下过任何游戏，只是用来聊天（虽然也非常耗时间）、通讯、疫情期间扫码和搜索（比如小提琴谱）。即便如此，我觉得我还是没法控制好我自己。聊天真的伤神伤心。 致我放荡不羁的青春。 感觉高考后突然忘记了许多事情。或许是因为精神突然放松罢。忘记的不只是知识，还有过往的经历。 高考前想在这个假期做很多事情。不知道是不是因为上文提到的情绪的原因，现在没有什么兴致。 我现在脑子里想的只有一件事：骑车骑到上海。最近已经成功让母亲同意买一辆自行车了，虽然代价是答应她不做长途骑行。当然，为了我的梦想，我会毫不犹豫地在自行车到手之后撕毁这个协约。我知道母亲是担心我的安全，但是我更担心我能否完成的梦想。在经历过落榜清华之后，我不会想再让我的另一个执念妥协。即使代价是对母亲食言。即使代价是承担长途骑行的风险。 我相信我是那种为了梦想宁可放弃一切的人。 那么，一切都结束了，我的少年时光。 我将以全新的面貌去迎接新的挑战。我必须不断地走出我的舒适区。我必须抗击许多压力。我必须学会决策。我必须提高效率。 我必须为我向往的生活奉献生命。 2022.7.29 已经在上交待了好几天了，认识了很多新同学，和舍友也处得来。 突然在空间看到一个平时并不很突出的同学考上了清华，比较惊讶。又看到平时考得很好、老师很赏识的同学的说说，不知道他去了哪，于是仔细研究了一下前几天做出来的班级蹭饭图。 中国地图上布满了那些熟悉无比的名字。有一些名字出乎意料地出现在了清北，有一些应该在北京的名字却不在那里。有许多学生在高考中出色发挥，而有同样多的一些发挥失常，与梦想失之交臂。 看着这张图，我不知道心里是什么滋味。曾经的同学天各一方是一回事，但更多的可能是为那些被一次考试失利打倒的同学鸣不平。就像我当时在清华学科营一样。仅一次考试，便被分配在另一个城市，另一学校，多年，从此走上完全不同的人生道路。 不能说不公平。更多的可能是，命运。这就是命运。我能做的只有感慨命运。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"LA LA LAND","slug":"LA LA LAND","date":"2022-05-28T06:54:00.000Z","updated":"2025-06-23T03:26:23.194Z","comments":true,"path":"2022/05/28/LA LA LAND/","permalink":"https://starcried.github.io/2022/05/28/LA%20LA%20LAND/","excerpt":"","text":"City of starsAre you shining just for meCity of starsThere’s so much that I can’t seeWho knowsI felt from the first embrace I shared with youThat now our dreamsThey’ve finally come true 很久没有看过一部能让我流泪的电影。 从来没有看过一部歌舞剧和爱情电影。 但《爱乐之城》惊艳到了我。 电影里的配乐都十分动听悦耳，演员们的歌舞也美不胜收，更不用说出现数次的一镜到底将演员的实力体现的淋漓尽致。电影里光影和色彩的使用也赏心悦目，并且运用了多种艺术手法，让人感到在欣赏艺术而非观看录像。同时，故事也非常真实感动，没有某些文艺作品的矫揉造作，让我拥有共情。人物形象塑造和感情表达淋漓尽致。基本上完全对我胃口。 虽然自己没有过，但是我能感受到电影里感受到的真真切切的爱。那种知音相遇和双向奔赴的美妙甜蜜。那种在爱情和梦想与现实间的徘徊和冲击。那种对彼此和人生的浪漫。 我想做一个浪漫的人。 爱是能看到你成就自己喜欢的事时，自己也感到欣慰。 爱从来不意味着永恒。爱有春夏秋冬。 -Do you wanna stay for another?-No, we should go.","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"点评","slug":"点评","permalink":"https://starcried.github.io/tags/%E7%82%B9%E8%AF%84/"}]},{"title":"2-SAT问题","slug":"2-SAT问题","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:52:15.099Z","comments":true,"path":"2022/04/30/2-SAT问题/","permalink":"https://starcried.github.io/2022/04/30/2-SAT%E9%97%AE%E9%A2%98/","excerpt":"","text":"问题描述 SAT(satisfiabality) 是适应性的缩写，一般称 k 的适应性问题为 k-SAT。适应性问题指有 \\(n\\) 个布尔变量 \\(\\{x_i\\}\\)，加入一些限制然后求限制内的解的问题。 因为 \\(k&gt;2\\) 的 k-SAT 问题是 NP 完全问题（没有一定的算法和正解），我们只讨论 2-SAT 问题。 Tarjan 一般来讲，我们会想到把变量 \\(x_i\\) 的两种状态（比如选和不选，记为 \\(x_{i0},x_{i1}\\)）抽象成两个点，将限制条件转化为有向边，然后通过求强联通分量求解。连边 \\(a\\rightarrow b\\) 表示条件为满足 \\(a\\) 必须满足 \\(b\\)。 如果有条件 \\(a_0\\rightarrow b_0\\)，\\(b_0\\rightarrow a_1\\)，\\(a_1\\rightarrow b_1\\)，\\(b_1\\rightarrow a_0\\)，我们把它想成一个图进行连边，发现 \\(a_0\\) 和 \\(a_1\\) 在同一个强联通分量里。也就是说要符合条件必须同时选 \\(a_0,a_1\\)，即 \\(a\\) 变量同时选且不选，这显然是不可能的，所以本例无解。 那么我们就可以得到普遍解法，即求强联通分量：若存在一个元素的两种状态在同一个强联通分量里，此题无解；否则有解。 得到一个解的方法为：选一个未被确定的变量，可随便指定其为一个状态，将所有与之相连的变量状态确定，重复此过程直到所有变量都确定。 模版 P4782洛谷模板 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;stack&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=2e6+10;int n,m;int ecnt,dfn[maxn],low[maxn],head[maxn],to[maxn],nxt[maxn],cnt,_n,belong[maxn];vector&lt;int&gt; g[maxn];//inline void addedge(int from,int too)//&#123;// to[++ecnt]=too;nxt[ecnt]=head[from];head[from]=ecnt;// to[++ecnt]=from;nxt[ecnt]=head[too];head[too]=ecnt;//&#125;Wrong!stack &lt;int&gt; st;bool vis[maxn];void tarjan(int x)&#123; dfn[x]=low[x]=++cnt; st.push(x);vis[x]=1; for (int i=0;i&lt;g[x].size();i++) &#123; int u=g[x][i]; if(!dfn[u]) &#123; tarjan(u); low[x]=min(low[x],low[u]); &#125;else if(vis[u]) low[x]=min(low[x],dfn[u]); &#125; if(low[x]==dfn[x]) &#123; ++_n; do&#123; belong[x]=_n; x=st.top();st.pop(); vis[x]=0; &#125;while(dfn[x]!=low[x]); &#125;&#125;int main()&#123; n=read(),m=read(); for(int x,y,x1,y1,i=1;i&lt;=m;i++) &#123; x=read(),x1=read(),y=read(),y1=read();// addedge(x+n*(x1&amp;1),y+n*(y1^1));addedge(y+n*(y1&amp;1),x+n*(x1^1)); g[x+n*x1].push_back(y+n*(y1^1)); g[y+n*y1].push_back(x+n*(x1^1)); &#125; for(int i=1;i&lt;=(n&lt;&lt;1);i++) if(!dfn[i])tarjan(i); for(int i=1;i&lt;=n;i++) if(belong[i]==belong[i+n])&#123; printf(&quot;IMPOSSIBLE\\n&quot;); return 0; &#125; printf(&quot;POSSIBLE\\n&quot;); for(int i=1;i&lt;=n;i++) printf(&quot;%d &quot;,belong[i]&lt;belong[i+n]); printf(&quot;\\n&quot;); return 0;&#125; 例题 洛谷P5782 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=10005;int n,m;vector&lt;int&gt; g[maxn*2];bool mark[maxn*2];int sta[maxn*2],top;bool dfs(int x)&#123; if(mark[x^1])return false; if(mark[x])return true; mark[x]=1; sta[top++]=x; for(int i=0;i&lt;g[x].size();i++) if(!dfs(g[x][i]))return false; return true;&#125;inline bool TwoSAT()&#123; memset(mark,0,sizeof mark); for(int i=0;i&lt;n;i+=2)&#123; if(!mark[i] and !mark[i^1])&#123; top=0; if(!dfs(i)) &#123; while(top)mark[sta[--top]]=0; if(!dfs(i^1))return false; &#125; &#125; &#125; return true;&#125;int main()&#123; int u,v; scanf(&quot;%d%d&quot;,&amp;n,&amp;m); n*=2; for(int i=0;i&lt;m;i++)&#123; scanf(&quot;%d%d&quot;,&amp;u,&amp;v); u--,v--; g[u].push_back(v^1); g[v].push_back(u^1); &#125; if(TwoSAT())&#123; for(int i=0;i&lt;n;i+=2) if(mark[i])printf(&quot;%d\\n&quot;,i+1); else printf(&quot;%d\\n&quot;,(i^1)+1); &#125;else printf(&quot;NIE\\n&quot;); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"2-SAT","slug":"2-SAT","permalink":"https://starcried.github.io/tags/2-SAT/"}]},{"title":"AC自动机","slug":"AC自动机","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:04:33.338Z","comments":true,"path":"2022/04/30/AC自动机/","permalink":"https://starcried.github.io/2022/04/30/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/","excerpt":"","text":"AC来自一个大佬的名字，并不是写了就可以自动AC的意思 XD AC自动机是建立在trie树上的一种优化手段。trie在每次查询一个字符串时，如果在一个子树查不到就会回溯再查，效率会很低。我们考虑在给每个节点加一个如果查不到就跳转的指针fail，那么如果找不到的话直接跳转到fail就可以了。fail代表的是拥有该点的最大后缀的点的位置。 那么怎么寻找这个fail呢？因为我们要寻找最大后缀，深度就是一个比较重要的条件。于是我们bfs。注意了，设一个点now,tmp为now的子节点（从'a'到'z'任何一个），有以下转移： （第一段使用结构体存储了点，第二段是用数组） 12e[tmp].fail=e[e[now].fail].nxt[i];fail[tmp]=ch[fail[now]][i]; 首先我们知道trie是有一个0节点的。那么0连接的所有点的fail就连接的是0。如果我们接下来遍历每个点，对于任何点的fail都是其父节点的fail的子字符。因为是bfs，所以这样做一定是正确的而且一定会找到其最长后缀的点。 这里注意一下：如果now点有该字符是按照上面记录的。如果没有（ch[now][i]==0）就需要转移记录一下nxt： 12e[now].nxt[i]=e[e[now].fail].nxt[i];ch[now][i]=ch[fail[now]][i]; 这样的话我们查询的时候只需要令now不断等于当前点的nxt就可以快速遍历啦~如果遍历到0，说明就end了。 让我们在打板子的时候顺便A一下洛谷的模板题： P3808 【模板】AC自动机（简单版） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;queue&gt;using namespace std;const int maxn=1e6+10;char s[maxn];int n,fail[maxn],ch[maxn][26],vis[maxn],val[maxn];struct ac&#123; int cnt=0; inline void insert(char *s) &#123; int now=0; for(;*s;s++) &#123; int t=*s-&#x27;a&#x27;; if(!ch[now][t])ch[now][t]=++cnt; now=ch[now][t]; &#125; val[now]++; &#125; inline void build() &#123; int now=0,t,tmp; queue&lt;int&gt; q; q.push(0); while(!q.empty()) &#123; now=q.front();q.pop(); for(int i=0;i&lt;26;i++) &#123; t=ch[now][i]; if(t)&#123; if(now) fail[t]=ch[fail[now]][i]; q.push(t); &#125;else ch[now][i]=ch[fail[now]][i]; &#125; &#125; &#125; inline int match(char *s) &#123; int now,ans=0; for(now=0;*s;s++) &#123; int t=*s-&#x27;a&#x27;; now=ch[now][t]; for(int tmp=now;tmp and !vis[tmp];tmp=fail[tmp]) ans+=val[tmp],vis[tmp]=1; &#125; return ans; &#125;&#125;ac;int main()&#123; scanf(&quot;%d&quot;,&amp;n); for(int i=1;i&lt;=n;i++)&#123; scanf(&quot;%s&quot;,s); ac.insert(s); &#125; ac.build(); scanf(&quot;%s&quot;,s); printf(&quot;%d\\n&quot;,ac.match(s)); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"字符串","slug":"字符串","permalink":"https://starcried.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"AE 制作简单动态壁纸","slug":"AE 制作简单动态壁纸","date":"2022-04-29T16:00:00.000Z","updated":"2024-10-16T11:56:45.938Z","comments":true,"path":"2022/04/30/AE 制作简单动态壁纸/","permalink":"https://starcried.github.io/2022/04/30/AE%20%E5%88%B6%E4%BD%9C%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%A3%81%E7%BA%B8/","excerpt":"","text":"成品 B站链接 Wallpaper Engine 可用：搜索 Alice_StarCried 简述 参考了B站的两个自学教程，都是直接搜能搜到的。PS、AE 零基础。因为需要渲染所用电脑配置有一定需求，额外用了数位板。AE 使用了现成脚本。从学习到制作完成总用时不过四天。 所需技能为 PS 基本使用，包括抠图、补图等，以及 AE 基本使用和脚本使用，都很简单。最耗时的部分实际上是 PS 部分，一开始不会用一些技巧导致进度缓慢和返工。成品依然有些瑕疵。 流程 设计 想清楚你需要使图片的哪些部分动起来，只要是和附近部分分开动的部位都需要扣下来作为独立的图层。 想清楚哪些部分动起来会露出背景，需要对背景空的部分进行补图。 提前设计好避免返工。 抠图 使用快速选择、选择选项以及钢笔工具进行抠图。 智能选择很快，但不精细。需要用钢笔进行修补。 补图 前景扣剩下会露出来的部分和画布外的部分（动起来会进入视野的部分）适当补图。使用钢笔、印章、画笔、涂抹等。PS 技巧不做讨论。 AE 导入 PSD 时会自动删除画布外部分。请提前扩大画布大小。之后可在 AE 中缩小。 设置动效 随风摇曳 用人偶工具和 AutoSway 插件设置随风摇曳动效。插件下载和使用方法自行搜索。 变化 直接手动设置关键帧改变人物各部分的位置、旋转等属性。 眨眼动效 用 Alpha（透明度）遮罩实现眼白的消失。用人偶工具实现睫毛的移动。 尽量不要直接在 AE 内使用画笔等工具修改图片，这会成为一个动作。 导出 这里我出了一点问题。在导出选编译器时选择了 apple 的导致渲染出来的结果只有一帧然后全是黑屏。实际上是渲染失败了，但是 AE 并没有报错，ME 会报渲染失败但搜不到解决办法。实际默认是正确的，但是我手贱改了后没改回来还忘掉了，导致了长时间的无用查错。 剩余设置按默认、推荐值和网上教程来即可。 结论 只是非常基础的动态效果。如果需要更多效果可以进行更多 PS 和 AE 的学习。总的来说难度不大，可以自学。","categories":[{"name":"创作","slug":"创作","permalink":"https://starcried.github.io/categories/%E5%88%9B%E4%BD%9C/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"Adobe","slug":"Adobe","permalink":"https://starcried.github.io/tags/Adobe/"},{"name":"微光","slug":"微光","permalink":"https://starcried.github.io/tags/%E5%BE%AE%E5%85%89/"}]},{"title":"AT2390 Games on DAG","slug":"AT2390 Games on DAG","date":"2022-04-29T16:00:00.000Z","updated":"2024-10-06T18:07:06.994Z","comments":true,"path":"2022/04/30/AT2390 Games on DAG/","permalink":"https://starcried.github.io/2022/04/30/AT2390%20Games%20on%20DAG/","excerpt":"","text":"AT2390 Games on DAG 题意 \\(n\\) 个点 \\(m\\) 条边的 DAG，每条边 \\((u,v)\\) 有 \\(u&lt;v\\)。\\(1,2\\) 号点各一个石头，Alice 和 Bob 轮流每次沿边移动一个石头，不能动者输。求所有连边子集中先手胜的情况。两个石头可以重合。\\(n\\leq 15\\)。 思路 发现对于两个石头的 SG 函数是独立的，输者两个石头 SG 函数异或值为 0，那么先手胜的情况就是所有情况减去这种情况。 对于所有 SG 函数为 \\(v\\) 的点，它们必须向 SG 函数小于 \\(v\\) 的所有点连至少一条边，对大于 \\(v\\) 的连边没有约束，并且互相不能连边。 所以我们可以枚举当前图的 SG 函数为 0 的点，这样所有其他点都至少向它们连一条边，而它们之间不连边，它们向其他点连边任意。于是对于剩下点的连通子图，我们又可以将所有点的 SG 函数减 1，使它又可以枚举 SG 函数为 0 的点。 于是我们可以 DP。设 \\(f_S(1,2\\in S)\\) 为对于 \\(S\\) 所有连通子图满足 1,2 SG 函数相等的方案数。 转移时枚举 \\(S\\) 的子集 \\(T\\) 为 SG 函数不为 0 的点，使 \\(1,2\\in T\\) 或 \\(1,2\\not \\in T\\)。对于前者情况，\\(T\\) 对于 \\(S\\) 的补集为 SG 函数为 0 的点，从 \\(f_T\\) 转移即可。对于后者情况，1,2 SG 函数为 0，\\(T\\) 中的边随便连。 DP 前预处理出所有集合被每个点的连边条数。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=15,mod=1e9+7; int n,m,a[maxn][maxn],f[1&lt;&lt;maxn],c[1&lt;&lt;maxn][maxn],pow[maxn*maxn]; inline void work()&#123; n=read(),m=read(); pow[0]=1;for(int i=1;i&lt;=m;i++) pow[i]=(pow[i-1]&lt;&lt;1)%mod; for(int x,y,i=1;i&lt;=m;i++) x=read()-1,y=read()-1,a[x][y]=1; for(int d=1;d&lt;1&lt;&lt;n;d++)&#123; int j=0; while(~d&gt;&gt;j&amp;1)++j; for(int x=0;x&lt;n;x++) c[d][x]=c[d^1&lt;&lt;j][x]+a[x][j]; &#125; for(int d=0;d&lt;1&lt;&lt;n;d++) if((d&amp;3)==3)&#123; f[d]=1; for(int t=d&amp;(d-1);t;--t&amp;=d) if((t&amp;1)==(t&gt;&gt;1&amp;1)) if(t&amp;1)&#123; int res=1; for(int i=0;i&lt;n;i++) if(t&gt;&gt;i&amp;1) res=1ll*res*(pow[c[d^t][i]]-1)%mod; else if(d&gt;&gt;i&amp;1) res=1ll*res*pow[c[t][i]]%mod; f[d]=(f[d]+1ll*res*f[t])%mod; &#125;else&#123; int res=1; for(int i=0;i&lt;n;i++) if(t&gt;&gt;i&amp;1) res=1ll*res*(pow[c[d^t][i]]-1)%mod*pow[c[t][i]]%mod; else if(d&gt;&gt;i&amp;1) res=1ll*res*pow[c[t][i]]%mod; f[d]=(f[d]+res)%mod; &#125; &#125; printf(&quot;%d\\n&quot;,(pow[m]-f[(1&lt;&lt;n)-1]+mod)%mod); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"博弈论","slug":"博弈论","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"}]},{"title":"AT2304 Cleaning","slug":"AT2304 Cleaning","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:31:34.208Z","comments":true,"path":"2022/04/30/AT2304 Cleaning/","permalink":"https://starcried.github.io/2022/04/30/AT2304%20Cleaning/","excerpt":"","text":"AT2304 Cleaning 题意 一个树上每个节点有一些石子，每次只能选取两个叶子节点并将路径间的所有点上的石子数量减1，问是否能将所有石子取完。 思路 设 \\(f_x\\) 表示从 \\(x\\) 节点向上的路径条数，\\(s_x\\) 为子节点的 \\(f\\) 值的和，则有： \\[ a_x=\\frac{s_x-f_x}{2}+f_x\\\\ f_x=2a_x-s_x \\] 我们只需要保证以下条件即可： 从子节点传上来的路径条数的最大值小于等于该点石头个数； 向上传的路径条数不为负且小于等于该点石头数。 也就是说，在合法条件下，我们令能在子树内匹配的路径数尽量多，然后向上传路径。 可以证明，在满足上面两个条件下，总能构造出一种合法方案使这个点合法。 其他条件： 子叶节点的 \\(f_x=a_x\\)； 根节点不能为子节点； 若根节点的 \\(f\\) 值不为0，判定为无解。 实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int n,a[maxn],root; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1],in[maxn],f[maxn]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;in[a]++; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;in[b]++; &#125; void dfs(int x,int fa)&#123; f[x]=in[x]==1?a[x]:(a[x]&lt;&lt;1); for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==fa)continue; dfs(u,x); f[x]-=f[u]; if(f[u]&gt;a[x]) puts(&quot;NO&quot;),exit(0); &#125; if(f[x]&gt;a[x] or f[x]&lt;0) puts(&quot;NO&quot;),exit(0); &#125; inline void work()&#123; n=read(); for(int i=1;i&lt;=n;i++) a[i]=read(); for(int i=1;i&lt;n;i++) addedge(read(),read()); if(n==2) return puts(a[1]==a[2]?&quot;YES&quot;:&quot;NO&quot;),void(); for(int i=1;i&lt;=n;i++) if(in[i]!=1)&#123;root=i;break;&#125; dfs(root,0); puts(f[root]?&quot;NO&quot;:&quot;YES&quot;); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"CF1032G Chattering","slug":"CF1032G Chattering","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:43:42.289Z","comments":true,"path":"2022/04/30/CF1032G Chattering/","permalink":"https://starcried.github.io/2022/04/30/CF1032G%20Chattering/","excerpt":"","text":"CF1032G Chattering 思路 对于每一个位置，它转移的范围是确定的。 对于一段可以走到的区间，我们可以求出区间中所有点再能走到区间范围。 于是这个就可以倍增进行转移。 如何快速求出一段区间能走到的区间范围？也就是分别求出一段区间向左跳的位置的最小值和向右跳位置的最大值，发现这其实就是一个RMQ问题。但是因为还有倍增的时间复杂度，而且是没有修改的，那么我们可以利用ST表做到 \\(O(1)\\) 查询。 于是时间复杂度就变成了 \\(O(n\\log n)\\) 。 这个转移的思想和 ATcoder的一道题。 实现 题目是一个环，所以我们需要将序列延长成三倍，然后在中间段查询。 倍增时，若倍增到的左右端点距离已经超过 \\(n\\) 说明使完全覆盖，不优。 最后需要将答案加一，因为第一次的时间并未算上。当 \\(n\\) 为 1 时，不需要传播，答案为 0。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=3e5+10; int n,a[maxn]; int log[maxn]; int l[20][maxn],r[20][maxn]; struct RMQ&#123; int st[maxn][20],val[maxn]; int op; inline int MAX(int x,int y)&#123; return val[x]&gt;val[y]?x:y; &#125; inline void build(int *b,int n,int _op)&#123; op=_op; for(int i=1;i&lt;=n;i++) st[i][0]=i,val[i]=op*b[i]; for(int j=1;j&lt;=log[n];j++) for(int i=1;i&lt;=n;i++) st[i][j]=MAX(st[i][j-1],st[i+(1&lt;&lt;(j-1))][j-1]); &#125; inline int query(int l,int r)&#123; int k=log[r-l+1]; return MAX(st[l][k],st[r-(1&lt;&lt;k)+1][k]); &#125; &#125;L,R; inline void work()&#123; n=read(); if(n==1)return (void)puts(&quot;0&quot;); for(int i=2;i&lt;=3*n;i++) log[i]=log[i&gt;&gt;1]+1; for(int i=1;i&lt;=n;i++) a[i]=a[i+n]=a[i+n+n]=read(); for(int i=0;i&lt;=log[3*n];i++) l[i][1]=1,r[i][n*3]=3*n; for(int i=1;i&lt;=3*n;i++) l[0][i]=max(1,i-a[i]),r[0][i]=min(n*3,i+a[i]); L.build(l[0],3*n,-1),R.build(r[0],3*n,1); for(int l1,r1,j=1;j&lt;=log[3*n];j++) for(int i=1;i&lt;=3*n;i++)&#123; l1=L.query(l[j-1][i],r[j-1][i]); r1=R.query(l[j-1][i],r[j-1][i]); l[j][i]=min(l[j-1][l1],l[j-1][r1]); r[j][i]=max(r[j-1][l1],r[j-1][r1]); &#125; for(int i=n+1;i&lt;=n&lt;&lt;1;i++)&#123; int u=i,v=i,ans=0; for(int j=log[n*3];~j;j--) if(max(r[j][u],r[j][v])-min(l[j][u],l[j][v])+1&lt;n)&#123; int su=L.query(l[j][u],r[j][v]),sv=R.query(l[j][u],r[j][v]); u=su,v=sv; ans+=(1&lt;&lt;j); &#125; printf(&quot;%d &quot;,ans+1); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"ST表","slug":"ST表","permalink":"https://starcried.github.io/tags/ST%E8%A1%A8/"}]},{"title":"CF1166E The LCMs Must be Large","slug":"CF1166E The LCMs Must be Large","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:47:18.376Z","comments":true,"path":"2022/04/30/CF1166E The LCMs Must be Large/","permalink":"https://starcried.github.io/2022/04/30/CF1166E%20The%20LCMs%20Must%20be%20Large/","excerpt":"","text":"CF1166E The LCMs Must be Large 思维好题，结论好题。 题意 一个长度为 \\(n\\) 的未知长度的序列，有 \\(m\\) 个限制，每个限制形如给定一个集合 \\(S\\) ，使集合内元素的 \\(lcm\\) 严格大于其补集元素的 \\(lcm\\) 。问是否存在这一序列。 思路 要注意我们是要尽可能使序列有解。 先给出结论：若所有集合两两间有交，则有解。否则一定无解。 首先有一个结论：若 \\(A\\subseteq B\\)，那么 \\(lcmB \\geq lcmA\\) 。 因为考虑 \\(B\\) 比 \\(A\\) 多的元素，只可能增加贡献而不可能减少贡献，所以上述结论显然。 然后我们回到题目：若一个限制的集合 \\(A\\) 与另一个限制的集合 \\(B\\) 不交，假设 \\(lcmA&gt;lcmA\\setminus S\\) (\\(S\\)表示整个序列集合)，那么一定有 \\(B\\subseteq A\\setminus S\\),即有 \\(lcmA\\setminus S\\geq lcm B\\) 。显然不符合要求。 然后证明结论的充分性。这里我们考虑一个构造的方法：假设所有元素初始都为1，我们将每个给定的集合内的元素都乘上一个互不相同的质数，那么如果集合两两相交，每个集合的\\(lcm\\)就是整个序列的\\(lcm\\)，并且每个集合的补集因为没有乘该集合的质数所以\\(lcm\\)一定小。如果有两个集合不相交，因为两个集合的质数不同，所以一定会出现一个集合的\\(lcm\\)大于另一个集合的情况，一定无解。 实现 12345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;bitset&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e4+10; int m; bitset&lt;maxn&gt; a[55],now; inline void work()&#123; m=read();read(); for (int x,i=1;i&lt;=m;i++) &#123; x=read(); while(x--) a[i].set(read()); for (int j=1;j&lt;i;j++) &#123; if ((a[i] &amp; a[j]).none()) return (void)puts(&quot;impossible&quot;); &#125; &#125; puts(&quot;possible&quot;); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"CF175E Power Defence","slug":"CF175E Power Defence","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:20:24.283Z","comments":true,"path":"2022/04/30/CF175E Power Defence/","permalink":"https://starcried.github.io/2022/04/30/CF175E%20Power%20Defence/","excerpt":"","text":"CF175E Power Defence 题意 一个塔防游戏：给定一个无限长的数轴，一个无限血的敌人要从正无穷走到负无穷。你的任务是放置三种塔，包含两种攻击塔和一种寒冰塔，使得敌人受到的伤害最大。 其中，每种塔的攻击半径可能不同，每种攻击塔的攻击力也可能不同。而寒冰塔没有攻击力，它的作用是使范围内敌人的速度减速，即一段区间若有\\(k\\)个寒冰塔覆盖，敌人速度变为\\(\\frac{1}{k+1}\\)。 敌人初始速度为1格每秒，攻击塔的伤害值也是以秒计算的。 思路 首先有几个基本结论： 若没有寒冰塔，整场游戏答案固定。 若有寒冰塔，让所有塔挤在一起必不会更劣。这里对挤在一起的定义是：所有塔至少有一端上下对齐，且左右两端距离最大不超过\\(\\lceil \\frac{n}{2}\\rceil\\)。 寒冰塔的能力实际上是将范围内基础伤害增加一倍。注意这里的伤害是忽略其他寒冰塔效果的。 发现序列长度很短，排列的方式也很有限，于是我们就有了一个大胆的想法：模拟退火。 然后便是裸的模拟退火算法：随机出来两个位置进行交换，统计答案，若答案大于当前答案，接受之；否则以当前温度的概率接受之。参数调整得好的话多做几次便可。 然后是统计答案。我有一个\\(n^2\\)的想法：扫描序列，每扫到一个寒冰塔就再次扫描整个序列的攻击塔，计算出两个塔间相交的范围乘上该塔攻击力加入答案即可，当然最后别忘了加上不计算寒冰塔的基础伤害。正确性也显然，因为显然寒冰塔的贡献是可以对于每个其他攻击塔单独计算的。 具体实现我耍了个小聪明：将所有炮塔放进一个数组中，这样交换的时候就不用分上下位置了。统计答案的时候计算出该塔的实际位置就行。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;ctime&gt;#define T 10000#define eps 0.99#define kb 1.38e-23#define endt 1e-12#define INF 1e19using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=45; int n1,n2,n3,d1,d2,n,a[maxn],m; double r1,r2,r3,res,ans; inline double getsum()&#123; double sum=0; for(int i=1;i&lt;=n;i++)&#123; if(a[i]!=3)continue; int x=i; if(x&gt;m)x-=m; double L3=x-r3,R3=x+r3; for(int j=1;j&lt;=n;j++)&#123; if(a[j]==3)continue; int y=j,t=a[j]; if(y&gt;m)y-=m; if(t==1)&#123; double L1=y-r1,R1=y+r1; sum+=max(0.0,d1*(min(R1,R3)-max(L1,L3))); &#125;else if(t==2)&#123; double L2=y-r2,R2=y+r2; sum+=max(0.0,d2*(min(R2,R3)-max(L2,L3))); &#125; &#125; &#125; return res+sum; &#125; inline void solve() &#123; double t=T; double ans=0; while(t&gt;endt) &#123; int xx=rand()%n+1,yy=rand()%n+1; while(a[xx]==a[yy])xx=rand()%n+1,yy=rand()%n+1; swap(a[xx],a[yy]); double zp=getsum(); if(zp&gt;ans)&#123; ans=zp; star::ans=max(star::ans,ans); &#125;else if(rand()&lt;exp((ans-zp)/t/kb) * RAND_MAX)swap(a[xx],a[yy]); else ans=zp; t*=eps; &#125; &#125; inline void work()&#123; n1=read(),n2=read(),n3=read(); r1=read(); r1=sqrt(r1*r1-1); r2=read(); r2=sqrt(r2*r2-1); r3=read(); r3=sqrt(r3*r3-1); d1=read(),d2=read(); res=2*n1*r1*d1+2*n2*r2*d2; if(n3==0)return (void)printf(&quot;%.10lf&quot;,res); n=n1+n2+n3; for(int i=1;i&lt;=n;i++) if(n1) a[i]=1,n1--; else if(n2) a[i]=2,n2--; else if(n3) a[i]=3,n3--; m=n/2+1; n=m*2; random_shuffle(a+1,a+1+n); srand(time(0));// while((double)clock()/CLOCKS_PER_SEC&lt;2.7) for(int i=1;i&lt;=100;i++) solve(); printf(&quot;%.10lf\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 总结 这题正解是DP，爆搜也能过。 codeforces的题目，如果我现场写模拟退火的话一定当场去世。毕竟我因为一些奇怪的原因交了好多回。 所以骗骗分还是可以的 by ysr UPD:2020.12.29 发现这个好像是个爬山.","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"随机化","slug":"随机化","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96/"}]},{"title":"CF404D-DP【成就达成】","slug":"CF404D-DP【成就达成】","date":"2022-04-29T16:00:00.000Z","updated":"2024-10-06T16:51:43.451Z","comments":true,"path":"2022/04/30/CF404D-DP【成就达成】/","permalink":"https://starcried.github.io/2022/04/30/CF404D-DP%E3%80%90%E6%88%90%E5%B0%B1%E8%BE%BE%E6%88%90%E3%80%91/","excerpt":"","text":"CF404D-DP 正经的东西 题意 给定一个字符串，只包含'0','1','2','*','?'五种字符，其中'?'可被替换为其他任何一种，求使序列符合扫雷地图定义的方案数。 一个数字字符大小表示与之临近的位置总共有多少个雷。 思路 DP。 和其他题解不太相同，我们每个点只记录三种状态：0,1,2，分别表示若此点的下一位不为雷、为雷和此点位就是雷的此位及以前的方案数。 注意，这些状态除了最后一个，与该点本身为何没有关系。 考虑每一个点分别为何的情况下从上一个位置的什么状态转移： 为0：继承0. 1f[i][0]+=f[i-1][0] 为1：自身0的状态继承上一个为雷的状态，为1的继承为0的。 12f[i][0]+=f[i-1][2]f[i][1]+=f[i-1][0] 为2：只能将自身为1的状态继承上一个为雷的状态。 1f[i][1]+=f[i-1][2] 为雷：继承上一个为1、为雷的状态。 1f[i][2]+=f[i-1][2]+f[i-1][1] 为？：将上述所有状态全部转移。 123f[i][0]+=f[i-1][0]+f[i-1][2]f[i][1]+=f[i-1][0]+f[i-1][2]f[i][2]+=f[i-1][1]+f[i-1][2] 至于上面转移的原因显然，即每个点后面的点能继承当前点的哪个状态。 注意：初始化f[0][0]=f[0][1]=1，后者是为了计算第一位为雷的情况。此外，所有该点未被转移的状态都为0。 于是我们线性DP求解即可。 不正经的东西 首先，显然上面的第一维可以滚动数组优化。 然后，我们可以边输入边计算，就不用数组存东西啦。这样我们将空间复杂度优化到了\\(O(1)\\) 最后，你就会发现吾的做法即好想又好写又省时间又省空间 达成成就：内存使用小于代码大小 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;cstdio&gt;using namespace std;const int mod=1e9+7;int f[2][3];int x,i;char c;inline void qm(int &amp;a,const int&amp; b)&#123;(a+=b)&gt;=mod?(a-=mod):a;&#125;int main()&#123; c=getchar(); while(c&lt;=32)c=getchar(); f[0][0]=f[0][1]=1; for(x=1;c&gt;32;x++,c=getchar())&#123; i=x&amp;1; f[i][0]=f[i][1]=f[i][2]=0; switch(c)&#123; case &#x27;0&#x27;:&#123; qm(f[i][0],f[i^1][0]); break; &#125; case &#x27;1&#x27;:&#123; qm(f[i][1],f[i^1][0]); qm(f[i][0],f[i^1][2]); break; &#125; case &#x27;2&#x27;:&#123; qm(f[i][1],f[i^1][2]); break; &#125; case &#x27;*&#x27;:&#123; qm(f[i][2],f[i^1][1]+f[i^1][2]); break; &#125; case &#x27;?&#x27;:&#123; qm(f[i][0],f[i^1][0]); qm(f[i][0],f[i^1][2]); qm(f[i][1],f[i^1][0]); qm(f[i][1],f[i^1][2]); qm(f[i][2],f[i^1][1]); qm(f[i][2],f[i^1][2]); break; &#125; &#125; &#125; x--; printf(&quot;%d&quot;,(f[x&amp;1][0]+f[x&amp;1][2])%mod); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"}]},{"title":"CF459E-DP","slug":"CF459E-DP","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:30:56.553Z","comments":true,"path":"2022/04/30/CF459E-DP/","permalink":"https://starcried.github.io/2022/04/30/CF459E-DP/","excerpt":"","text":"CF459E-DP 核心代码15行 思路 观察数据范围，我们建m层分层图跑最短路想到DP。 DP最大的特点就是无后效性。那么我们这一题哪个条件无后效性呢？ 发现DP值一定从边权小于当前点的位置转移而来。 这不就无后效性了？我们按边权将所有边排序即可。 然后，枚举边，将DP值记录到点上，每次用起始点的dp值加1更新到达点的dp值。最后输出dp值最大的即可。 然后，您会发现第一个样例过不去。 因为题目要求边权严格递增，所以我们需要同时将边权相同的边用上次的dp值更新，即我们需要临时记录一下。 样例非常良心。 实现 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=3e5+10; int n,m,f[maxn],g[maxn]; struct edge&#123; int u,v,val; inline bool operator &lt; (const edge &amp;zp)const&#123;return val&lt;zp.val;&#125; &#125;e[maxn]; inline void work()&#123; n=read();m=read(); for(int i=1;i&lt;=m;i++)e[i].u=read(),e[i].v=read(),e[i].val=read(); sort(e+1,e+1+m); for(int i=1,j;i&lt;=m;i=j+1)&#123; j=i; while(e[j+1].val==e[i].val)j++; for(int k=i;k&lt;=j;k++) g[e[k].u]=f[e[k].u],g[e[k].v]=f[e[k].v];//只有这些dp值要用 for(int k=i;k&lt;=j;k++) f[e[k].v]=max(f[e[k].v],g[e[k].u]+1); &#125; int ans=0; for(int i=1;i&lt;=n;i++) ans=max(ans,f[i]); printf(&quot;%d&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; postscripts 目前rank1，可能只是因为写的人少。 是一道不错的DP练手题。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"CF487E Tourists","slug":"CF487E Tourists","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:28:41.659Z","comments":true,"path":"2022/04/30/CF487E Tourists/","permalink":"https://starcried.github.io/2022/04/30/CF487E%20Tourists/","excerpt":"","text":"CF487E Tourists 前排膜拜T神 上面的话和这道题一点关系都没有 题意 给一个点带权的无向图，每次询问查询两点间所有简单路径上最小值的最小值，单点修改。 思路 一眼圆方树。 ——@gxy001 这种题只有在树上做才比较好处理这么多次询问。考虑广义圆方树，缩完点双连通分量后建立的方点和圆点。 因为我们找的是最小值，所以必须将代表整个点双的方点的权值设为与其相连的所有圆点的权值的最小值。用一个 multiset 或者一个可删堆（或者堆带懒惰删除）维护即可。 这样我们就可以在树上使用树剖进行查询了。 但是这题带修改。也就是说，按照上面的方法，更改一个圆点就必须遍历与其相连的所有方点进行修改。这样会被菊花图卡死。于是我们用一个经典套路：方点只维护其儿子的权值。这样我们查询时方法相同，只不过如果求出的 LCA 为方点的话需要再考虑一下其父亲节点的贡献。 由于我们需要区间查询加修改，我们可以将圆方树树剖并用线段树维护最小值。 代码 如果您追求更快速的代码体验，建议使用手写堆+惰性删除。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;set&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e5+10,INF=0x3f3f3f3f; int n,m,Q,a[maxn],cnt; struct gragh&#123; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt; &#125; &#125;G1,G2; int st[maxn],dfn[maxn],tot,id[maxn]; struct SegmentTree&#123; #define ls (ro&lt;&lt;1) #define rs (ro&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) int mn[maxn&lt;&lt;2]; inline void pushup(const int &amp;ro)&#123; mn[ro]=min(mn[ls],mn[rs]); &#125; void build(const int&amp; ro=1,const int &amp;l=1,const int &amp;r=cnt)&#123; if(l==r) return mn[ro]=a[id[l]],void(); build(ls,l,mid);build(rs,mid+1,r); pushup(ro); &#125; void update(const int &amp;x,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=cnt)&#123; if(l==r) return mn[ro]=a[id[l]],void(); if(x&lt;=mid) update(x,ls,l,mid); else update(x,rs,mid+1,r); pushup(ro); &#125; int query(const int &amp;x,const int &amp;y,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=cnt)&#123; if(x==l and y==r) return mn[ro]; if(y&lt;=mid) return query(x,y,ls,l,mid); else if(x&gt;mid) return query(x,y,rs,mid+1,r); else return min(query(x,mid,ls,l,mid),query(mid+1,y,rs,mid+1,r)); &#125; #undef ls #undef rs #undef mid &#125;T; void tarjan(int x)&#123; dfn[x]=id[x]=++tot; st[++st[0]]=x; for(int i=G1.head[x];i;i=G1.nxt[i])&#123; int u=G1.to[i]; if(!dfn[u])&#123; tarjan(u); id[x]=min(id[x],id[u]); if(id[u]&gt;=dfn[x])&#123; cnt++; int now=-1; G2.addedge(x,cnt); while(now^u) now=st[st[0]--],G2.addedge(now,cnt); &#125; &#125;else id[x]=min(id[x],dfn[u]); &#125; &#125; int dep[maxn],siz[maxn],fa[maxn],son[maxn],top[maxn]; multiset&lt;int&gt; q[maxn]; void dfs1(int x,int f)&#123; fa[x]=f,dep[x]=dep[f]+1,siz[x]=1; for(int i=G2.head[x];i;i=G2.nxt[i])&#123; int u=G2.to[i]; if(u==f)continue; dfs1(u,x); if(x&gt;n) q[x-n].insert(a[u]); siz[x]+=siz[u]; if(siz[u]&gt;siz[son[x]])son[x]=u; &#125; if(x&gt;n) a[x]=*q[x-n].begin(); &#125; void dfs2(int x,int topf)&#123; top[x]=topf,dfn[x]=++tot,id[tot]=x; if(!son[x])return; dfs2(son[x],topf); for(int i=G2.head[x];i;i=G2.nxt[i])&#123; int u=G2.to[i]; if(u==fa[x] or u==son[x])continue; dfs2(u,u); &#125; &#125; inline int LCA(int x,int y)&#123; int ans=INF; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); ans=min(ans,T.query(dfn[top[x]],dfn[x])); x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y])swap(x,y); ans=min(ans,T.query(dfn[y],dfn[x])); if(y&gt;n) ans=min(ans,a[fa[y]]); return ans; &#125; inline bool gc()&#123; char c=getchar(); while(!isalpha(c))c=getchar(); return c==&#x27;C&#x27;; &#125; inline void work()&#123; n=cnt=read(),m=read(),Q=read(); for(int i=1;i&lt;=n;i++) a[i]=read(); for(int i=1;i&lt;=m;i++) G1.addedge(read(),read()); tarjan(1); tot=0; dfs1(1,0); dfs2(1,1); T.build(); while(Q--) if(gc())&#123; int x=read(),w=read(),u=fa[x]; if(u) q[u-n].erase(q[u-n].find(a[x])), q[u-n].insert(w), a[u]=*q[u-n].begin(), T.update(dfn[u]); a[x]=w; T.update(dfn[x]); &#125;else printf(&quot;%d\\n&quot;,LCA(read(),read())); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"圆方树","slug":"圆方树","permalink":"https://starcried.github.io/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"}]},{"title":"CF437D The Child and Zoo","slug":"CF437D The Child and Zoo","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:22:40.160Z","comments":true,"path":"2022/04/30/CF437D The Child and Zoo/","permalink":"https://starcried.github.io/2022/04/30/CF437D%20The%20Child%20and%20Zoo/","excerpt":"","text":"CF437D The Child and Zoo 题意 给定一个无向图，求所有点对间所有简单路径上最小点权的最大值的平均值。 思路 首先，我们可以将点权转移到边权上，边权为两端点点权的较小值。正确性显然。 然后，对于任意两个点之间的贡献，只有路径上含最大点权的简单路径有贡献，于是就可以把无向图转变为最大生成树。任意两个点间的贡献显然是在最大生成树上路径的最大边权。 考虑对于一条边的贡献，其实就是对于当前两端点连通块的大小相乘再乘该边边权。计算后合并两个连通块。 完了，一个最大生成树即可。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int n,m,siz[maxn],fa[maxn],a[maxn]; double ans; struct edge&#123; int u,v,d; inline bool operator &lt; (const edge &amp;zp) const&#123;return d&gt;zp.d;&#125; &#125;e[maxn]; inline void onion(int x,int y,int k)&#123; if(siz[x]&lt;siz[y])swap(x,y); ans+=1.0*siz[x]*siz[y]*k; fa[y]=x,siz[x]+=siz[y]; &#125; int find(int x)&#123;return fa[x]==x?x:fa[x]=find(fa[x]);&#125; inline void work()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) a[i]=read(),fa[i]=i,siz[i]=1; for(int u,v,i=1;i&lt;=m;i++) u=read(),v=read(),e[i]=(edge)&#123;u,v,min(a[u],a[v])&#125;; sort(e+1,e+1+m); for(int cnt=0,i=1;i&lt;=m and cnt&lt;=n-1;i++)&#123; int u=find(e[i].u),v=find(e[i].v); if(u!=v) onion(u,v,e[i].d),cnt++; &#125; printf(&quot;%.5lf\\n&quot;,ans/n/(n-1)*2); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"CF710F String Set Queries","slug":"CF710F String Set Queries","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:30:17.630Z","comments":true,"path":"2022/04/30/CF710F String Set Queries/","permalink":"https://starcried.github.io/2022/04/30/CF710F%20String%20Set%20Queries/","excerpt":"","text":"CF710F String Set Queries 题意 动态支持加入删除字符串和字符串匹配 思路 动态 AC自动机 先不考虑动态情况。对于加入一个字符串，直接插入到自动机即可。 考虑删除。发现对于答案具有可减性，意思是对于同一个匹配串，答案可以表示为在自动机中匹配的答案减去删去的所有串匹配的答案。那我们考虑给所有删除的串也开一个 AC 自动机，每次询问在两个自动机中匹配将答案相减即可。 现在考虑动态情况。因为强制在线，且 AC 自动机是离线的，我们每插入一个字符串相当于重新建了一个自动机，每次在所有自动机中匹配结果的和即为答案。减少时间消耗的唯一途径是对 AC 自动机进行合并。 考虑如何合并时间复杂度有保证且优秀。有很多办法，比如根号重构、二进制分组等。后者比较优秀也比较好写。 实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;string&gt;using namespace std;namespace star&#123; const int maxn=3e5+10; struct ACmation&#123; int tot,son[maxn][26],val[maxn],fail[maxn],st[maxn],N,n,siz[maxn],beg[maxn]; string S[maxn]; inline void ins(string s,int ro)&#123; int x=ro; for(auto t:s)&#123; t-=&#x27;a&#x27;; if(son[x][t]==ro)&#123; son[x][t]=++tot; for(int j=0;j&lt;26;j++) son[tot][j]=ro; &#125; x=son[x][t]; &#125; val[x]++; &#125; inline void build(int ro)&#123; fail[ro]=ro; static int q[maxn]; int hd=0,tl=1; q[tl]=ro; while(hd&lt;tl)&#123; int x=q[++hd]; for(int t=0;t&lt;26;t++)&#123; int u=son[x][t]; if(u!=ro)&#123; fail[u]=x==ro?x:son[fail[x]][t]; if(son[fail[x]][t]!=u) val[u]+=val[son[fail[x]][t]]; q[++tl]=u; &#125;else son[x][t]=son[fail[x]][t]; &#125; &#125; &#125; inline int query(string s,int x)&#123; int ans=0; for(auto t:s) x=son[x][t-&#x27;a&#x27;],ans+=val[x]; return ans; &#125; inline void merge()&#123; siz[--N]&lt;&lt;=1; for(int i=st[N];i&lt;=tot;i++)&#123; val[i]=fail[i]=0; for(int j=0;j&lt;26;j++) son[i][j]=0; &#125; tot=st[N]; for(int i=0;i&lt;26;i++) son[tot][i]=tot; for(int i=beg[N];i&lt;=n;i++) ins(S[i],st[N]); build(st[N]); &#125; inline void insert(string s)&#123; st[++N]=++tot; for(int i=0;i&lt;26;i++) son[tot][i]=tot; siz[N]=1; ins(s,tot),build(st[N]); S[beg[N]=++n]=s; while(siz[N]==siz[N-1]) merge(); &#125; inline int query(string s)&#123; int ans=0; for(int i=1;i&lt;=N;i++) ans+=query(s,st[i]); return ans; &#125; &#125;a,b; inline void work()&#123; int m;cin&gt;&gt;m; while(m--)&#123; int op;string s; cin&gt;&gt;op&gt;&gt;s; switch(op)&#123; case 1:a.insert(s);break; case 2:b.insert(s);break; case 3:cout&lt;&lt;a.query(s)-b.query(s)&lt;&lt;endl;break; &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"字符串","slug":"字符串","permalink":"https://starcried.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"CF494D Birthday","slug":"CF494D Birthday","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:30:58.789Z","comments":true,"path":"2022/04/30/CF494D Birthday/","permalink":"https://starcried.github.io/2022/04/30/CF494D%20Birthday/","excerpt":"","text":"CF494D Birthday 题意 一个1为根的带边权有根树，每次询问给定两个点 \\(u,v\\) 求 \\(\\sum_{x\\in S(v)} d(u,x)^2-\\sum_{x\\not\\in S(v)}d(u,x)^2\\) 其中 \\(d(u,v)\\) 表示 \\(u,v\\) 简单路径长度， \\(S(u)\\) 表示 \\(u\\) 的子树内点的集合。 思路 考虑 \\(u\\) 在 \\(v\\) 内和在 \\(v\\) 外的情况，发现可以通过每个点维护四个值——子树内所有点到其距离的和、子树内所有点到其距离的平方的和、所有点到其的距离和、所有点到其距离的平方和——来回答询问。 具体转移细节请自推，这里总结一个重点： 设 \\(v\\) 与 \\(u\\) 两点，\\(f2[v]\\) 为 \\(v\\) 子树内距离平方的和，\\(f[v]\\) 为 \\(v\\) 子树内距离的和，\\(siz[v]\\) 为 \\(v\\) 子树大小，\\(w\\) 为两点间距离，则 \\(v\\) 子树内所有点到 \\(u\\) 的距离的平方和为 \\[ f2[v]+2*f[v]*w+siz[v]*w^2 \\] 深度优先搜索两边换根处理出以上信息后分类讨论即可。 代码 请注意取模。 代码中的一些取模可以被优化。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10,mod=1e9+7; int n; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1],v[maxn&lt;&lt;1]; inline void addedge(int a,int b,int c)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt,v[ecnt]=c; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt,v[ecnt]=c; &#125; inline int up(int a)&#123;return a&gt;=mod?a-mod:a;&#125; inline int dn(int a)&#123;return a&lt;0?a+mod:a;&#125; int f[maxn],f2[maxn],g[maxn],g2[maxn],dep[maxn],fa[maxn][21],dis[maxn],siz[maxn]; void dfs(int x,int father)&#123; fa[x][0]=father;siz[x]=1; dep[x]=dep[father]+1; for(int i=0;i&lt;20;i++) fa[x][i+1]=fa[fa[x][i]][i]; for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==father)continue; dis[u]=dis[x]+v[i]; dfs(u,x); siz[x]+=siz[u]; f[x]=up(f[x]+up(f[u]+siz[u]*v[i]%mod))%mod; f2[x]=((f2[x]+f2[u])%mod+(siz[u]*v[i]%mod*v[i]%mod+2*v[i]*f[u]%mod)%mod)%mod; &#125; &#125; void dfs2(int x)&#123; for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==fa[x][0])continue; g[u]=(g[x]+(n-2*siz[u]+mod)%mod*v[i]%mod)%mod; g2[u]=((f2[u]+(g2[x]-((f2[u]+2*v[i]%mod*f[u]%mod)%mod+siz[u]*v[i]%mod*v[i]%mod)%mod+mod)%mod)%mod+((g[x]-f[u]+mod-siz[u]*v[i]%mod+mod)%mod*2%mod*v[i]%mod+(n-siz[u])*v[i]%mod*v[i]%mod)%mod)%mod; dfs2(u); &#125; &#125; inline int LCA(int x,int y)&#123; if(dep[x]&lt;dep[y])swap(x,y); for(int i=20;~i;i--) if(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i]; if(x==y) return x; for(int i=20;~i;i--) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0]; &#125; inline void work()&#123; n=read(); for(int u,v,i=1;i&lt;n;i++) u=read(),v=read(),addedge(u,v,read()); dfs(1,0); g[1]=f[1],g2[1]=f2[1]; dfs2(1); int Q=read(); while(Q--)&#123; int y=read(),x=read(),lca=LCA(x,y),d=dis[x]+dis[y]-dis[lca]*2; d%=mod; if(lca==x)&#123; printf(&quot;%lld\\n&quot;,(g2[y]-2*((((g2[x]-f2[x]+mod)%mod+2*d%mod*(g[x]-f[x]+mod)%mod)%mod+d*d%mod*(n-siz[x])%mod)%mod+mod)%mod+mod)%mod); &#125;else&#123; printf(&quot;%lld\\n&quot;,((((f2[x]%mod+2%mod*d%mod*f[x]%mod)%mod+d%mod*d%mod*siz[x]%mod)%mod*2%mod-g2[y]%mod)%mod+mod)%mod); &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"CF833B-线段树优化DP","slug":"CF833B-线段树优化DP","date":"2022-04-29T16:00:00.000Z","updated":"2024-10-06T18:02:42.568Z","comments":true,"path":"2022/04/30/CF833B-线段树优化DP/","permalink":"https://starcried.github.io/2022/04/30/CF833B-%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BC%98%E5%8C%96DP/","excerpt":"","text":"CF833B-线段树优化DP 题意 将一个长为\\(n\\)的序列分成\\(k\\)段，每段贡献为其中不同数字的个数，求最大贡献和。\\(n\\leq 35000,k\\leq 50\\)。 思路 此处感谢@gxy001 聚铑的精彩讲解 先考虑暴力DP，可以想到一个时空复杂度\\(O(n^2k)\\)的方法，即记录前i个数字分成了j段。我们现在来思考几个问题来优化这个操作： 对于一个数字，它对那些地方实际有贡献？ 每次分割出一个区间段对后续操作有影响的位置在哪？ 每次转移都从哪些地方继承？ 下来一一解答这些问题。 对于一个数字，它能产生贡献的区间其实就是该数字上一次出现的位置的后一位到它本身的位置。 对于每次划分，它以前的位置的贡献已经被考虑，所以我们只能考虑后面的位置。 相应的，每次转移会继承前面所有DP值的最大值。 那么我们可以将k提出来，每次循环继承上一次所有的dp值。因为只考虑从前面转移dp值，所以不会对之前的决策产生影响，所以是正确的。 看看1、3问题的答案，是不是想到了RMQ和区间赋值？ 于是我们可以通过线段树来实现DP优化。 具体来讲，迭代k次，每次线段树更新为上一次序列的dp值，然后从前往后扫，每个数会对其上述区间产生1的贡献，转移继承前面所有dp值的最大值即可。 时间复杂度将一维优化为log。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=35005; int n,k,cur[maxn],pre[maxn],f[maxn][60]; struct SegmentTree&#123; #define ls (ro&lt;&lt;1) #define rs (ro&lt;&lt;1|1) struct tree&#123; int l,r,tag,v; &#125;e[maxn&lt;&lt;2]; inline void pushup(int ro)&#123; e[ro].v=max(e[ls].v,e[rs].v); &#125; inline void pushdown(int ro)&#123; e[ls].tag+=e[ro].tag;e[rs].tag+=e[ro].tag; e[ls].v+=e[ro].tag;e[rs].v+=e[ro].tag; e[ro].tag=0; &#125; void build(int ro,int l,int r)&#123; e[ro].l=l,e[ro].r=r; if(l==r)return; int mid=l+r&gt;&gt;1; build(ls,l,mid); build(rs,mid+1,r); &#125; void rebuild(int tim,int ro)&#123; int l=e[ro].l,r=e[ro].r; e[ro].tag=0; if(l==r)&#123; e[ro].v=f[l][tim];return; &#125; rebuild(tim,ls);rebuild(tim,rs); pushup(ro); &#125; void update(int ro,int x,int y)&#123; int l=e[ro].l,r=e[ro].r; if(l&gt;=x and r&lt;=y)&#123; e[ro].v+=1; e[ro].tag+=1;return; &#125; pushdown(ro); int mid=l+r&gt;&gt;1; if(mid&gt;=x)update(ls,x,y); if(mid&lt;y)update(rs,x,y); pushup(ro); &#125; int query(int ro,int x,int y)&#123; int l=e[ro].l,r=e[ro].r; if(l==x and r==y)return e[ro].v; pushdown(ro); int mid=l+r&gt;&gt;1; if(mid&lt;x)return query(rs,x,y); else if(mid&gt;=y)return query(ls,x,y); else return max(query(ls,x,mid),query(rs,mid+1,y)); &#125; #undef ls #undef rs &#125;T; inline void work()&#123; n=read(),k=read(); for(int x,i=1;i&lt;=n;i++)x=read(),pre[i]=cur[x],cur[x]=i; T.build(1,0,n); for(int i=1;i&lt;=k;i++)&#123; T.rebuild(i-1,1); for(int x=1;x&lt;=n;x++) T.update(1,pre[x],x-1),f[x][i]=T.query(1,0,x-1); &#125; printf(&quot;%d&quot;,f[n][k]); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"线段树","slug":"线段树","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"CF896D Nephren Runs a Cinema","slug":"CF896D Nephren Runs a Cinema","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:35:31.934Z","comments":true,"path":"2022/04/30/CF896D Nephren Runs a Cinema/","permalink":"https://starcried.github.io/2022/04/30/CF896D%20Nephren%20Runs%20a%20Cinema/","excerpt":"","text":"CF896D Nephren Runs a Cinema 题意 售票员最开始没有纸币，每次来一个顾客可以给她一张、拿走她一张或不操作。求出不出现中途没钱给的情况 \\(n\\) 名顾客后剩余钱数在 \\(l\\sim r\\) 的方案数。 思路 这是我们一道模拟赛题。 解法 1：套路组合计数。先不考虑不操作的顾客，那么就相当于是求二维平面不过一条直线到达一点的方案数。直接枚举操作顾客数，用组合数减去另外一个组合数然后乘上所有顾客中选这些顾客的方案数即可。 解法 2：暴力动态规划。每次从至多三个方向转移。 赛时我先想到第一个解法但是没想到枚举操作人数，以为不可做，于是想到了优化暴力的解法。 解法 3：解法 2 的优化。求出 \\(F=(x^{-1}+1+x)^n\\) ，然后 \\(f(x)-f(x+2)\\) 的第 \\(l \\sim r\\) 项的和即为答案。 \\((x^{-1}+1+x)\\) 表示三种转移方式，但是求出来的 \\(F\\) 显然不是正确答案，因为会有从负数幂的贡献是应该减掉的。 那么我们就考虑减掉它，实际上和解法一相同，\\(f(x)-f(x+2)\\) 相当于减去了错解，那么减完之后就是答案了。 因为每次要倍长多项式，使用快速幂一样的方式卷就可以了。根据主定理，时间复杂度 \\(O(n\\log n)\\)。 考场上有部分分，模数为 \\(998244353\\)，那么正解只需要改成任意模数多项式乘法就行了。 代码 注意，此代码不可 AC 此题，仅在模数为 \\(998244353\\) 时正确。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cstdlib&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c)) w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e6+10,mod=998244353,ge=3,gi=998244354/3; inline int fpow(int a,int b)&#123;int ans=1;for(;b;b&gt;&gt;=1,a=1ll*a*a%mod)if(b&amp;1)ans=1ll*ans*a%mod;return ans;&#125; struct NTT&#123; int r[maxn],lim; inline void getr(int li)&#123;lim=li;for(int i=0;i&lt;lim;i++) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(lim&gt;&gt;1));&#125; inline void operator () (int *a,int type) const &#123; for(int i=0;i&lt;lim;i++) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int mid=1;mid&lt;lim;mid&lt;&lt;=1)&#123; int rt=fpow(type==1?ge:gi,(mod-1)/(mid&lt;&lt;1)); for(int r=mid&lt;&lt;1,j=0;j&lt;lim;j+=r)&#123; int p=1; for(int k=0;k&lt;mid;k++,p=1ll*p*rt%mod)&#123; int x=a[j+k],y=1ll*p*a[j+k+mid]%mod; a[j+k]=(x+y)%mod,a[j+k+mid]=(x-y+mod)%mod; &#125; &#125; &#125; if(type==-1) for(int p=fpow(lim,mod-2),i=0;i&lt;lim;i++) a[i]=1ll*a[i]*p%mod; &#125; &#125;ntt; int n; int a[maxn],ans[maxn]; inline void work()&#123; n=read();read(); int Lim=4,lim=2; a[0]=a[1]=a[2]=ans[0]=1; int x=n,Len=3,len=1; while(x)&#123; static int res[maxn],tmp[maxn]; if(x&amp;1)&#123; for(int i=0;i&lt;Lim;i++) res[i]=a[i]; for(int i=Lim;i&lt;Lim+lim;i++) res[i]=0; for(int i=0;i&lt;lim;i++) tmp[i]=ans[i]; for(int i=lim;i&lt;Lim+lim;i++) tmp[i]=0; len+=Len;lim=Lim; while(lim&lt;len) lim&lt;&lt;=1; ntt.getr(lim&lt;&lt;1); ntt(res,1),ntt(tmp,1); for(int i=0;i&lt;lim&lt;&lt;1;i++) tmp[i]=1ll*res[i]*tmp[i]%mod; ntt(tmp,-1); for(int i=0;i&lt;lim;i++) ans[i]=tmp[i]; &#125; for(int i=0;i&lt;Lim;i++) res[i]=a[i]; for(int i=Lim;i&lt;Lim&lt;&lt;1;i++) res[i]=0; Lim&lt;&lt;=1;Len&lt;&lt;=1; for(int i=Lim;i&lt;Lim&lt;&lt;1;i++) res[i]=0; ntt.getr(Lim&lt;&lt;1); ntt(res,1); for(int i=0;i&lt;Lim&lt;&lt;1;i++) res[i]=1ll*res[i]*res[i]%mod; ntt(res,-1); for(int i=0;i&lt;Lim;i++) a[i]=res[i]; x&gt;&gt;=1; &#125; int l=read(),r=read(); for(int i=n;i&lt;n&lt;&lt;1;i++) ans[i]=(ans[i]-ans[i+2]+mod)%mod; int Ans=0; for(int i=n+l;i&lt;=n+r;i++) Ans=(Ans+ans[i])%mod; printf(&quot;%d\\n&quot;,Ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"},{"name":"多项式","slug":"多项式","permalink":"https://starcried.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"}]},{"title":"Dijkstra 最短路","slug":"Dijkstra 最短路","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:51:30.091Z","comments":true,"path":"2022/04/30/Dijkstra 最短路/","permalink":"https://starcried.github.io/2022/04/30/Dijkstra%20%E6%9C%80%E7%9F%AD%E8%B7%AF/","excerpt":"","text":"我之前一直记的迪杰斯特拉的翻译导致我把 dijkstra 写成了 dijstra 或者 dijskra…… 我以后叫她迪杰克斯歘！ dijkstra 是用来在有向图或者无向图中寻找任意两个点的最小距离的算法。但是无法处理带负环的图和求最长路。 dijkstra 的核心思想是由已找到的最短路的点集每次扩展一个点的最短路。 dis 数组代表由起点到其他点的最短路，初始化其为 \\(INF\\) (不要过大导致溢出；把到起点的 dis[s] 设为 0)，每次找到点集外与点集内的点直接相连的点中距离最短的一个点加入点集。重复此过程直到无点可以扩展。dis 记录着从起点到能到的所有点的距离。 如果 dis[i] 仍为 \\(INF\\)，可能不可至。 注意到“每次找到点集外与点集内的点直接相连的点中距离最短的一个点加入点集”的过程可以用堆完成。 时间复杂度为 \\(O(m\\log m)\\) 123456789101112131415161718192021222324252627282930313233343536#include&lt;bits/stdc++.h&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=1e5+10,maxm=2e5+10,INF=0x3f3f3f3f;int n,m,s;int ecnt,head[maxn],to[maxm],nxt[maxm],v[maxm];inline void addedge(int a,int b,int c)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;v[ecnt]=c;&#125;int dis[maxn];bool vis[maxn];inline void dijkstra()&#123; priority_queue&lt;pair&lt;int,int&gt;,vector&lt;pair&lt;int,int&gt;&gt;,greater&lt;pair&lt;int,int&gt;&gt;&gt; q; q.push(make_pair(0,s)); for(int i=1;i&lt;=n;i++) dis[i]=INF; dis[s]=0; while(!q.empty())&#123; int x=q.top().second;q.pop(); if(vis[x])continue; vis[x]=true; for(int u,i=head[x];i;i=nxt[i]) if(dis[u=to[i]]&gt;dis[x]+v[i]) dis[u]=dis[x]+v[i],q.push(make_pair(dis[u],u)); &#125;&#125;int main()&#123; n=read(),m=read(),s=read(); for(int a,b,i=1;i&lt;=m;i++)a=read(),b=read(),addedge(a,b,read()); dijkstra(); for(int i=1;i&lt;=n;i++)printf(&quot;%d &quot;,dis[i]); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"Dirichlet卷积和莫比乌斯反演","slug":"Dirichlet卷积和莫比乌斯反演","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:54:09.374Z","comments":true,"path":"2022/04/30/Dirichlet卷积和莫比乌斯反演/","permalink":"https://starcried.github.io/2022/04/30/Dirichlet%E5%8D%B7%E7%A7%AF%E5%92%8C%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/","excerpt":"","text":"非全面讲解，仅供记录笔记 Dirichlet卷积 \\[(f\\ast g)(n)=\\sum_{d\\mid n}f(d)g(\\frac{n}{d})\\] \\[\\varepsilon =\\mu \\ast 1 \\iff \\varepsilon(n) = \\sum_{d\\mid n} \\mu(d)\\] 其中\\(\\varepsilon\\)卷任何函数等于其函数本身。 莫比乌斯函数\\(\\mu\\) 定义 \\[\\mu(n)=\\begin{cases}1&amp;n=0\\\\(-1)^k&amp;k为n的本质不同质因子个数\\\\0&amp;otherwise\\\\ \\end{cases}\\] 性质 \\[\\sum_{d\\mid n}\\mu(d)=\\begin{cases}1&amp;n=1\\\\0&amp;n\\neq 1\\\\ \\end{cases}\\\\] 积性函数，所以可以线性筛求得： 1234567891011121314inline void getMu()&#123; mu[1]=1; for(int i=2;i&lt;=maxn;i++)&#123; if(!mark[i])prime[++tot]=i,mu[i]=-1; for(int j=1;j&lt;=tot and i*prime[j]&lt;=maxn;j++)&#123; mark[i*prime[j]]=1; if(i%prime[j]==0)&#123; mu[i*prime[j]]=0; break; &#125; mu[i*prime[j]]=-mu[i]; &#125; &#125;&#125; 莫比乌斯反演 若有 \\[f(n) = \\sum_{d\\mid n}g(d)\\] 则有 \\[g(n)=\\sum_{d\\mid n}\\mu(\\frac{d}{n})f(d)\\] 正确性证明（卷积）： 原问题即已知 \\(f=g*1\\) 求证 \\(g=f*\\mu\\) 证明：\\(f*\\mu=g*1*\\mu \\implies f*\\mu = g*\\varepsilon \\implies f*\\mu=g\\) 得证。 反演结论 \\[[\\gcd(i,j)=1]\\iff\\sum_{d\\mid\\gcd(i,j)}\\mu(d)\\] 例题 P2522 Problem b 容斥原理，分别求四个从1开始的区间的个数合并即可。 那么我们的问题就是处理单个区间的个数。 求 \\[\\sum_{i=1}^{n}\\sum_{j=1}^{m}[\\gcd(i,j)=k]\\] 即 \\[\\sum_{i=1}^{\\frac{n}{k}}\\sum_{j=1}^{\\frac{m}{k}}[\\gcd(i,j)=1]\\] 即 \\[\\sum_{i=1}^{\\frac{n}{k}}\\sum_{j=1}^{\\frac{m}{k}}\\sum_{d\\mid \\gcd(i,j)}\\mu(d)\\] 即 \\[\\sum_{d=1}^{min(\\frac{n}{k},\\frac{m}{k})}\\mu(d)\\lfloor\\frac{n}{kd}\\rfloor\\lfloor\\frac{m}{kd}\\rfloor\\] 然后数论分块求即可。","categories":[{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"GCD SUM","slug":"GCD SUM","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:26:02.144Z","comments":true,"path":"2022/04/30/GCD SUM/","permalink":"https://starcried.github.io/2022/04/30/GCD%20SUM/","excerpt":"","text":"GCD SUM 求 \\[ \\sum_{i=1}^n\\sum_{j=1}^n\\gcd(i,j) \\] 将原式变换得到 \\[ \\sum_{d=1}^nd\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor}[\\gcd(i,j)=1] \\] 别着急莫比乌斯反演，我们知道 \\[ \\varphi(n)=\\sum_{i=1}^n[\\gcd(i,n)=1] \\] 所以原式可化为 \\[ \\sum_{d=1}^nd\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}（2*\\varphi(i)-1） \\] 这里减一是因为会算重。对于上式，数论分块一下即可根号求。但实际上\\(\\varphi\\)还是要线性求。所以线性的也行。 然而，若是数据太大的话只能根号那就杜教筛加数论分块吧。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"Guass消元总结","slug":"Guass消元总结","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:56:35.333Z","comments":true,"path":"2022/04/30/Guass消元总结/","permalink":"https://starcried.github.io/2022/04/30/Guass%E6%B6%88%E5%85%83%E6%80%BB%E7%BB%93/","excerpt":"","text":"Guass消元 约旦·高斯消元法 求线性方程组 我们用一个\\(n*(n+1)\\)的矩阵存储线性方程组各项系数和零次项系数。 每一次找到一个未知数系数最大的方程，交换当前行方程和该方程，并将其他行该未知数的系数化为零。 重复n次即可。 最后第\\(a[i][i]\\)个数就是第i个未知数的系数，\\(a[i][n+1]\\)是等式右侧的数，用后者除以前者即可。 当化第i个方程时，若找到所有方程的最大值为零，即都为零，则无解。 当一个未知数在多于0个少于n个方程中有系数，该未知数为自由元，线性方程组有无数组解。 洛谷P3389 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=105; double a[maxn][maxn]; int n; inline void work()&#123; n=read(); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n+1;j++)a[i][j]=(double)read(); for(int i=1;i&lt;=n;i++)&#123; int mx=i; for(int j=i+1;j&lt;=n;j++) if(fabs(a[j][i])&gt;fabs(a[mx][i]))mx=j; swap(a[i],a[mx]); if(!a[i][i])return (void)puts(&quot;No Solution&quot;); for(int j=1;j&lt;=n;j++)&#123; if(j==i)continue; double tmp=a[j][i]/a[i][i]; for(int k=i+1;k&lt;=n+1;k++) a[j][k]-=a[i][k]*tmp; &#125; &#125; for(int i=1;i&lt;=n;i++)printf(&quot;%.2lf\\n&quot;,a[i][n+1]/a[i][i]); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 让我们再做一道不那么板子的题目： P4035 球形空间产生器 简述题意，我们需要求一个n维向量\\((x_1,x_2,\\dots,x_n)\\)使得对于每个i都满足\\(\\sum_{j=1}^{n}(a_{i,j}-x_j)^2=dis\\), 其中\\(dis\\)为未知常数。 所以我们考虑消去这个\\(dis\\): 我们将相邻的i的方程做差得到： \\[ \\sum_{j=1}^{n}a_{i+1,j}^2-a_{i,j}^{2}-2x_j(a_{i+1,j}-a_{i,j})=0 \\] 然后将常数项与未知数剥离： \\[ \\sum_{j=1}^{n}2x_j(a_{a+1,j}-a_{i,j})=\\sum_{j=1}^na_{i+1,j}^2-a_{i,j}^2 \\] 解线性方程组即可。 题目给定有解。 1234567891011121314151617181920212223242526272829303132333435#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cmath&gt;using namespace std;const int maxn=12;double b[maxn][maxn],a[maxn][maxn];int n;int main()&#123; scanf(&quot;%d&quot;,&amp;n); for(int i=1;i&lt;=n+1;i++) for(int j=1;j&lt;=n;j++)scanf(&quot;%lf&quot;,&amp;b[i][j]); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) a[i][j]=(b[i][j]-b[i+1][j])*2; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++) a[i][n+1]+=b[i][j]*b[i][j]-b[i+1][j]*b[i+1][j]; &#125; for(int i=1;i&lt;=n;i++)&#123; int mx=i; for(int j=i+1;j&lt;=n;j++)if(fabs(a[j][i])&gt;fabs(a[mx][i]))mx=j; swap(a[mx],a[i]); for(int j=1;j&lt;=n;j++)&#123; if(j==i)continue; double tmp=a[j][i]/a[i][i]; for(int k=i+1;k&lt;=n+1;k++) a[j][k]-=a[i][k]*tmp; &#125; &#125; for(int i=1;i&lt;=n;i++)printf(&quot;%.3lf &quot;,a[i][n+1]/a[i][i]); return 0;&#125; 求行列式的值 依据行列式的性质，我们用高斯消元将行列式转变为下三角矩阵，行列式的值就为对角线上各数的积。 当行列式其中两行成比例时行列式值为零。所以我们在高斯消元的时候发现只要有一列找不到有值的数就是这种情况，直接返回0即可。 一般来说，求行列式有可能加模数或者行列式值很大，我们在除的时候用逆元搞就行了。 1234567891011121314151617181920inline int Guass(int *a)&#123; int ans=1; for(int i=1;i&lt;=n;i++)&#123; int pos=0; for(int j=i;j&lt;=n;j++)if(a[j][i])&#123;pos=j;break;&#125; if(!pos)return 0; if(pos!=i)swap(a[pos],a[i]); int inv=fpow(a[i][i],mod-2,mod);//快速幂 for(int j=i+1;j&lt;=n;j++)&#123; if(a[j][i])&#123; ans=ans*inv%mod; for(int k=i+1;k&lt;=n;k++) a[j][k]=((a[j][k]*a[i][i]%mod-a[i][k]*a[j][i]%mod)%mod+mod)%mod; a[j][i]=0; &#125; &#125; &#125; for(int i=1;i&lt;=n;i++)ans=ans*a[i][i]%mod; return ans;&#125; 求逆矩阵 根据rsk大佬的课，我们可以知道矩阵求逆有一个方法是： 给原矩阵右边接一个等大的单位矩阵。 高斯消元，将原矩阵转为单位矩阵。 右侧矩阵即为所求。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cmath&gt;#define int long longusing namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=405,mod=1e9+7; int n,a[maxn][maxn&lt;&lt;1]; inline int fpow(int a,int b)&#123; int ans=1; for(;b;b&gt;&gt;=1,a=a*a%mod)if(b&amp;1)ans=ans*a%mod; return ans; &#125; inline void work()&#123; n=read(); for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)a[i][j]=read(); a[i][n+i]=1; &#125; for(int i=1;i&lt;=n;i++)&#123; int mx=i; for(int j=i+1;j&lt;=n;j++) if(a[mx][i]&lt;a[j][i])mx=j; swap(a[mx],a[i]); if(!a[i][i])return (void)puts(&quot;No Solution&quot;); int inv=fpow(a[i][i],mod-2); for(int j=1;j&lt;=n;j++)&#123; if(j==i)continue; for(int tmp=a[j][i]*inv%mod,k=1;k&lt;=n*2;k++)//k可以从i+1开始，不会更新下三角 a[j][k]=(a[j][k]-a[i][k]*tmp%mod+mod)%mod; &#125; &#125; for(int i=1;i&lt;=n;i++)&#123; for(int tmp=fpow(a[i][i],mod-2),j=1;j&lt;=n;j++) printf(&quot;%lld &quot;,a[i][j+n]*tmp%mod); puts(&quot;&quot;); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线性代数","slug":"线性代数","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}]},{"title":"KMP算法","slug":"KMP算法","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:12:54.224Z","comments":true,"path":"2022/04/30/KMP算法/","permalink":"https://starcried.github.io/2022/04/30/KMP%E7%AE%97%E6%B3%95/","excerpt":"","text":"KMP 算法是 D.E.Knuth、J,H,Morris 和 V.R.Pratt 三位神人共同提出的，称之为 Knuth-Morria-Pratt 算法，简称 KMP 算法。 问题：求 a 字符串与 b 字符串中子串相同的串首位置。 暴力就不说了，设 a 长 \\(m\\)，b 长 \\(n\\)，每次枚举比对每个字符，复杂度 \\(O(nm)\\)。 KMP 主要思想：如果一个字符串的子串与前缀相等，那么在查找时就可以直接将前缀跳至该子串的位置。复杂度 \\(O(n)\\)。 nxt[x] 记录x位置字符在查询串中的跳转位置。 eg:对于串abaabacac: a b a a b a c a c -1 0 0 1 1 2 3 0 1 12345678910inline void getnxt()&#123; int j=0,k=-1; nxt[0]=-1; while(j&lt;s.length()-1) &#123; if(k==-1||s[j]==s[k])nxt[++j]=++k; else k=nxt[k]; &#125;&#125; 查询时跳转即可。 模拟一下就知道啦~ 1234567891011121314151617181920212223242526272829303132333435#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;string s,t;int nxt[1000];inline void getnxt()&#123; int j=0,k=-1; nxt[0]=-1; while(j&lt;s.length()-1) &#123; if(k==-1||s[j]==s[k])nxt[++j]=++k; else k=nxt[k]; &#125;&#125;inline int indexkmp()&#123; int i=0,j=0; while(i&lt;s.length() and j&lt;t.length())//如果比完了就退出来了 if(i==-1 or s[i]==t[j])i++,j++; else i=nxt[i]; if(i&gt;=s.length())return j-s.length(); return -1;&#125;int main()&#123; std::ios::sync_with_stdio(false); cin&gt;&gt;s&gt;&gt;t; getnxt(); cout&lt;&lt;indexkmp()+1; return 0;&#125; 例题 洛谷P3375 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;using namespace std;const int maxn=1e6+5;int nxt[maxn];char a[maxn],b[maxn];int lena,lenb;inline void getnxt()&#123; int k=-1,j=0; nxt[0]=-1; while(j&lt;lena) if(k==-1 or a[k]==a[j]) nxt[++j]=++k; else k=nxt[k];&#125;inline void indexkmp()&#123; int j=0,i=0; while(j&lt;lena and i&lt;lenb) if(j==-1 or a[j]==b[i])&#123; i++,j++; if(j==lena)&#123; printf(&quot;%d\\n&quot;,i-lena+1); j=nxt[j]; &#125; &#125; else j=nxt[j];&#125;int main()&#123; scanf(&quot;%s\\n%s&quot;,&amp;b,&amp;a); lena=strlen(a); lenb=strlen(b); getnxt(); indexkmp(); for(int i=1;i&lt;=lena;i++) printf(&quot;%d &quot;,nxt[i]); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"字符串","slug":"字符串","permalink":"https://starcried.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"LCT(Link-Cut-Tree)","slug":"LCT(Link-Cut-Tree)","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:14:50.717Z","comments":true,"path":"2022/04/30/LCT(Link-Cut-Tree)/","permalink":"https://starcried.github.io/2022/04/30/LCT(Link-Cut-Tree)/","excerpt":"","text":"LCT维护一个森林，即把每个节点用splay维护，可以进行许多操作： 查询、修改链上的信息 随意指定原树的根（即换根） 动态连边、删边 合并两棵树、分离一棵树 动态维护连通性 等 主要性质 每一个Splay维护的是一条从上到下按在原树中深度严格递增的路径，且中序遍历Splay得到的每个点的深度序列严格递增。 每个节点仅包含于一个splay中。 边分为实边和虚边，实边记录 son 和 fa，包含在一个 splay 中。为了维护 splay 树形，虚边仅记录 fa。不过虚边是由 splay(根） 指向父亲的，不一定是原节点。 操作 access access 操作是指将一个点到树根的路径打通，即把根节点和该节点搞到一个 splay 上。 我们从 x 向上爬。 每次将所在节点 splay（转到 splay 的根节点） 将该 splay 所指向的节点的儿子换为 splay 的根节点。 更新信息。 将操作点切换到父节点，重复操作直到节点的父亲是0。 12345void access(int x)&#123; for(int y=0;x;y=x,x=fa[x])&#123; splay(x);son[x][1]=y;pushup(x); &#125;&#125; makert makert 操作可以将一个节点变成整棵树的根。 将该节点 access 。 将该节点 splay 。 将该节点打上子树翻转标记。 正确性为，access 操作后将该节点到原来的根的路径打通并成为一个 splay 后，整条路径的 dfs 序都会反转，而其他节点的 dfs 序都不会变。 12inline void rev(const int &amp;x)&#123;tag[x]^=1,swap(son[x][0],son[x][1]);&#125;void makert(int x)&#123;access(x),splay(x),rev(x);&#125; findrt findrt 操作可以找到一个节点在其树内的根。 将该节点 access。 将该节点 splay。 一直跳左儿子，则找到 dfs 序最小的节点，也就是根。 1int findrt(int x)&#123;access(x),splay(x);while(son[x][0])x=son[x][0];splay(x);return x;&#125; 注意，上面的代码中如果不在找到根后 splay 复杂度是假的。 link link 操作将两个连通块进行连边。 若要在连边之前判断两者是否已经联通，可以将一个节点变成根，查找另一个节点的根进行判断。 一般连边是将一个节点变成另一个节点的虚儿子，也就是连虚边。这种方式适用于虚儿子贡献较为简单计算的情况。设这两个节点为 x 和 y，我们将 y makert ，将 x splay，然后将 y 的 fa 改成 x 即可。（如果要统计子树信息的话，将两个节点都改为根，然后连边时顺便统计字数贡献） 当然也可以直接连成实边。 1234void link(int x,int y)&#123; makert(x); if(findrt(y)!=x) fa[x]=y;&#125; 12345inline void link(int x,int y)&#123; splay(x);fa[x]=y; access(y),splay(y); son[y][1]=x;pushup(y);&#125; cut cut 操作将两个点间进行删边。 若要判断两个点原先是否有边相连，先将一个节点设成根然后判断连通性，再判断两点间的 dfs 序是否连续。 然后直接将上面节点的儿子和下面节点的父亲设为 0 即可。别忘了更新信息。 1234inline void cut(int x,int y)&#123; makert(x); if(findrt(y)==x and fa[y]==x and !son[y][0]) rs=fa[y]=0,pushup(x);&#125; 模板 维护链上最大值。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152struct LCT&#123; #define ls son[x][0] #define rs son[x][1] int tag[maxm],fa[maxm],st[maxm],mx[maxm],id[maxm],son[maxm][2]; inline bool notrt(int x)&#123;return son[fa[x]][0]==x or son[fa[x]][1]==x;&#125; inline int getw(int x)&#123;return son[fa[x]][1]==x;&#125; inline void rev(int x)&#123;if(x)swap(ls,rs),tag[x]^=1;&#125; inline void pushup(int x)&#123; if(mx[ls]&gt;mx[rs])mx[x]=mx[ls],id[x]=id[ls]; else mx[x]=mx[rs],id[x]=id[rs]; if(val[x]&gt;mx[x])mx[x]=val[x],id[x]=x; &#125; inline void pushdown(int x)&#123;if(tag[x])tag[x]=0,rev(ls),rev(rs);&#125; inline void rotate(int x)&#123; int y=fa[x],z=fa[y],w=getw(x),s=son[x][!w]; if(notrt(y))son[z][getw(y)]=x; son[x][!w]=y;son[y][w]=s; if(s)fa[s]=y;fa[x]=z,fa[y]=x; pushup(y);pushup(x); &#125; inline void splay(int x)&#123; int y,top=1; for(y=x;notrt(st[++top]=y);y=fa[y]); while(top)pushdown(st[top--]); while(notrt(x))&#123; y=fa[x]; if(notrt(y)) rotate((getw(x)^getw(y))?x:y); rotate(x); &#125; pushup(x); &#125; inline void access(int x)&#123; for(int y=0;x;y=x,x=fa[x]) splay(x),rs=y,pushup(x); &#125; inline int findroot(int x)&#123; access(x),splay(x); while(ls)x=ls; splay(x); return x; &#125; inline void makeroot(int x)&#123;access(x),splay(x),rev(x);&#125; inline void split(int x,int y)&#123;makeroot(x);access(y),splay(y);&#125; inline void link(int x,int y)&#123;makeroot(x);if(findroot(y)!=x)fa[x]=y;&#125; inline void cut(int x,int y)&#123; makeroot(x); if(findroot(y)==x and fa[y]==x and !son[y][0]) fa[y]=rs=0,pushup(x); &#125; #undef ls #undef rs&#125;L; 进阶 维护子树信息 LCT 可以维护子树信息，但是只能做到查询而做不到修改。简单来说，维护的方式就是每次给一个 splay 添加一个虚儿子的时候，需要多开一个数据结构记录虚儿子的贡献。然后在上传的时候考虑虚儿子即可。 P4219 [BJOI2014]大融合 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int n,m; struct LCT&#123; #define ls son[x][0] #define rs son[x][1] int tag[maxn],son[maxn][2],fa[maxn],siz[maxn],siz2[maxn],st[maxn]; inline bool getw(int x)&#123;return son[fa[x]][1]==x;&#125; inline void rev(int x)&#123;if(x)tag[x]^=1,swap(ls,rs);&#125; inline void pushup(int x)&#123;siz[x]=siz[ls]+siz[rs]+siz2[x]+1;&#125; inline void pushdown(int x)&#123;if(tag[x])tag[x]=0,rev(ls),rev(rs);&#125; inline bool notrt(int x)&#123;return son[fa[x]][0]==x or son[fa[x]][1]==x;&#125; inline void rotate(int x)&#123; int y=fa[x],z=fa[y],w=getw(x),s=son[x][!w]; if(notrt(y))son[z][getw(y)]=x;son[y][w]=s;son[x][!w]=y; if(s)fa[s]=y;fa[y]=x,fa[x]=z; pushup(y); &#125; inline void splay(int x)&#123; int y;int top=0; for(y=x;notrt(st[top++]=y);y=fa[y]); while(top--)pushdown(st[top]); while(notrt(x))&#123; y=fa[x]; if(notrt(y)) rotate(getw(x)^getw(y)?x:y); rotate(x); &#125; pushup(x); &#125; inline void access(int x)&#123;for(int y=0;x;y=x,x=fa[x])splay(x),siz2[x]+=siz[rs]-siz[y],rs=y,pushup(x);&#125; inline void makert(int x)&#123;access(x),splay(x),rev(x);&#125; inline int findrt(int x)&#123;access(x),splay(x);while(ls)x=ls;splay(x);return x;&#125; inline void split(int x,int y)&#123;makert(x);access(y),splay(y);&#125; inline void link(int x,int y)&#123;makert(x);if(findrt(y)!=x)fa[x]=y,siz2[y]+=siz[x],splay(y);&#125; inline void cut(int x,int y)&#123; makert(x); if(findrt(y)==x and fa[y]==x and !son[y][0]) rs=fa[y]=0,pushup(x); &#125; #undef ls #undef rs &#125;L; inline void work()&#123; n=read(),m=read(); int x,y; while(m--)&#123; char c=getchar(); while(!isalpha(c))c=getchar(); if(c==&#x27;A&#x27;)L.link(read(),read()); else L.split(x=read(),y=read()),printf(&quot;%lld\\n&quot;,1ll*(L.siz2[x]+1)*(L.siz2[y]+1)); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 动态求LCA LCT 本来就是动态的，如何求两个点的 LCA 呢？ 将其中一个点 access ，然后将另外一个点 access ，并记录最后一次 splay 前找到的节点（即最后的代码中的y） 利用LCT的结构 LCT 是一种优秀的暴力，它的结构有时候可以帮我们做一些很强的题目（虽然一般都想不到这个模型） P3703 [SDOI2017]树点涂色 思路：观察操作，有“将一个点到根节点的路径染成同一种新的颜色”，发现同一颜色的连通块都是一条链，那么我们很快想到 LCT 的模型。维护的答案是该节点到根的 splay 个数。那么我们在改变 access 的时候，即改变儿子虚实的时候，需要将虚儿子子树内所有节点的答案都增加，将实儿子子树内所有节点都减少，这个可以用线段树进行维护。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int n,m; int dfn[maxn],dep[maxn],id[maxn],fa[maxn],son[maxn],siz[maxn],top[maxn]; int ecnt,head[maxn],nxt[maxn&lt;&lt;1],to[maxn&lt;&lt;1]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt; &#125; void dfs1(int x,int f)&#123; fa[x]=f,dep[x]=dep[f]+1,siz[x]=1; for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=f)&#123; dfs1(u,x); siz[x]+=siz[u]; if(siz[u]&gt;siz[son[x]]) son[x]=u; &#125; &#125; void dfs2(int x,int topf)&#123; top[x]=topf;dfn[x]=++dfn[0],id[dfn[0]]=x; if(!son[x])return; dfs2(son[x],topf); for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa[x] and u!=son[x]) dfs2(u,u); &#125; inline int LCA(int x,int y)&#123; while(top[x]!=top[y]) if(dep[top[x]]&gt;dep[top[y]]) x=fa[top[x]]; else y=fa[top[y]]; return dep[x]&lt;dep[y]?x:y; &#125; struct SegmentTree&#123; #define ls (ro&lt;&lt;1) #define rs (ro&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) int mx[maxn&lt;&lt;2],tag[maxn&lt;&lt;2]; inline void pushup(const int &amp;ro)&#123;mx[ro]=max(mx[ls],mx[rs]);&#125; inline void pushdown(const int &amp;ro)&#123;tag[ls]+=tag[ro],tag[rs]+=tag[ro];mx[ls]+=tag[ro],mx[rs]+=tag[ro];tag[ro]=0;&#125; void build(const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(l==r)return mx[ro]=dep[id[l]],tag[ro]=0,void(); build(ls,l,mid),build(rs,mid+1,r); pushup(ro); &#125; void update(const int &amp;x,const int &amp;y,const int &amp;k,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(x==l and y==r) return tag[ro]+=k,mx[ro]+=k,void(); if(tag[ro])pushdown(ro); if(y&lt;=mid) update(x,y,k,ls,l,mid); else if(x&gt;mid) update(x,y,k,rs,mid+1,r); else update(x,mid,k,ls,l,mid),update(mid+1,y,k,rs,mid+1,r); pushup(ro); &#125; int query(const int &amp;x,const int &amp;y,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(x==l and y==r)return mx[ro]; if(tag[ro])pushdown(ro); if(y&lt;=mid) return query(x,y,ls,l,mid); if(x&gt;mid) return query(x,y,rs,mid+1,r); return max(query(x,mid,ls,l,mid),query(mid+1,y,rs,mid+1,r)); &#125; #undef ls #undef rs #undef mid &#125;T; struct LCT&#123; #define ls son[x][0] #define rs son[x][1] int son[maxn][2],fa[maxn]; inline bool notrt(int x)&#123;return son[fa[x]][0]==x or son[fa[x]][1]==x;&#125; inline int getw(int x)&#123;return son[fa[x]][1]==x;&#125; inline void rotate(int x)&#123; int y=fa[x],z=fa[y],w=getw(x),s=son[x][!w]; if(notrt(y)) son[z][getw(y)]=x;son[y][w]=s,son[x][!w]=y; if(s) fa[s]=y;fa[y]=x,fa[x]=z; &#125; inline void splay(int x)&#123; while(notrt(x))&#123; int y=fa[x]; if(notrt(y))rotate(getw(x)^getw(y)?x:y); rotate(x); &#125; &#125; inline int findrt(int x)&#123;while(ls)x=ls;return x;&#125; inline void access(int x)&#123; for(int u,y=0;x;y=x,x=fa[x])&#123; splay(x); if(rs) u=findrt(rs),T.update(dfn[u],dfn[u]+siz[u]-1,1); if(rs=y) u=findrt(rs),T.update(dfn[u],dfn[u]+siz[u]-1,-1); &#125; &#125; #undef ls #undef rs &#125;S; inline void work()&#123; n=read(),m=read(); for(int i=1;i&lt;n;i++) addedge(read(),read()); dfs1(1,0);dfs2(1,1); for(int i=1;i&lt;=n;i++) S.fa[i]=fa[i]; T.build(); while(m--) switch(read())&#123; case 1:S.access(read());break; case 2:&#123; int x=read(),y=read(),lca=LCA(x,y); printf(&quot;%d\\n&quot;,T.query(dfn[x],dfn[x])+T.query(dfn[y],dfn[y])-2*T.query(dfn[lca],dfn[lca])+1); break; &#125; case 3:&#123; int x=read(); printf(&quot;%d\\n&quot;,T.query(dfn[x],dfn[x]+siz[x]-1)); &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; P6292 区间本质不同子串个数也用到了这个 trick。 更多trick 待耕。","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"P1040 加分二叉树","slug":"P1040 加分二叉树","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:50:55.241Z","comments":true,"path":"2022/04/30/P1040 加分二叉树/","permalink":"https://starcried.github.io/2022/04/30/P1040%20%E5%8A%A0%E5%88%86%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"P1040 加分二叉树 \\(n\\) 很小，可以树形 dp 或者区间 dp 。 设 f[i][j] 为从 \\(i\\) 到 \\(j\\) 的最大加分值，则有 f[i][j]=max(f[i][k-1]*f[k+1][j]+f[k][k])。 有一个小技巧，将 f[i][i-1] 全部设置为 1，这样的话搜索到叶子就也可以按照通式 dp 了。 对于输出前序遍历（根，左树，右树）我们再树形 dp 一下就行了。 树形 dp 比较清晰明了（但是耗内存）。不想写树形 dp 的话递推式如上。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;inline int read()&#123; int x=0,w=1;char c=getchar(); while(!isdigit(c))&#123; if(c==&#x27;-&#x27;)w=-1; c=getchar(); &#125; while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return x*w;&#125;const int maxn=35;int n;int f[maxn][maxn],a[maxn],ro[maxn][maxn];int search(int l,int r)&#123; if(l&gt;r)return 1; if(l==r)&#123;ro[l][r]=l;return f[l][r];&#125; if(f[l][r])return f[l][r]; for(int w,i=l;i&lt;=r;i++) &#123; w=search(l,i-1)*search(i+1,r)+f[i][i]; if(w&gt;f[l][r])f[l][r]=w,ro[l][r]=i; &#125; return f[l][r];&#125;void print(int l,int r)&#123; if(l&gt;r)return ; printf(&quot;%d &quot;,ro[l][r]); print(l,ro[l][r]-1); print(ro[l][r]+1,r);&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;i++)f[i][i]=read(); search(1,n); printf(&quot;%d\\n&quot;,f[1][n]); print(1,n);//发扬先辈遗德，恢弘志士之气 return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"P1414 又是毕业季II","slug":"P1414 又是毕业季II","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:23:44.219Z","comments":true,"path":"2022/04/30/P1414 又是毕业季II/","permalink":"https://starcried.github.io/2022/04/30/P1414%20%E5%8F%88%E6%98%AF%E6%AF%95%E4%B8%9A%E5%AD%A3II/","excerpt":"","text":"P1414 又是毕业季II 数论题，主要在于推演。 洛谷的《又是毕业季I》更好玩 发现对于所有的同学的能力值，只要我们选出每个数的所有因子并记录所有同学所有因子出现的次数，就可以得到一个 \\(c\\) 数组为所有因子出现的次数。 因为让输出 \\(1\\sim n\\) 所有的值，而且因子数 c[k-1]&gt;=c[k]，我们就一定可以从因子数最高的 \\(c\\) 向下遍历到 c[i] 更高的位置，即最大公约数i向下递减，当第一次发现 c[i]&gt;=i，那么就肯定存在 &gt;=i 个数的因子是 i，符合题意。 数论真有意思。 123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;int c[1000005],n;int main()&#123; int t=0; std::ios::sync_with_stdio(false); cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; int x; cin&gt;&gt;x; t=max(t,x); int m=sqrt(x); for(int j=1;j&lt;=m;j++) if(!(x%j)) &#123; c[j]++; if(x!=j*j)c[x/j]++; &#125; &#125; for(int i=1;i&lt;=n;i++) &#123; while(c[t]&lt;i)t--; cout&lt;&lt;t&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"P1447 能量采集","slug":"P1447 能量采集","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:25:09.308Z","comments":true,"path":"2022/04/30/P1447 能量采集/","permalink":"https://starcried.github.io/2022/04/30/P1447%20%E8%83%BD%E9%87%8F%E9%87%87%E9%9B%86/","excerpt":"","text":"P1447能量采集 定义:(i,j)表示处于(i,j)的植物的贡献 我们发现，点(i,j)与(0,0)的连线所过整点的数目为\\(\\gcd(i,j)\\) 发现要是想记录每个点的答案并不好算。那么怎么好算呢？ 我们来找一找同一直线上的所有点答案的和的关系。先不考虑答案只考虑个数。发现，寻找一个点及其倍数的个数的和更加好算。而且，因为有n和m的限制，那么向下取整的答案一定就是其本身。考虑容斥，我们只需要从大往小更新答案并将答案乘2减1加起来即可。 那么对于一个点及其倍数的答案怎么计算呢？ 假设n小于m，那么对于一个小于n的数i，显然它的倍数的个数就是\\((n/i)*(m/i)\\)，这样一来我们只需要考虑小于n的所有数的个数就能够统计n*m的所有数的答案了。至于为什么\\((m-n) * m\\)这一块不用考虑，是因为这里不会再有数容斥它们了，直接统计就行。 所以，答案即为 \\[\\displaystyle \\sum_{i=1}^{n}num_i*(i*2-1)\\] 其中\\(\\displaystyle num_i=(n/i)*(m/i)-\\sum_{i=2}^{n/i}num_i\\) 在代码中一个倒序循环即可，时间复杂度线性。 1234567891011121314151617181920212223242526#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#define int long long using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=1e5+10;int ans[maxn];signed main()&#123; int n=read(),m=read(),Ans=0; if(n&gt;m)swap(n,m); for(int i=n;i;i--)&#123; ans[i]=(n/i)*(m/i); for(int j=2;j&lt;=n/i;j++)ans[i]-=ans[i*j]; Ans+=(ans[i]*(i*2-1)); &#125; printf(&quot;%lld&quot;,Ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"}]},{"title":"P1880 [NOI1995] 石子合并","slug":"P1880 [NOI1995] 石子合并","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T08:39:40.225Z","comments":true,"path":"2022/04/30/P1880 [NOI1995] 石子合并/","permalink":"https://starcried.github.io/2022/04/30/P1880%20[NOI1995]%20%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/","excerpt":"","text":"P1880 [NOI1995] 石子合并 一道区间dp题目。 用 d[i][j] 表示从 i 到 j 的最大/最小得分，那么依次枚举长度 len，坐标 i 和 j，三层循环就可以 dp递推求得最值了。 （如果没有环的话） 不要着急，我们将序列复制一遍接到后面做一遍即可。 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;ctype.h&gt;#define INF 0x3f3f3f3fusing namespace std;inline int read()&#123; int x=0,w=1;char c=getchar(); while(!isdigit(c))&#123; if(c==&#x27;-&#x27;)w=-1; c=getchar(); &#125; while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return x*w;&#125;const int maxn=105*2;int a[maxn],sum[maxn],d[maxn][maxn],d2[maxn][maxn];int main()&#123; int n=read(); for(int i=1;i&lt;=n;i++)a[i]=a[i+n]=read(); for(int i=1;i&lt;=(n+n);i++)sum[i]=sum[i-1]+a[i];//前缀和 for(int len=2;len&lt;=n;len++) for(int i=1,j=i+len-1;i&lt;n+n and j&lt;n+n ;i++,j=i+len-1) &#123; d[i][j]=INF; for(int k=i;k&lt;j;k++) &#123; if(d[i][j]&gt;d[i][k]+d[k+1][j]+sum[j]-sum[i-1]) d[i][j]=d[i][k]+d[k+1][j]+sum[j]-sum[i-1]; if(d2[i][j]&lt;d2[i][k]+d2[k+1][j]+sum[j]-sum[i-1]) d2[i][j]=d2[i][k]+d2[k+1][j]+sum[j]-sum[i-1]; &#125; &#125; int ans1=INF,ans2=0; for(int i=1;i&lt;=n;i++)ans1=min(ans1,d[i][i+n-1]),ans2=max(ans2,d2[i][i+n-1]); printf(&quot;%d\\n%d\\n&quot;,ans1,ans2); return 0; &#125; 如果数据再大一点的话，需要用到平行四边形优化。 扩展：这道题的数据范围是 \\(n\\leq 100\\) ,而我们给它还扩充到了 \\(n\\leq 200\\)。那么如果n更大呢？比如 \\(n\\leq 40000\\)？ 这里有一道题目P5569 [SDOI2008] 石子合并 是的我们没法再用 40000*40000 的 DP 做了。 有兴趣可以去看题解。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"}]},{"title":"P1903 数颜色 维护队列","slug":"P1903 数颜色 维护队列","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.504Z","comments":true,"path":"2022/04/30/P1903 数颜色 维护队列/","permalink":"https://starcried.github.io/2022/04/30/P1903%20%E6%95%B0%E9%A2%9C%E8%89%B2%20%E7%BB%B4%E6%8A%A4%E9%98%9F%E5%88%97/","excerpt":"","text":"莫队算法的待修版本，增加一个时间的维度进行分块。 P1903 [国家集训队] 数颜色 / 维护队列 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;using namespace std;typedef long long ll;ll const MAXN = 1000010;struct x &#123; ll where, val;&#125; xiu[MAXN];struct c &#123; ll l, r, pre, id;&#125; cha[MAXN];ll xiugai = 0, chaxun = 0, N, M, a[MAXN], kuai[MAXN];ll color[MAXN], ans, ooo[MAXN];bool st(c, c);void read(ll &amp;x);int main() &#123; read(N);read(M); ll tem = pow(N, 0.75); for (ll i = 1; i &lt;= N; i++) &#123; read(a[i]); kuai[i] = (i-1)/tem+1; &#125; for (ll i = 1; i &lt;= M; i++) &#123; char opt[5]; scanf(&quot;%s&quot;, opt); if (opt[0] == &#x27;Q&#x27;) &#123; chaxun++; read(cha[chaxun].l);read(cha[chaxun].r); cha[chaxun].id = chaxun; cha[chaxun].pre = xiugai; &#125; else &#123; ++xiugai; read(xiu[xiugai].where);read(xiu[xiugai].val); &#125; &#125; sort(cha+1, cha+chaxun+1, st); ll l = 1, r = 0, now = 0; for (ll i = 1; i &lt;= chaxun; i++) &#123; while (cha[i].l &lt; l) &#123; //ope(l-1, 1); ans += (++color[a[l-1]]) == 1; l--; &#125; while (cha[i].l &gt; l) &#123; //ope(l, -1); ans -= (--color[a[l]] == 0); l++; &#125; while (cha[i].r &lt; r) &#123; //ope(r, -1); ans -= (--color[a[r]] == 0); r--; &#125; while (cha[i].r &gt; r) &#123; //ope(r+1, 1); ans += (++color[a[r+1]] == 1); r++; &#125; while (now &lt; cha[i].pre) &#123; now++; if (xiu[now].where &gt;= cha[i].l &amp;&amp; xiu[now].where &lt;= cha[i].r) &#123; if (--color[a[xiu[now].where]] == 0) ans--; if (++color[xiu[now].val] == 1) ans++; &#125; swap(a[xiu[now].where], xiu[now].val); &#125; while (now &gt; cha[i].pre) &#123; if (xiu[now].where &gt;= cha[i].l &amp;&amp; xiu[now].where &lt;= cha[i].r) &#123; if (--color[a[xiu[now].where]] == 0) ans--; if (++color[xiu[now].val] == 1) ans++; &#125; swap(a[xiu[now].where], xiu[now].val); now--; &#125; ooo[cha[i].id] = ans; &#125; for (ll i = 1; i &lt;= chaxun; i++) &#123; printf(&quot;%lld\\n&quot;, ooo[i]); &#125; return 0;&#125;bool st(c a, c b) &#123; return (kuai[a.l] ^ kuai[b.l]) ? kuai[a.l] &lt; kuai[b.l] : ((kuai[a.r] ^ kuai[b.r]) ? kuai[a.r] &lt; kuai[b.r] : a.pre &lt; b.pre);&#125; void read(ll &amp;x) &#123; char s = getchar(); x = 0; while (s &lt; &#x27;0&#x27; || s &gt; &#x27;9&#x27;) &#123; s = getchar(); &#125; while (s &gt;= &#x27;0&#x27; &amp;&amp; s &lt;= &#x27;9&#x27;) &#123; x = 10 * x + (s - &#x27;0&#x27;); s = getchar(); &#125;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"分块","slug":"分块","permalink":"https://starcried.github.io/tags/%E5%88%86%E5%9D%97/"}]},{"title":"P2014 选课","slug":"P2014 选课","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:32:18.508Z","comments":true,"path":"2022/04/30/P2014 选课/","permalink":"https://starcried.github.io/2022/04/30/P2014%20%E9%80%89%E8%AF%BE/","excerpt":"","text":"洛谷P2014选课 一道树形DP题。 f[i][j] 表示i个点选j门课程的最大学分。 递推方程： 1234for(int a=n;a&gt;0;a--)//总共选择多少 for(int b=0;b&lt;a;b++)//分别选择多少(b,a-b) f[x][a]=max(f[x][a],f[x][a-b]+f[u][b]);//都不遍历0的原因是f[i][0]无论怎样都是0 我们可以证明在 \\(j\\leq m\\)时值都是正确的，剩下的不用管啦么的时间！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;ctype.h&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=305;inline int read()&#123; int x,w=1;char c=getchar(); while(!isdigit(c))c=getchar(); if(c==&#x27;-&#x27;)w=-1,c=getchar(); x=c-&#x27;0&#x27;;c=getchar(); while(isdigit(c))x=x*10+c-&#x27;0&#x27;,c=getchar(); return x*w;&#125;int n,m;int f[maxn][maxn];vector &lt;int&gt;son[maxn];void dfs(int x)&#123; f[x][0]=0; for(int i=0;i&lt;son[x].size();i++) &#123; int u=son[x][i]; dfs(u); for(int a=n;a&gt;0;a--) for(int b=0;b&lt;a;b++) f[x][a]=max(f[x][a],f[x][a-b]+f[u][b]); &#125;&#125;int main()&#123; n=read(),m=read()+1; for(int i=1;i&lt;=n;i++)&#123; son[read()].push_back(i); f[i][1]=read(); &#125; f[0][0]=f[0][1]=0; n++; dfs(0); printf(&quot;%d\\n&quot;,f[0][m]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"P2476-记忆化搜索","slug":"P2476-记忆化搜索","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:46:36.434Z","comments":true,"path":"2022/04/30/P2476-记忆化搜索/","permalink":"https://starcried.github.io/2022/04/30/P2476-%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/","excerpt":"","text":"P2476-记忆化搜索 DP? 我们看看，这个状态似乎有亿点点多。我们看看数据范围，数量不超过5，颜色数不超过15. 15维DP显然不靠谱。 那么我们就思考一下……状态个数？发现记忆化搜索可ac： 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;typedef long long ll;using namespace std;const ll maxn=16,mod=1e9+7;ll f[maxn][maxn][maxn][maxn][maxn][6],b[6];ll dfs(ll a,ll b,ll c,ll d,ll e,ll last)&#123; if(f[a][b][c][d][e][last]!=-1)return f[a][b][c][d][e][last]; if(a+b+c+d+e==0)return 1; ll ans=0; if(a)ans+=(a-(last==2))*dfs(a-1,b,c,d,e,1); if(b)ans+=(b-(last==3))*dfs(a+1,b-1,c,d,e,2); if(c)ans+=(c-(last==4))*dfs(a,b+1,c-1,d,e,3); if(d)ans+=(d-(last==5))*dfs(a,b,c+1,d-1,e,4); if(e)ans+=e*dfs(a,b,c,d+1,e-1,5); ans%=mod; f[a][b][c][d][e][last]=ans; return ans;&#125;int main()&#123; memset(f,-1,sizeof f); int k; scanf(&quot;%d&quot;,&amp;k); for(int a,i=1;i&lt;=k;i++)scanf(&quot;%d&quot;,&amp;a),b[a]++; printf(&quot;%lld&quot;,dfs(b[1],b[2],b[3],b[4],b[5],0)); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"搜索","slug":"搜索","permalink":"https://starcried.github.io/tags/%E6%90%9C%E7%B4%A2/"}]},{"title":"P2375 [NOI2014]动物园","slug":"P2375 [NOI2014]动物园","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:35:49.919Z","comments":true,"path":"2022/04/30/P2375 [NOI2014]动物园/","permalink":"https://starcried.github.io/2022/04/30/P2375%20[NOI2014]%E5%8A%A8%E7%89%A9%E5%9B%AD/","excerpt":"","text":"P2375 [NOI2014]动物园 我竟然会做NOI的题目辣(≧▽≦)/（看的题解 总而言之，这是一道简单的KMP问题。题面简直是给没学过KMP的人看的（比如我）。 我们发现，这个所谓的 num 数组和 nxt 有异曲同工之妙。但是我们对于不能重合这一块有一点问号。那我们先不管重不重合，先给他记录成重合的。 于是在标记 nxt 时同时也可以把 num 标记。原理是，nxt 记录的是该字符串相同的前缀字符个数，num[i] 记录的是当前字符作为从 \\(0\\) 到 \\(i\\) 的子串内后缀与前缀相同的子串的子串的数目。我们发现，其实他就是 num[j]+1，j 就是 nxt[i]！可以举几个例子模拟一下。 这样一来查询的时候也很方便了。 问题来了，怎么去重呢？如果 j 已经到 i&lt;&lt;1 的时候，我们将 j 挪到 nxt[j] 就好了，直到 j&lt;i/2 。因为上面我们记录的 num 数组的特性，如果有重叠此时的值就相当于在 nxt[j] 的时候的没有重叠的串的 num 数。模拟一下也很好理解的。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define mod 1000000007 using namespace std;typedef long long ll;const int maxn=1e6+5;char a[maxn];int nxt[maxn],len,num[maxn];inline void getnxt()&#123; int k=-1,j=0; nxt[0]=-1; while(j&lt;len) &#123; if(k==-1 or a[j]==a[k])nxt[++j]=++k,num[j]=num[k]+1; else k=nxt[k]; &#125;&#125;inline void kmp()&#123; int j=0,i=1; ll ans=1; while(i&lt;len) &#123; if(j==-1 or a[j]==a[i])&#123; j++,i++; while((j&lt;&lt;1)&gt;=(i+1))j=nxt[j]; ans=(ans*(ll)(num[j]+1))%mod; &#125; else j=nxt[j]; &#125; printf(&quot;%lld\\n&quot;,ans);&#125;int main()&#123; int t; scanf(&quot;%d&quot;,&amp;t); while(t--) &#123; scanf(&quot;%s&quot;,&amp;a); len=strlen(a); memset(nxt,0,sizeof nxt); num[0]=0,num[1]=1; getnxt(); kmp(); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"字符串","slug":"字符串","permalink":"https://starcried.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"P2490 [SDOI2011]黑白棋","slug":"P2490 [SDOI2011]黑白棋","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:47:01.873Z","comments":true,"path":"2022/04/30/P2490 [SDOI2011]黑白棋/","permalink":"https://starcried.github.io/2022/04/30/P2490%20[SDOI2011]%E9%BB%91%E7%99%BD%E6%A3%8B/","excerpt":"","text":"P2490 [SDOI2011]黑白棋 题意 一个 \\(1*n\\) 的棋盘上，A 可以移动白色棋子，B 可以移动黑色的棋子，其中白色不能往左，黑色不能往右。他们每次操作可以移动 1 到 \\(d\\) 个棋子。 每当移动某一个棋子时，这个棋子不能跨越两边的棋子，当然也不可以出界。当谁不可以操作时，谁就失败了。 思路 显然可以将题意转化为一种 K-Nim 游戏，即在 \\(\\frac k2\\) 堆石子中，每次可将 \\(d\\) 堆石子取任意个，令对手无路可走时获胜。 用总方案数减去先手必败的方案数即为答案，因为先手必败方案更加好算。 K-Nim 游戏 结论 设 \\(r_i\\) 为二进制第 \\(i\\) 位所有数该位为 1 的个数 \\(\\pmod {d+1}\\) 的值，那么只用一步即可在 “\\(r\\) 全为 0” 和 “\\(r\\) 不全为 0” 两种状态间转移。 感性证明 考虑一个大小不超过 \\(d\\) 的集合，为我们一次操作需要拿走的石子堆的集合，选 0 或 1 都是合法的。 假设我们现在已经有这样一个大小为 \\(d\\) 的集合，其中有 \\(x\\) 个 1，\\(y\\) 个 0，即 \\(x+y=d\\)。我们要让 \\(r\\) 等于零，分以下情况： \\(x\\ge r\\) 则选择 \\(r\\) 个 1 变为 0 即可。 \\(x&lt;r\\) 则 \\(y+r\\ge d+1\\) ，则选择 \\(d-r+1\\) 个 0 变为 1 即可。 所以一定有一种方法使这一位的 \\(r\\) 变成 0. 现在我们并没有一个可以随便转换的集合，但是当一个数的高位从 1 变为 0 之后低位就可以随便选 0 和 1.所以我们从高位向低位考虑，如果一直符合第二个情况就向下考虑，否则就是第一个情况，并且在这种情况下把 1 变成 0 是合法的，那么我们扩大集合即可。 得证。 在上述博弈中，所有 \\(r\\) 为 0 的状态是必败态。我们只需要算所有这种情况的方案就可以了。 考虑 Dp。设 \\(f_{ij}\\) 为前 \\(i\\) 位的 \\(r\\) 均为 0，总共 \\(j\\) 个石子的方案数。 新选一位，枚举在 \\(d+1\\) 堆石子中放入若干次石子。即 \\[ f_{i+1,j+2^ix(d+1)}+=f_{i,j}\\binom{\\frac k2}{x*(d+1)} \\] 最后统计答案需要枚举每一堆的起点位置，即在原题中的白棋的位置，答案为所有位的 \\[ f_{i,j}\\binom{n-j-\\frac k2}{\\frac k2} \\] 的和。 代码 123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=10005,mod=1e9+7; int n,k,d,C[maxn][205],f[18][100005]; inline void work()&#123; n=read(),k=read(),d=read(); C[0][0]=1; for(int i=1;i&lt;=n;i++)&#123; C[i][0]=1; for(int j=1;j&lt;=200;j++) C[i][j]=(C[i-1][j-1]+C[i-1][j])%mod; &#125; f[0][0]=1; for(int i=0;i&lt;=16;i++) for(int j=0;j&lt;=n-k;j++) for(int x=0;(1ll&lt;&lt;i)*x*(d+1)&lt;=n-k and x*(d+1)&lt;=k/2;x++) f[i+1][j+(1ll&lt;&lt;i)*x*(d+1)]=(f[i+1][j+(1ll&lt;&lt;i)*x*(d+1)]+1ll*f[i][j]*C[k/2][x*(d+1)])%mod; int ans=0; for(int i=0;i&lt;=n-k;i++) ans=(ans+1ll*f[17][i]*C[n-i-k/2][k/2])%mod; printf(&quot;%d\\n&quot;,(C[n][k]-ans+mod)%mod); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"博弈论","slug":"博弈论","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"}]},{"title":"P2491 消防 P1099 树网的核","slug":"P2491 消防 P1099 树网的核","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:49:55.109Z","comments":true,"path":"2022/04/30/P2491 消防 P1099 树网的核/","permalink":"https://starcried.github.io/2022/04/30/P2491%20%E6%B6%88%E9%98%B2%20P1099%20%E6%A0%91%E7%BD%91%E7%9A%84%E6%A0%B8/","excerpt":"","text":"P2491 消防/P1099 树网的核 双倍经验，双倍快乐。 题意 在一个树上选择一段总长度不超过\\(s\\)的链使所有点到该链距离的最大值最小。 输出这个最小的值。 做法 Define:以下\\(s\\)指链或链长。 证明一下\\(s\\)一定处于直径上。假设它不在直径上，一定存在直径的其中一个端点到\\(s\\)的距离大于现在所处支链的最大距离。所以\\(s\\)不在直径上一定不优。 于是我们找到直径并记录下直径上的所有点。 然后，我们枚举直径上的每一个长度小于\\(s\\)的最长区间（最长原因显然，因为长度越短答案肯定不会更优），并计算此时的答案，对于每一个区间的答案取min即可。 考虑计算每个区间的答案。我们把直径拉出来，用两个指针\\(l\\)和\\(r\\)从左向右遍历这个直径，\\(s\\)即为\\(l\\)到\\(r\\)。考虑此时这个区间的答案即为\\(l\\)到\\(r\\)中每个点\\(i\\)的子树中最深的点的距离（我们设为\\(h_i\\)）（注意这里的子树是不包括直径的，即子树中所有的点都属于支链）和\\(l\\)到直径左端点的距离（设为\\(ls\\)）和\\(r\\)到直径右端点的距离（设为\\(rt\\)）的最大值。原因显然。 那么我们可以预处理出\\(h_i\\)，并在遍历直径的时候用单调队列维护\\(h\\)的最大值，然后用这个值与\\(ls\\)和\\(rt\\)的最大值更新答案（取最小值）即可。 一些疑问 当存在多条直径时，区间似乎一定包括重心并尽量使重心居中。然而这并没有什么卵用，并且一样可以用上面的方法做，不会造成影响。 \\(s\\)的左右两端一定在端点上。既是，\\(s\\)是可以为一个点的。 具体实现和代码 求直径时两次DFS即可。然后发现记录的d数组刚好可以用来当做前缀和（只是使代码略显凌乱罢了） 单调队列似乎要特殊记录一下链首的位置而不能用head代替，否则无法记录区间长（或者只是我没有想到更好的处理方法） 求深度DFS或BFS. 时间复杂度 \\(O(n)\\). （学会了一个新单词diameter，意思是直径，重音在|a|上） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=3e5+10; int n,l; int ecnt,head[maxn],nxt[maxn&lt;&lt;1],to[maxn&lt;&lt;1],dis[maxn&lt;&lt;1]; inline void addedge(int a,int b,int c)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;dis[ecnt]=c; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;dis[ecnt]=c; &#125; int d[maxn],mx,fa[maxn],diam[maxn],tot,sum; void dfs1(int x,int f,int &amp;dia)&#123; fa[x]=f; if(mx&lt;d[x]) mx=d[x],dia=x; for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==f)continue; d[u]=d[x]+dis[i]; dfs1(u,x,dia); &#125; &#125; inline void diameter()&#123; int dia,dia2; dfs1(1,0,dia); mx=0;d[dia]=0; dfs1(dia,0,dia2); while(dia2!=dia)&#123; diam[++tot]=dia2; dia2=fa[dia2]; &#125; diam[++tot]=dia; &#125; int h[maxn],dep[maxn],q[maxn],ans=0x3f3f3f3f; void dfs2(int x,int f)&#123; for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==f)continue; dfs2(u,x); dep[x]=max(dep[x],dep[u]+dis[i]); &#125; &#125; inline void solve()&#123; for(int i=2;i&lt;tot;i++)&#123; int x=diam[i]; h[i]=0;dep[x]=0; for(int j=head[x];j;j=nxt[j])&#123; int u=to[j]; if(u==diam[i-1] or u==diam[i+1])continue; dfs2(u,x); h[i]=max(h[i],dep[u]+dis[j]); &#125; &#125; int s=1,t=0,ls=0,rt=mx,from=1; for(int i=1;i&lt;=tot;i++)&#123; while(s&lt;=t and d[diam[from]]-d[diam[i]]&gt;l)from++,s+=(from&gt;q[s]),ls=(mx-d[diam[from]]); while(s&lt;=t and h[i]&gt;h[q[t]])t--; q[++t]=i;rt=d[diam[i]]; ans=min(ans,max(h[q[s]],max(ls,rt))); &#125; printf(&quot;%d&quot;,ans); &#125; inline void work()&#123; n=read(),l=read(); for(int a,b,c,i=1;i&lt;n;i++)a=read(),b=read(),c=read(),addedge(a,b,c); diameter(); solve(); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"P3203 弹飞绵羊-分块","slug":"P3203 弹飞绵羊-分块","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:50:21.945Z","comments":true,"path":"2022/04/30/P3203 弹飞绵羊-分块/","permalink":"https://starcried.github.io/2022/04/30/P3203%20%E5%BC%B9%E9%A3%9E%E7%BB%B5%E7%BE%8A-%E5%88%86%E5%9D%97/","excerpt":"","text":"P3203 弹飞绵羊-分块 观察数据范围，发现可以分块。只需要处理每个点跳出所在块后的位置和次数即可。目的是为了加速查询并降低修改复杂度。 对于修改，重构整个块内信息即可。 时间复杂度正确的一批 具体实现也挺简单。注意重构时从后往前贡献即可。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e5+10; int n,N,out[maxn],cos[maxn],a[maxn],belong[maxn],l[maxn],r[maxn]; void sudo(int l,int r)&#123;for(int i=r;i&gt;=l;i--)if(i+a[i]&gt;n or belong[i+a[i]]!=belong[i])out[i]=i+a[i],cos[i]=1;else out[i]=out[i+a[i]],cos[i]=1+cos[i+a[i]];&#125; inline void work()&#123; n=read(); N=sqrt(n); for(int i=1;i&lt;=n;i++) belong[i]=(i-1)/N+1; for(int i=1;i&lt;=n;i++)&#123; if(!l[belong[i]])l[belong[i]]=i; r[belong[i]]=i; &#125; for(int i=1;i&lt;=n;i++)a[i]=read(); sudo(1,n); int q=read(); while(q--)&#123; if(read()==1)&#123; int sum=0,pos=read()+1; while(pos&lt;=n)sum+=cos[pos],pos=out[pos]; printf(&quot;%d\\n&quot;,sum); &#125;else&#123; int pos=read()+1; a[pos]=read(); sudo(l[belong[pos]],r[belong[pos]]); &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 那我要是想知道最后弹飞前的点在哪呢？ 我们只需要在重构的时候记录一下从哪来的就好了。 双倍经验：CF13E 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e5+10; int n,N,out[maxn],last[maxn],cos[maxn],a[maxn],belong[maxn],l[maxn],r[maxn]; void sudo(int l,int r)&#123;for(int i=r;i&gt;=l;i--)if(i+a[i]&gt;min(n,r))out[i]=i+a[i],last[i]=i,cos[i]=1;else out[i]=out[i+a[i]],last[i]=last[i+a[i]],cos[i]=1+cos[i+a[i]];&#125; inline void work()&#123; n=read(); int q=read(); N=sqrt(n); for(int i=1;i&lt;=n;i++) belong[i]=(i-1)/N+1; for(int i=1;i&lt;=n;i++)&#123; if(!l[belong[i]])l[belong[i]]=i; r[belong[i]]=i; &#125; for(int i=1;i&lt;=n;i++)a[i]=read(); for(int i=1;i&lt;=belong[n];i++)sudo(l[i],r[i]); while(q--)&#123; if(read()==1)&#123; int sum,pos,lpos; sum=0,pos=lpos=read(); while(pos&lt;=n)sum+=cos[pos],lpos=last[pos],pos=out[pos]; printf(&quot;%d %d\\n&quot;,lpos,sum); &#125;else&#123; int pos=read(); a[pos]=read(); sudo(l[belong[pos]],r[belong[pos]]); &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"分块","slug":"分块","permalink":"https://starcried.github.io/tags/%E5%88%86%E5%9D%97/"}]},{"title":"P3214 [HNOI2011]卡农","slug":"P3214 [HNOI2011]卡农","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:14:07.898Z","comments":true,"path":"2022/04/30/P3214 [HNOI2011]卡农/","permalink":"https://starcried.github.io/2022/04/30/P3214%20[HNOI2011]%E5%8D%A1%E5%86%9C/","excerpt":"","text":"P3214 [HNOI2011]卡农 题意 在集合 \\(\\{1,2,\\cdots,n\\}\\) 中选出 \\(m\\) 个非空子集满足： 不存在完全相同的两个集合； 每个元素在所有集合中出现次数之和为偶数。 思路 考虑转移，利用容斥方法进行 Dp。设 \\(f_i\\) 表示选了 \\(i\\) 个集合满足条件的方案数： 首先，如果确定了前 \\(i-1\\) 个集合，那么为了满足上面第二个限制这个位置选的集合一定是固定的。前 \\(i-1\\) 个集合的选择方案数是 \\(A_{2^n-1}^{i-1}\\)。 上面的方案中有选择了空集的方案。选择空集当且仅当前 \\(i-1\\) 个集合已经是合法方案了，即有 \\(f_{i-1}\\) 个是多计算的，减去即可。 还有选择集合相同的方案数。考虑若有相同的集合那么去掉这两个集合剩下的也是合法的，即 \\(f_{i-2}\\)。有 \\(i-1\\) 个位置和 \\(2^n-1-(i-2)\\) 种取法（减去空集和不同的 \\(i-2\\) 个集合），所以总共有 \\(f_{i-2}*(i-1)*(2^n-1-(i-2))\\) 种，减去即可。 转移式为： \\[ f_i=A_{2^n-1}^{i-1}-f_{i-1}-f_{i-2}*(i-1)*(2^n-1-(i-2)) \\] 边界条件为 \\(f_0=1\\),\\(f_1=0\\)。 实现 123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e6+10,mod=1e8+7; int n,m,pow=1,A[maxn],f[maxn]; inline int fpow(int a,int b)&#123;int ans=1;for(;b;b&gt;&gt;=1,a=1ll*a*a%mod) if(b&amp;1) ans=1ll*ans*a%mod;return ans;&#125; inline void work()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) pow=(pow&lt;&lt;1)%mod; pow=(pow-1+mod)%mod; A[0]=1;for(int i=1;i&lt;=m;i++) A[i]=1ll*A[i-1]*((pow-i+1+mod)%mod)%mod; f[0]=1,f[1]=0; for(int i=2;i&lt;=m;i++) f[i]=(A[i-1]-f[i-1]+mod-1ll*f[i-2]*(i-1)%mod*(pow-i+2+mod)%mod+mod)%mod; int res=1; for(int i=1;i&lt;=m;i++) res=1ll*res*i%mod; printf(&quot;%lld\\n&quot;,1ll*f[m]*fpow(res,mod-2)%mod); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 闲话 我搜了下，音阶的意思是从主音到主音的连续音符段，所以一个音阶是若干音符的集合（大概） 所以小余大概是把一个音符分成了一个音阶（","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"}]},{"title":"P3312 数表","slug":"P3312 数表","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:14:47.300Z","comments":true,"path":"2022/04/30/P3312 数表/","permalink":"https://starcried.github.io/2022/04/30/P3312%20%E6%95%B0%E8%A1%A8/","excerpt":"","text":"P3312 数表 题意 求出 \\[ \\sum_{i=1}^n\\sum_{j=1}^m\\sigma(\\gcd(i,j))[\\sigma(\\gcd(i,j))\\le a] \\] 其中 \\(\\sigma\\) 表示约数和。 思路/推导 考虑没有 \\(a\\) 的限制的情况。 \\[ \\begin{aligned} ans&amp;=\\sum_{d=1}^{\\min(n,m)}\\sigma(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}[\\gcd(i,j)=1]\\\\ &amp;=\\sum_{d=1}^{\\min(n,m)}\\sigma(d)\\sum_{i=1}^{\\left\\lfloor\\frac{n}{d}\\right\\rfloor}\\sum_{j=1}^{\\left\\lfloor\\frac{m}{d}\\right\\rfloor}\\sum_{p\\mid i\\land p\\mid j}\\mu(p)\\\\ &amp;=\\sum_{d=1}^{\\min(n,m)}\\sigma(d)\\sum_{p=1}^{\\left\\lfloor\\frac{\\min(n,m)}{d}\\right\\rfloor}\\mu(p)\\left\\lfloor\\frac{n}{dp}\\right\\rfloor\\left\\lfloor\\frac{m}{dp}\\right\\rfloor\\\\ &amp;=\\sum_{T=1}^{\\min(n,m)}\\sum_{d=1}^T\\sigma(d)\\mu(\\frac Td)\\left\\lfloor\\frac{n}{T}\\right\\rfloor\\left\\lfloor\\frac{m}{T}\\right\\rfloor \\end{aligned} \\] 考虑加入 \\(a\\) 的限制。将询问按照 \\(a\\) 大小离线，然后用一个树状数组维护 \\(\\sum_d\\sigma(d)\\mu(\\frac Td)\\) 的前缀和即可。 具体是将线性筛出的所有数的约数和从小到大进行排序，在从小到大查询的时候进行更新。 不会筛 \\(\\sigma\\) 的可以看我的另一篇博客 时间复杂度瓶颈在于查询，需要用到数论分块，为 \\(O(q\\sqrt n\\log n)\\)。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;utility&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10,maxm=2e4+10,N=1e5; int n,p[maxn/10],mu[maxn],tot,c[maxn],ans[maxm],g[maxn]; pair&lt;int,int&gt; f[maxn]; bool mark[maxn]; inline void insert(int x,int k)&#123;for(;x&lt;=N;x+=x&amp;-x) c[x]+=k;&#125; inline int query(int x)&#123;int ans=0;for(;x;x-=x&amp;-x) ans+=c[x];return ans;&#125; struct Query&#123; int n,m,a,id; inline bool operator &lt; (const Query&amp; zp) const &#123;return a&lt;zp.a;&#125; inline int solve()&#123; if(n&gt;m) swap(n,m); int ans=0; for(int l=1,r;l&lt;=n;l=r+1) r=min(n/(n/l),m/(m/l)),ans+=((query(r)-query(l-1))*(n/l)*(m/l)); return ans; &#125; &#125;q[maxm]; inline void work()&#123; mu[1]=1; f[1]=make_pair(1,1); for(int i=2;i&lt;=N;i++)&#123; if(!mark[i]) p[++tot]=i,mu[i]=-1,g[i]=i+1,f[i]=make_pair(i+1,i); for(int j=1,tmp;j&lt;=tot and (tmp=i*p[j])&lt;=N;j++)&#123; mark[tmp]=true; if(i%p[j]==0)&#123; mu[tmp]=0; g[tmp]=g[i]*p[j]+1; f[tmp]=make_pair(f[i].first/g[i]*g[tmp],tmp); break; &#125; mu[tmp]=-mu[i]; g[tmp]=p[j]+1; f[tmp]=make_pair(f[i].first*f[p[j]].first,tmp); &#125; &#125; sort(f+1,f+1+N); n=read(); for(int i=1;i&lt;=n;i++) q[i].n=read(),q[i].m=read(),q[i].a=read(),q[i].id=i; sort(q+1,q+1+n); for(int i=1,j=1;i&lt;=n;i++)&#123; while(f[j].first&lt;=q[i].a and j&lt;=N)&#123; for(int k=f[j].second;k&lt;=N;k+=f[j].second) insert(k,f[j].first*mu[k/f[j].second]); j++; &#125; ans[q[i].id]=q[i].solve(); &#125; for(int i=1;i&lt;=n;i++) printf(&quot;%d\\n&quot;,ans[i]&amp;(~(1&lt;&lt;31))); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"P3209-平面图判定","slug":"P3209-平面图判定","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T08:58:52.518Z","comments":true,"path":"2022/04/30/P3209-平面图判定/","permalink":"https://starcried.github.io/2022/04/30/P3209-%E5%B9%B3%E9%9D%A2%E5%9B%BE%E5%88%A4%E5%AE%9A/","excerpt":"","text":"平面图 平面图就是所有点的连边可以在平面上不相交的图。这一点可以大概理解成拓扑图的性质，即每连一条边就会将某个区域进行分割——很明显，如果两个点分别处在两个不可达的区域，它们要连边显然是要穿过其他边的。 平面图定理 边数大于点数的三倍减六的图一定不是平面图。即设n为点数，m为边数，有 \\[m&lt;=n*3-6\\] 关于平面图的其他定理和上定理的证明我不会不过我有大佬博客就不乱搬了。 P3209-平面图判定 首先，它给出了n和m，我们先通过平面图定理判断一下，这样可以偷很多的懒。 然后，我们发现这个题是给了哈密顿回路的。那么我们就可以把这个图伸展成一个环便于理解。 然后，我们发现了这个图的性质——哈密顿回路相当于分割整个平面成了两个区域。也就是说，两个非哈密顿回路上的边的边顶多能共存两组。（因为不能交叉） 两个区域？共存两组？ 2-SAT浮现出水面。对，我们可以给非哈密顿回路边的边连边，然后求它们的最大匹配。 （如果没有哈密顿回路这玩意还是个DPC问题） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=3e4+5,maxv=205,maxm=2e6+5; int cnt,Cir[maxv],rec[maxn],x1[maxn],y1[maxn],x2[maxn],y2[maxn]; //Cir用来按编号从小到大记录环,rec反向记录Cir; //x1,y1,x2,y2分别记录全部边和去除环上边的剩余边 int tot,dfn[maxn],low[maxn],_n; //tarjan用 int ecnt,head[maxm],nxt[maxm],to[maxm],belong[maxn]; //前向星用 bool cir[maxv][maxv]; //cir记录Cir inline void addedge(int from,int too) &#123; to[++ecnt]=too,nxt[ecnt]=head[from],head[from]=ecnt; &#125; int st[maxn],top; bool vis[maxn]; void tarjan(int x) &#123; dfn[x]=low[x]=++tot; st[++top]=x;vis[x]=1; for(int i=head[x];i;i=nxt[i]) &#123; int u=to[i]; if(!dfn[u])&#123; tarjan(u); low[x]=min(low[x],low[u]); &#125;else if(vis[x])&#123; low[x]=min(low[x],dfn[u]); &#125; &#125; if (dfn[x] == low[x]) &#123; int v; belong[x] = ++_n;vis[x]=0; while (v = st[top--], v != x) belong[v] = _n,vis[v]=0; &#125; &#125; inline bool check() &#123; for(int i=1;i&lt;=(cnt&lt;&lt;1);i++) if(!dfn[i])tarjan(i); for(int i=1;i&lt;=cnt;i++) if(belong[i]==belong[i+cnt])return false; return true; &#125; inline void work() &#123; int T,n,m; n=read(),m=read(); memset(head,0,sizeof head); memset(x1,0,sizeof x1); memset(y1,0,sizeof y1); memset(x2,0,sizeof x2); memset(y2,0,sizeof y2); memset(belong,0,sizeof belong); memset(rec,0,sizeof rec); memset(cir,0,sizeof cir); memset(dfn,0,sizeof dfn); memset(low,0,sizeof low); memset(to,0,sizeof to); memset(nxt,0,sizeof nxt); memset(vis,0,sizeof vis); memset(st,0,sizeof st); ecnt=tot=cnt=_n=top=0; for(int i=1;i&lt;=m;i++) &#123; x1[i]=read(),y1[i]=read(); if(x1[i]&gt;y1[i]) swap(x1[i],y1[i]); &#125;//记录下来等会处理 rec[Cir[1]=read()]=1; for(int i=2;i&lt;=n;i++)&#123; rec[Cir[i]=read()]=i; (Cir[i]&gt;Cir[i-1]?cir[Cir[i-1]][Cir[i]]:cir[Cir[i]][Cir[i-1]])=1; &#125; (Cir[1]&gt;Cir[n]?cir[Cir[n]][Cir[1]]:cir[Cir[1]][Cir[n]])=1; //获取cir和rec if(m&gt;3*n-6)&#123; printf(&quot;NO\\n&quot;);return; &#125; for(int i=1;i&lt;=m;i++) &#123; if(cir[x1[i]][y1[i]])continue; x2[++cnt]=x1[i],y2[cnt]=y1[i]; &#125; for(int i=1;i&lt;cnt;i++) for(int j=i+1;j&lt;=cnt;j++) &#123; int a=rec[x2[i]] , b=rec[y2[i]] , x=rec[x2[j]] , y=rec[y2[j]]; if(a&gt;b)swap(a,b);if(x&gt;y)swap(x,y); if((a&lt;x and b&gt;x and y&gt;b) or (x&lt;a and y&gt;a and b&gt;y)) addedge(i,j+cnt),addedge(j,i+cnt),addedge(i+cnt,j),addedge(j+cnt,i); &#125; if(check())printf(&quot;YES\\n&quot;); else printf(&quot;NO\\n&quot;); &#125;&#125;int main()&#123; int T=read(); while(T--) star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"2-SAT","slug":"2-SAT","permalink":"https://starcried.github.io/tags/2-SAT/"}]},{"title":"P3643 [APIO2016]划艇","slug":"P3643 [APIO2016]划艇","date":"2022-04-29T16:00:00.000Z","updated":"2024-10-06T18:02:44.930Z","comments":true,"path":"2022/04/30/P3643 [APIO2016]划艇/","permalink":"https://starcried.github.io/2022/04/30/P3643%20[APIO2016]%E5%88%92%E8%89%87/","excerpt":"","text":"P3643 [APIO2016]划艇 题意 一个合法序列可表示为一个长度为 \\(n\\) 的序列，其中第 \\(i\\) 个数可以为 0 或 \\([l_i,r_i]\\) 中一个整数，且满足所有不为零的数组成的子序列严格上升。求合法序列方案数。\\(n\\leq 500,l_i\\leq r_i\\leq 10^9\\)。 思路 朴素动态规划做法为，设 \\(f_{ij}\\) 表示第 \\(i\\) 个数不为零且数量为 \\(j\\) 且后面全选 0 的方案数，则 \\[ ans=\\sum_{i=1}^n\\sum_{j=l_i}^{r_i}f_{ij}\\\\ f_{ij}=\\sum_{k=1}^{j-1}\\sum_{q=0}^{i-1}f_{qk},j\\in[l_i,r_i] \\] 但是第二维枚举太多。考虑优化。 首先，我们考虑一段区间，按照上面的方式递推需要依次枚举数量再枚举 \\(i-1\\) 个数的方案进行转移，不能够简化的主要原因是因为每个数都有一个限定的区间。若不加限定，发现这段转移可以简化为一个简单问题：每个数可以选取值范围内任意的值或 0，求所有不为零的数组成的子序列严格上升方案数。设取值区间大小为 \\(len\\)，数的数量为 \\(n\\)，则答案为 \\(\\binom{len+n}n\\)。可以理解为额外增加 \\(n\\) 个 0 表示选 0。 所以我们进行离散化，将取值范围分为若干段，每个数的范围由若干这样的段组成。对于每一段我们都可以按照上面的方法转移。即对于这一段区间 \\(j\\)，对于所有包含它的数字，可以从 \\(0\\) 到 \\(i-1\\) 中任意一种状态 \\(k\\) 转移得到，并且需要乘上在 \\(k\\) 到 \\(i\\) 中选任意个区间包含 \\(j\\) 的数字不为 0 的方案数，即 \\(\\binom{len+m-1}m\\) 其中 \\(m\\) 为上述数的个数，\\(len\\) 为第 \\(j\\) 段的长度，减 1 是因为第 \\(i\\) 个必选。即 \\[ ans=\\sum_{i=1}^n\\sum_{j=l_i}^{r_i}f_{ij}\\\\ f_{ij}=\\sum_{q=0}^{i-1}\\binom{len+m_{jq}-1}{m_{jq}}\\sum_{k=1}^{j-1}f_{qk},j\\in[l_i,r_i],m_{jq}=\\sum_{o=q+1}^i[j\\in[l_o,r_o]],len为区间j的长度 \\] 发现后面的求和维护一个前缀和即可。总时间复杂度 \\(O(n^3)\\)。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=505,mod=1e9+7; int n,m,l[maxn],r[maxn],b[maxn&lt;&lt;1],C[maxn],inv[maxn],f[maxn],ans; inline void work()&#123; n=read(); inv[1]=1;for(int i=2;i&lt;=n;i++) inv[i]=1ll*(mod-mod/i)*inv[mod%i]%mod; for(int i=1;i&lt;=n;i++) l[i]=b[(i&lt;&lt;1)-1]=read(),r[i]=b[i&lt;&lt;1]=read(),b[i&lt;&lt;1]++; sort(b+1,b+1+(n&lt;&lt;1)); m=unique(b+1,b+1+(n&lt;&lt;1))-b-1; for(int i=1;i&lt;=n;i++) l[i]=lower_bound(b+1,b+1+m,l[i])-b,r[i]=lower_bound(b+1,b+1+m,r[i]+1)-b; C[0]=f[0]=1; for(int j=1;j&lt;m;j++)&#123; int len=b[j+1]-b[j]; for(int i=1;i&lt;=n;i++) C[i]=1ll*C[i-1]*(len+i-1)%mod*inv[i]%mod; for(int i=n;i;i--) if(l[i]&lt;=j and r[i]&gt;=j+1)&#123; int cnt=1; for(int k=i-1;~k;k--) f[i]=(f[i]+1ll*C[cnt]*f[k])%mod,cnt+=l[k]&lt;=j and r[k]&gt;=j+1; &#125; &#125; for(int i=1;i&lt;=n;i++) ans=(ans+f[i])%mod; printf(&quot;%d\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"}]},{"title":"P4074 [WC2013]糖果公园","slug":"P4074 [WC2013]糖果公园","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:16:36.703Z","comments":true,"path":"2022/04/30/P4074 [WC2013]糖果公园/","permalink":"https://starcried.github.io/2022/04/30/P4074%20[WC2013]%E7%B3%96%E6%9E%9C%E5%85%AC%E5%9B%AD/","excerpt":"","text":"P4074 [WC2013]糖果公园 树上带修莫队 题意：树上每个点有一种糖果，求\\(\\sum_c\\sum_{i=1}^{cnt_c}v_c*w_i\\) 其中c为糖果种类，\\(cnt_c\\)其为出现次数。 思路 离线树上带修莫队。 先进行树上分块。分块内的询问按照出发点、终止点、询问id优先级依次递减排序。 对于树上莫队，其实就是在欧拉序上莫队。因为欧拉序的性质，即每个节点子树内的节点一定会经过两次，我们就可以用一个括号序列的方式在莫队时消除子树内无用节点的影响。 具体来说，序列长度为2*n，每一个节点出入队时我们异或它是否在队中即可。也就是记录每个点出队和入队的时间戳，然后在序列上修改。 注意，对于LCA其实在欧拉序时是没有包括的，所以我们需要单独求一下LCA的影响。但是如果一个端点本身就是LCA就不用啦。 但是！用指针实现也太low了，我们直接利用它的树形结构莫队就行（实际上就是我看错了题解） 代码 分块和排序 1234567891011121314151617181920 int dfs(int x,int f)&#123;//毒瘤的树分块而非序列分块 int siz=0; fa[x][0]=f;dep[x]=dep[f]+1; dfn[x]=++tim; for(int i=0;i&lt;=20;i++)fa[x][i+1]=fa[fa[x][i]][i]; for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==f)continue; siz+=dfs(u,x); if(siz&gt;=_nsiz)&#123; _n++; while(siz)belong[st[top--]]=_n,siz--; &#125; &#125; st[++top]=x; return siz+1; &#125;//---------------- ++_n; while(top)belong[st[top--]]=_n; 1inline bool operator &lt; (const query&amp;zp)const &#123;return belong[u]&lt;belong[zp.u] or (belong[u]==belong[zp.u] and (belong[v]&lt;belong[zp.v] or (belong[v]==belong[zp.v] and id&lt;zp.id)));&#125;//运算符版 莫队 1234567891011inline void reverse(const int&amp; x,ll &amp;ans)&#123;//将进队的出队，出队的进队。 if(vis[x])ans-=1ll*w[num[color[x]]]*v[color[x]],num[color[x]]--; else num[color[x]]++,ans+=1ll*w[num[color[x]]]*v[color[x]]; vis[x]^=1;&#125;inline void solve(int x,int y,ll &amp;ans)&#123;//直接利用树形结构跳father，更新答案，反正括号序列也就是翻转。 while(x!=y)&#123; if(dep[x]&gt;dep[y])reverse(x,ans),x=fa[x][0]; else reverse(y,ans),y=fa[y][0]; &#125;&#125; 1234567891011121314151617181920for(int i=1;i&lt;=cntq;i++)&#123; while(now&lt;cntm and mo[now+1].id&lt;=q[i].id)&#123;//处理时间问题，只能暴力消除影响。 now++; if(vis[mo[now].pos])ans-=w[num[color[mo[now].pos]]]*v[color[mo[now].pos]],num[color[mo[now].pos]]--; color[mo[now].pos]=mo[now].aft; if(vis[mo[now].pos])num[color[mo[now].pos]]++,ans+=1LL*w[num[color[mo[now].pos]]]*v[color[mo[now].pos]]; &#125; while(now&gt;=1 and mo[now].id&gt;=q[i].id)&#123; if(vis[mo[now].pos])ans-=w[num[color[mo[now].pos]]]*v[color[mo[now].pos]],num[color[mo[now].pos]]--; color[mo[now].pos]=mo[now].bef;//注意变成了什么（我就是傻 if(vis[mo[now].pos])num[color[mo[now].pos]]++,ans+=1LL*w[num[color[mo[now].pos]]]*v[color[mo[now].pos]]; now--; &#125; if(i==1)solve(q[i].u,q[i].v,ans); else solve(q[i].u,q[i-1].u,ans),solve(q[i].v,q[i-1].v,ans);//保证继承答案连续 int lca=LCA(q[i].u,q[i].v); reverse(lca,ans); q[i].ans=ans; reverse(lca,ans);//单独计算，最后要消除影响。不要被继承。&#125; 事实证明，这种写法是真毒瘤，开了O2才勉强能过。 全代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; typedef long long ll; int n,m,Q,_n,fa[maxn][23],_nsiz,dfn[maxn],dep[maxn],c[maxn],color[maxn]; ll v[maxn],w[maxn]; int ecnt,tim,st[maxn&lt;&lt;1],belong[maxn],top,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1]; struct query&#123; int u,v,id; ll ans; inline bool operator &lt; (const query&amp;zp)const &#123;return belong[u]&lt;belong[zp.u] or (belong[u]==belong[zp.u] and (belong[v]&lt;belong[zp.v] or (belong[v]==belong[zp.v] and id&lt;zp.id)));&#125; &#125;q[maxn]; inline bool cmp(query a,query b)&#123;return a.id&lt;b.id;&#125; struct modify&#123; int pos,bef,aft,id; &#125;mo[maxn&lt;&lt;1]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt; &#125; int dfs(int x,int f)&#123; int siz=0; fa[x][0]=f;dep[x]=dep[f]+1; dfn[x]=++tim; for(int i=0;i&lt;=20;i++)fa[x][i+1]=fa[fa[x][i]][i]; for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==f)continue; siz+=dfs(u,x); if(siz&gt;=_nsiz)&#123; _n++; while(siz)belong[st[top--]]=_n,siz--; &#125; &#125; st[++top]=x; return siz+1; &#125; inline int LCA(int x,int y)&#123; if(dep[x]&lt;dep[y])swap(x,y); for(int i=20;i+1;i--)if(dep[fa[x][i]]&gt;=dep[y])x=fa[x][i]; if(x==y)return x; for(int i=20;i+1;i--)if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i]; return fa[x][0]; &#125; bool vis[maxn]; int num[maxn]; inline void reverse(const int&amp; x,ll &amp;ans)&#123; if(vis[x])ans-=1ll*w[num[color[x]]]*v[color[x]],num[color[x]]--; else num[color[x]]++,ans+=1ll*w[num[color[x]]]*v[color[x]]; vis[x]^=1; &#125; inline void solve(int x,int y,ll &amp;ans)&#123; while(x!=y)&#123; if(dep[x]&gt;dep[y])reverse(x,ans),x=fa[x][0]; else reverse(y,ans),y=fa[y][0]; &#125; &#125; inline void work()&#123; n=read(),m=read(),Q=read(); _nsiz=pow(n,0.666666666); for(int i=1;i&lt;=m;i++)v[i]=read(); for(int i=1;i&lt;=n;i++)w[i]=read(); for(int i=1;i&lt;n;i++)addedge(read(),read()); for(int i=1;i&lt;=n;i++)c[i]=color[i]=read(); int cntq=0,cntm=0,x; for(int i=1;i&lt;=Q;i++)&#123; if(read())q[++cntq].id=i,q[cntq].u=read(),q[cntq].v=read(); else mo[++cntm].id=i,mo[cntm].bef=c[(x=read())],mo[cntm].pos=x,mo[cntm].aft=c[x]=read(); &#125; dfs(1,0); for(int i=1;i&lt;=cntq;i++)if(dfn[q[i].v]&lt;dfn[q[i].u])swap(q[i].u,q[i].v);//对于这种写法这句其实可有也可无了。这种写法的一个好处就是不交换不影响正确性。 ++_n; while(top)belong[st[top--]]=_n; sort(q+1,q+1+cntq); int now=0; long long ans=0; for(int i=1;i&lt;=cntq;i++)&#123; while(now&lt;cntm and mo[now+1].id&lt;=q[i].id)&#123; now++; if(vis[mo[now].pos])ans-=w[num[color[mo[now].pos]]]*v[color[mo[now].pos]],num[color[mo[now].pos]]--; color[mo[now].pos]=mo[now].aft; if(vis[mo[now].pos])num[color[mo[now].pos]]++,ans+=1LL*w[num[color[mo[now].pos]]]*v[color[mo[now].pos]]; &#125; while(now&gt;=1 and mo[now].id&gt;=q[i].id)&#123; if(vis[mo[now].pos])ans-=w[num[color[mo[now].pos]]]*v[color[mo[now].pos]],num[color[mo[now].pos]]--; color[mo[now].pos]=mo[now].bef; if(vis[mo[now].pos])num[color[mo[now].pos]]++,ans+=1LL*w[num[color[mo[now].pos]]]*v[color[mo[now].pos]]; now--; &#125; if(i==1)solve(q[i].u,q[i].v,ans); else solve(q[i].u,q[i-1].u,ans),solve(q[i].v,q[i-1].v,ans); int lca=LCA(q[i].u,q[i].v); reverse(lca,ans); q[i].ans=ans; reverse(lca,ans); &#125; sort(q+1,q+1+cntq,cmp); for(int i=1;i&lt;=cntq;i++)printf(&quot;%lld\\n&quot;,q[i].ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 总结 写了个假的（gxy称之为非主流）树上莫队。再写一道免得脑子了装着奇怪的东西。 因为写法毒瘤所以 #define int long long 会T飞。 大家千万不要学非主流","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"},{"name":"分块","slug":"分块","permalink":"https://starcried.github.io/tags/%E5%88%86%E5%9D%97/"}]},{"title":"P4168-蒲公英-分块","slug":"P4168-蒲公英-分块","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:17:22.871Z","comments":true,"path":"2022/04/30/P4168-蒲公英-分块/","permalink":"https://starcried.github.io/2022/04/30/P4168-%E8%92%B2%E5%85%AC%E8%8B%B1-%E5%88%86%E5%9D%97/","excerpt":"","text":"P4168 蒲公英 暴力分块思想。分块的思想与莫队相同。它能将时间和空间复杂度均摊XD belong 表示所属区块，num 维护区间颜色出现次数，maxx 维护区间 max 值。查询时只需要比较两端的区块即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;utility&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;typedef pair&lt;int,int&gt; pii;namespace star&#123; const int maxn=40010,block=1500,maxm=50; int n,m,a[maxn],cnt,cn=1; int belong[maxn],beg[maxm],end[maxm],num[maxm][maxm][maxn],maxx[maxm][maxm]; int ed[maxn],time=0; int color[maxn],id[maxn]; int con[maxn]; pii p[maxn]; inline void solve()&#123; int l=0,r=0,ans=0; while(m--)&#123; time++; l=(read()+ans-1)%n+1,r=(read()+ans-1)%n+1; if(l&gt;r)swap(l,r); ans=0; int mx=0,mxid=0; if(belong[l]==belong[r])&#123; for(int i=l;i&lt;=r;i++) &#123; if(ed[id[i]]!=time)con[id[i]]=0,ed[id[i]]=time; con[id[i]]++; if(con[id[i]]&gt;mx or (con[id[i]]==mx and id[i]&lt;mxid))mxid=id[i],mx=con[mxid]; &#125; ans=color[mxid]; printf(&quot;%d\\n&quot;,ans); &#125;else&#123; int L=belong[l]+1,R=belong[r]-1; mxid=maxx[L][R];mx=num[L][R][mxid]; for(int i=l;i&lt;beg[L];i++) &#123; if(ed[id[i]]!=time)con[id[i]]=0,ed[id[i]]=time; con[id[i]]++; if(con[id[i]]+num[L][R][id[i]]&gt;mx or (con[id[i]]+num[L][R][id[i]]==mx and id[i]&lt;mxid))mxid=id[i],mx=con[mxid]+num[L][R][id[i]]; &#125; for(int i=end[R]+1;i&lt;=r;i++) &#123; if(ed[id[i]]!=time)con[id[i]]=0,ed[id[i]]=time; con[id[i]]++; if(con[id[i]]+num[L][R][id[i]]&gt;mx or (con[id[i]]+num[L][R][id[i]]==mx and id[i]&lt;mxid))mxid=id[i],mx=con[mxid]+num[L][R][id[i]]; &#125; ans=color[mxid]; printf(&quot;%d\\n&quot;,ans); &#125; &#125; &#125; inline void makeblock()&#123; beg[1]=1; cn=1; for(int i=1;i&lt;=n;i++)&#123; if(!(i%block))&#123; end[cn]=i-1; cn++; beg[cn]=i; &#125; belong[i]=cn; &#125; if(n%block)cn++; end[cn]=n; for (int i = 1; i &lt;= cn; i++) for (int j = i; j &lt;= cn; j++) &#123; int makk = 0; for (int k = beg[i]; k &lt;= end[j]; k++) num[i][j][id[k]]++; for (int k = 1; k &lt;= cnt; k++)&#123; if(makk&lt;num[i][j][k]) &#123; makk=num[i][j][k]; maxx[i][j]=k; &#125; &#125; &#125; &#125; inline void cried() &#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) p[i]=make_pair(read(),i); sort(p+1,p+n+1); for(int i=1;i&lt;=n;i++)&#123; if(p[i].first!=p[i-1].first or i==1)cnt++; color[cnt]=p[i].first; id[p[i].second]=cnt; &#125; makeblock(); solve(); &#125;&#125;int main()&#123; star::cried(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"分块","slug":"分块","permalink":"https://starcried.github.io/tags/%E5%88%86%E5%9D%97/"}]},{"title":"P4180 [BJWC2010]严格次小生成树","slug":"P4180 [BJWC2010]严格次小生成树","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:19:14.009Z","comments":true,"path":"2022/04/30/P4180 [BJWC2010]严格次小生成树/","permalink":"https://starcried.github.io/2022/04/30/P4180%20[BJWC2010]%E4%B8%A5%E6%A0%BC%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","excerpt":"","text":"P4180 [BJWC2010]严格次小生成树 题意 求出一个无向联通图的严格次小生成树。严格次小生成树的定义为边权和大于最小生成树的边权和但不存在另一棵生成树的边权和在最小生成树和严格次小生成树之间（不相等）。 思路 先求出一颗最小生成树，发现严格次小生成树一定是其断了一条边并加了一条边且边权和的增加量最小。 那么我们继续在最小生成树上做。对于每一条不是最小生成树上的边，求出其两端两点间在最小生成树上路径上的边的最大值。然鹅，如果用倍增LCA找，发现如果求出来的最大值与该边权值相等，那么得出的答案就是不合法的。所以我们还必须维护一个倍增范围内严格次小边权。 然后找到最小的值输出就行啦！ 对于维护严格次小的值，我认为可以先求出最大值，然后比较找出与最大值不等的最大值就是次大值。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10,maxm=3e5+10,INF=0x3f3f3f3f3f3f3f3f; int n,m; struct Edge&#123; int u,v,dis; bool is; inline bool operator &lt;(const Edge &amp;zp)const &#123;return dis&lt;zp.dis;&#125; &#125;e[maxm]; int ecnt,head[maxn],to[maxn&lt;&lt;1],Fa[maxn],nxt[maxn&lt;&lt;1],v[maxn&lt;&lt;1],ans=INF,sum,fa[maxn][25],mx[maxn][25],pmx[maxn][25],dep[maxn]; inline int find(int x)&#123;return Fa[x]==x?x:Fa[x]=find(Fa[x]);&#125; inline void addedge(int a,int b,int c)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt,v[ecnt]=c; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt,v[ecnt]=c; &#125; inline void kruskal()&#123; for(int i=1;i&lt;=n;i++)Fa[i]=i; sort(e+1,e+1+m); int cnt=0; for(int i=1;i&lt;=m;i++)&#123; int fx=find(e[i].u),fy=find(e[i].v); if(fx!=fy)&#123; Fa[fx]=fy; addedge(e[i].u,e[i].v,e[i].dis); e[i].is=1; sum+=e[i].dis; if(++cnt==n-1)break; &#125; &#125; &#125; void dfs(int x,int f)&#123; fa[x][0]=f; dep[x]=dep[f]+1; for(int i=0;i&lt;=20;i++)&#123; fa[x][i+1]=fa[fa[x][i]][i]; mx[x][i+1]=max(mx[x][i],mx[fa[x][i]][i]); if(mx[x][i+1]!=mx[x][i])pmx[x][i+1]=max(pmx[x][i+1],mx[x][i]); if(mx[x][i+1]!=mx[fa[x][i]][i])pmx[x][i+1]=max(pmx[x][i+1],mx[fa[x][i]][i]); if(mx[x][i+1]!=pmx[x][i])pmx[x][i+1]=max(pmx[x][i+1],pmx[x][i]); if(mx[x][i+1]!=pmx[fa[x][i]][i])pmx[x][i+1]=max(pmx[x][i+1],pmx[fa[x][i]][i]); &#125; for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==f)continue; mx[u][0]=v[i]; dfs(u,x); &#125; &#125; inline void LCA(int x,int y,int &amp;mxx,const int &amp;MX)&#123; if(dep[x]&lt;dep[y])swap(x,y); for(int i=20;i+1;i--)if(dep[fa[x][i]]&gt;=dep[y])&#123; if(mx[x][i]!=MX)mxx=max(mxx,mx[x][i]); else mxx=max(mxx,pmx[x][i]); x=fa[x][i]; &#125; if(x==y)return; for(int i=20;i+1;i--)if(fa[x][i]!=fa[y][i])&#123; if(mx[x][i]!=MX)mxx=max(mxx,mx[x][i]); else mxx=max(mxx,pmx[x][i]); x=fa[x][i]; if(mx[y][i]!=MX)mxx=max(mxx,mx[y][i]); else mxx=max(mxx,pmx[y][i]); y=fa[y][i]; &#125; if(mx[x][0]!=MX)mxx=max(mxx,mx[x][0]); else mxx=max(mxx,pmx[x][0]); if(mx[y][0]!=MX)mxx=max(mxx,mx[y][0]); else mxx=max(mxx,pmx[y][0]); &#125; inline void work()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;i++)e[i].u=read(),e[i].v=read(),e[i].dis=read(); kruskal(); dfs(1,0); for(int i=1;i&lt;=m;i++)if(!e[i].is)&#123; int x=e[i].u,y=e[i].v,MX=-INF; LCA(x,y,MX,e[i].dis); ans=min(ans,sum-MX+e[i].dis); &#125; printf(&quot;%lld&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"P4293 [WC2010]能量场","slug":"P4293 [WC2010]能量场","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:19:37.019Z","comments":true,"path":"2022/04/30/P4293 [WC2010]能量场/","permalink":"https://starcried.github.io/2022/04/30/P4293%20[WC2010]%E8%83%BD%E9%87%8F%E5%9C%BA/","excerpt":"","text":"P4293 [WC2010]能量场 题意 给你 \\(n\\) 个粒子，每个粒子有两个权值 \\(m_i,c_i\\) 每个相邻有序对 \\((a,b)\\) 会产生 \\(m_am_b(c_a-c_b)\\) 的贡献。现让你处理两个问题： 找出一个有序对使贡献最大。 找出一个序列成环后贡献和最大。 思路 我们将贡献转化一下： \\[ m_am_b(c_a-c_b)=m_ac_am_b-m_bc_bm_a \\] 那么这就形成了一个叉积的形式。即将每个点 \\(i\\) 转化为 \\(x=m_ic_i,y=m_i\\) 的向量。 那么第一问就等价于求叉积最大的两个向量。具体怎么求后面再说。 那么第二问就是将若干个向量依次首尾相接地叉积和。因为所有点都在第一象限，所以这等价于求一个多边形的面积的两倍。（不会的可以自己根据叉积意义推下） 那么我们让贡献和最大，相当于求一个构成多边形面积最大的序列——凸包。于是我们求一下凸包就行了。 至于第一问，我们要快速得到两个点叉积的最大值，发现叉积最大的两个点一定在凸包上。并且发现，顺次遍历所有点并用一个指针记录另一个点的位置，发现叉积的绝对值是单调的。那么我们用类似半平面交的方法扫两遍凸包就行了，即正反各扫一遍（因为边界条件可能错误，但扫两遍一定会统计完全）。 实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;namespace star&#123; const int maxn=5e4+10; int n,m=1,ans,Ans[2],q[maxn]; struct vec&#123; double x,y; int id; vec(double x=0,double y=0,int id=0):x(x),y(y),id(id)&#123;&#125; vec operator + (const vec &amp;a) const &#123;return vec(x+a.x,y+a.y);&#125; vec operator - (const vec &amp;a) const &#123;return vec(x-a.x,y-a.y);&#125; double operator * (const vec &amp;a) const &#123;return x*a.y-y*a.x;&#125; bool operator &lt; (const vec &amp;a) const &#123;return x&lt;a.x or (x==a.x and y&lt;a.y);&#125; &#125;a[maxn]; inline void work()&#123; scanf(&quot;%d&quot;,&amp;n); for(int i=1;i&lt;=n;i++)&#123; double a,b; scanf(&quot;%lf%lf&quot;,&amp;a,&amp;b); star::a[i]=vec(a*b,a,i); &#125; sort(a+1,a+1+n); q[1]=1; for(int i=2;i&lt;=n;i++)&#123; while(m&gt;1 and (a[q[m]]-a[q[m-1]])*(a[i]-a[q[m]])&lt;=0) m--; q[++m]=i; &#125; int tmp=m; for(int i=n-1;i;i--)&#123; while(m&gt;tmp and (a[q[m]]-a[q[m-1]])*(a[i]-a[q[m]])&lt;=0) m--; q[++m]=i; &#125; for(int i=1,j=2;i&lt;=m;i++)&#123; while(fabs(a[q[i]]*a[q[j]])&lt;fabs(a[q[i]]*a[q[j+1]])) j=j%(m-1)+1; double res=a[q[i]]*a[q[j]]; if(ans&lt;fabs(res))&#123; ans=fabs(res); if(res&gt;0)Ans[0]=i,Ans[1]=j; else Ans[0]=j,Ans[1]=i; &#125; &#125; for(int i=m,j=m-1;i;i--)&#123; while(fabs(a[q[i]]*a[q[j]])&lt;fabs(a[q[i]]*a[q[j==1?m-1:j-1]])) j=j==1?m-1:j-1; double res=a[q[i]]*a[q[j]]; if(ans&lt;fabs(res))&#123; ans=fabs(res); if(res&gt;0)Ans[0]=i,Ans[1]=j; else Ans[0]=j,Ans[1]=i; &#125; &#125; printf(&quot;%d %d\\n%d\\n&quot;,a[q[Ans[0]]].id,a[q[Ans[1]]].id,m-1); for(int i=1;i&lt;m;i++) printf(&quot;%d &quot;,a[q[i]].id); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 补充 洛谷的另外一篇题解在代码在数据较小时进行了特判以水过第一个测试点，实际上如果不加特判其根本无法通过此题，原因很可能就是没有进行反方向统计答案。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"几何","slug":"几何","permalink":"https://starcried.github.io/tags/%E5%87%A0%E4%BD%95/"}]},{"title":"P4334 [COI2007] Policija","slug":"P4334 [COI2007] Policija","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:20:53.983Z","comments":true,"path":"2022/04/30/P4334 [COI2007] Policija/","permalink":"https://starcried.github.io/2022/04/30/P4334%20[COI2007]%20Policija/","excerpt":"","text":"P4334 [COI2007] Policija 题意 一个无重边的无向图，每次询问删掉一条边或删掉一个点后两个点是否联通。 思路 连通性问题，我们可以考虑使用广义圆方树解决。 对于删掉一个点的情况： 我们先跑 tarjan 建出圆方树。如何判断两点在删去一个点后在树上的连通性？当且仅当被删去的点在两点间的路径上。根据圆方树的性质，如果被删点在一个点双连通分量中，它是符合上面的判断条件的。 所以，我们只需要建出圆方树，判断这个点是否在询问的两点间的路径上就行了。 对于删掉一条边的情况： 考虑我们建出来的广义圆方树是一种怎样的形态。它一定是圆方点交错的形式。换句话说，一条边若不在点双连通分量内，它就会变成一个方点，并连接其原来的两个点。 换句话说，我们把一条边转化成了一个点。于是我们就可以像上面处理点一样处理了。 实现 判断一个点是否在两点路径上，我们可以用树剖实现。具体来讲，在跳LCA的过程中判断被删点是否在起终点之间，我们用链首和深度判断即可。 由于题目查询边的给出方式约束，我们可以用 map 实现查询边是否在点双内。代码中，minmax 函数为 C++11 语法，其返回值为一个排好序后的 pair 。 整体时间复杂度为 \\(O(n+q(\\log n+\\log m))\\) 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;map&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e5+10,maxm=5e5+10; typedef pair&lt;int,int&gt; pii; int n,m; struct gragh&#123; int ecnt,head[maxn],to[maxm&lt;&lt;1],nxt[maxm&lt;&lt;1]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt; &#125; &#125;G1,G2; int tot,cnt,st[maxn],dfn[maxn],low[maxn]; map&lt;pii,int&gt; mp; void tarjan(int x,int f)&#123; dfn[x]=low[x]=++tot; st[++st[0]]=x; for(int i=G1.head[x];i;i=G1.nxt[i])&#123; int u=G1.to[i]; if(u==f)continue; if(!dfn[u])&#123; tarjan(u,x); low[x]=min(low[x],low[u]); if(low[u]&gt;=dfn[x])&#123; cnt++; if(low[u]&gt;dfn[x]) mp.insert(make_pair(minmax(u,x),cnt)); G2.addedge(cnt,x); int now=-1; while(now^u) now=st[st[0]--],G2.addedge(now,cnt); &#125; &#125;else low[x]=min(low[x],dfn[u]); &#125; &#125; int fa[maxn],dep[maxn],top[maxn],son[maxn],siz[maxn]; void dfs1(int x,int f)&#123; fa[x]=f,dep[x]=dep[f]+1;siz[x]=1; for(int i=G2.head[x];i;i=G2.nxt[i])&#123; int u=G2.to[i]; if(u==f)continue; dfs1(u,x); siz[x]+=siz[u]; if(siz[u]&gt;siz[son[x]])son[x]=u; &#125; &#125; void dfs2(int x,int topf)&#123; top[x]=topf; if(!son[x]) return; dfs2(son[x],topf); for(int i=G2.head[x];i;i=G2.nxt[i])&#123; int u=G2.to[i]; if(u==fa[x] or u==son[x]) continue; dfs2(u,u); &#125; &#125; inline bool LCA(int x,int y,int z)&#123; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]])swap(x,y); if(top[x]==top[z] and dep[z]&lt;=dep[x]) return 1; x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y])swap(x,y); if(top[x]==top[z] and dep[z]&gt;=dep[y] and dep[z]&lt;=dep[x]) return 1; return 0; &#125; inline void work()&#123; n=cnt=read(),m=read(); for(int i=1;i&lt;=m;i++) G1.addedge(read(),read()); tarjan(1,0); dfs1(1,0); dfs2(1,1); int Q=read(); while(Q--) if(read()==1)&#123; int x=read(),y=read(); map&lt;pii,int&gt;::iterator it=mp.find(minmax(read(),read())); if(it==mp.end()) puts(&quot;yes&quot;); else puts(LCA(x,y,(*it).second)?&quot;no&quot;:&quot;yes&quot;); &#125;else&#123; int x=read(),y=read(),z=read(); puts(LCA(x,y,z)?&quot;no&quot;:&quot;yes&quot;); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"圆方树","slug":"圆方树","permalink":"https://starcried.github.io/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"}]},{"title":"P4494 [HAOI2018]反色游戏","slug":"P4494 [HAOI2018]反色游戏","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:21:51.075Z","comments":true,"path":"2022/04/30/P4494 [HAOI2018]反色游戏/","permalink":"https://starcried.github.io/2022/04/30/P4494%20[HAOI2018]%E5%8F%8D%E8%89%B2%E6%B8%B8%E6%88%8F/","excerpt":"","text":"P4494 [HAOI2018]反色游戏 题意 给你一个无向图，图上每个点是黑色或者白色。你可以将一条边的两个端点颜色取反。问你有多少种方法每个边至多取反一次使得图上全变成白色的点。 思路 若任意一个连通块黑色点的个数为奇数那么无解。 先考虑树的情况。发现如果是树，并且黑点个数为偶数，有且仅有一种方式达到目标。然后发现，对于一个无向图，它的任意一个生成树若有解，那么其他非树边无论是否取反都有且仅有一种情况达到目标，并且充分。所以答案就是 \\(2^{m-n+1}\\)。 考虑不联通的情况，每多一个连通块相当于少了一条非树边，所以答案就是 \\(2^{m-n+cnt( 连通块个数 )}\\)。 然后考虑对于删除每个点的情况，分为以下几种： 独立点，不与任何其他点联通，判断删去后是否有解； 非割点，判断删去后是否有解。具体来讲，该点为黑点时，当且仅当全局只有一个连通块且正是所属连通块无解时删除后有解。白点时类似。 是割点，判断删去该点后出现的所有连通块是否有解，并且也要判断是否仅有一个连通块无解且正是该点导致无解时删掉后有解。 对于每种情况，按照上面的方式计算一下有解时的新图的答案即可。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10,mod=1e9+7; int n,m,pow[maxn],in[maxn]; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt,in[a]++ ; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt,in[b]++; &#125; int bel[maxn],dfn[maxn],low[maxn],cut[maxn],cnt[maxn],cntbel[maxn],cutcnt[maxn]; bool col[maxn],unsol[maxn],unsolbel[maxn]; void tarjan(int x,int fa)&#123; bel[x]=bel[0],cutcnt[x]=cnt[x]=col[x]; dfn[x]=low[x]=++dfn[0]; for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa) if(!dfn[u]) &#123; tarjan(u,x),low[x]=min(low[x],low[u]); cnt[x]+=cnt[u]; if(dfn[x]&lt;=low[u]) cutcnt[x]+=cnt[u],++cut[x],unsol[x]|=cnt[u]&amp;1; &#125;else low[x]=min(low[x],dfn[u]); cut[x]-=!fa; &#125; inline void work()&#123; memset(head,0,sizeof head),ecnt=bel[0]=0;memset(dfn,0,sizeof dfn),memset(cut,0,sizeof cut),memset(in,0,sizeof in),memset(unsol,0,sizeof unsol); n=read(),m=read(); for(int i=1;i&lt;=m;i++) addedge(read(),read()); for(int c,i=1;i&lt;=n;i++) scanf(&quot;%1d&quot;,&amp;c),col[i]=c; int cntunsol=0; for(int i=1;i&lt;=n;i++) if(!dfn[i]) bel[0]++,tarjan(i,0),cntunsol+=cnt[i]&amp;1,cntbel[bel[0]]=cnt[i],unsolbel[bel[0]]=cntbel[bel[0]]&amp;1; int ans=m-n+bel[0]; printf(&quot;%d &quot;,cntunsol?0:pow[ans]); for(int i=1;i&lt;=n;i++) &#123; if(!in[i]) printf(&quot;%d &quot;,cntunsol^cnt[i]?0:pow[ans]); else if(!cut[i])&#123; if((unsolbel[bel[i]] and !(cntunsol^col[i])) or (!unsolbel[bel[i]] and !cntunsol and !col[i])) printf(&quot;%d &quot;,pow[ans-in[i]+1+cut[i]]); else printf(&quot;0 &quot;); &#125;else if(!unsol[i] and !((cntbel[bel[i]]-cutcnt[i])&amp;1) and !(cntunsol-unsolbel[bel[i]])) printf(&quot;%d &quot;,pow[ans-in[i]+1+cut[i]]); else printf(&quot;0 &quot;); &#125; puts(&quot;&quot;); &#125;&#125;signed main()&#123; star::pow[0]=1; for(int i=1;i&lt;=100000;i++) star::pow[i]=(star::pow[i-1]&lt;&lt;1)%star::mod; int T=read(); while(T--)star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"P4774-屠龙勇士-扩展中国剩余定理","slug":"P4774-屠龙勇士-扩展中国剩余定理","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:23:07.591Z","comments":true,"path":"2022/04/30/P4774-屠龙勇士-扩展中国剩余定理/","permalink":"https://starcried.github.io/2022/04/30/P4774-%E5%B1%A0%E9%BE%99%E5%8B%87%E5%A3%AB-%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/","excerpt":"","text":"很久很久以前，巨龙突然出现，带来了灾难带走公主又消失不见。王国十分危险，世间谁最勇敢，一位英雄出现…… 学习于该大佬博客 题意 那么你就是这位英雄，不过不同的是，你面对的是一群巨龙，虽然巨龙都不会攻击；你每次使用的剑一打就爆，虽然每打死一条巨龙的奖励是一把新的剑；巨龙不会因为生命值降为负数而死亡，虽然巨龙会憨憨地回血然后把自己奶死；最重要的是你完成游戏不会获得公主的爱，只会获得参加ION8012的报名机会。你一听到最后一条彻底就失去了兴致，于是写了一个机器人帮你完成任务XD 简单来说，就是求解同余方程组： \\[k_ix\\equiv a_i(mod p_i)\\] 其中i为巨龙个数1-n。 思路 然鹅，你会惊讶地发现，如果用扩展中国剩余定理的话，我们只能求解出左项x的系数为1的式子。这对于身经百战的你当然不是问题，一下子就想到了将\\(k_i\\)化掉的好方法： 原式可化为： \\[k_ix + p_iy\\equiv a_i\\] 用设\\(g=gcd(k_i,p_i)\\)，那么用扩展欧几里得求出\\(x&#39;\\)（一组解），原式可化为 \\[x\\equiv \\frac{a_i}{g}x′(mod\\frac {p_i}{g}​)\\] 然后我们就化成了系数为1的情况。我们就可以解辣♪(∇*) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;set&gt;#define int long long using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+100; multiset&lt;int &gt;sword; multiset&lt;int &gt;::iterator it; int a[maxn],p[maxn],sw[maxn],n,m; inline void init()&#123; memset(a,0,sizeof a); memset(p,0,sizeof p); memset(sw,0,sizeof sw); sword.clear(); n=read(),m=read(); for(int i=1;i&lt;=n;i++)a[i]=read(); for(int i=1;i&lt;=n;i++)p[i]=read(); for(int i=1;i&lt;=n;i++)sw[i]=read(); while(m--)sword.insert(read()); &#125; void exgcd(int a,int b,int&amp; d,int &amp;x,int &amp;y)&#123; if(!b)d=a,x=1,y=0; else exgcd(b,a%b,d,y,x),y-=(a/b)*x; &#125; inline int mul(int b,int k,int m)&#123; int a=0; for(;k;k&gt;&gt;=1,b=(b&lt;&lt;1)%m) if(k&amp;1)a=(a+b)%m; return a; &#125;//龟速乘，防止溢出 inline int getsword(int i)&#123; it=sword.upper_bound(a[i]); if(it!=sword.begin())--it; int zp=*it; sword.erase(it);sword.insert(sw[i]); return zp; &#125; inline void excrt()&#123; int X,Y,k; int m=1,ans=0,mx=0,G; for(int i=1;i&lt;=n;i++)&#123; k=getsword(i); mx=max(mx,(a[i]-1)/k+1); k%=p[i];a[i]%=p[i]; if(!k&amp;&amp;a[i])&#123;puts(&quot;-1&quot;);return;&#125;//无解 if(!k&amp;&amp;!a[i])continue;//说明此同余方程没有作用，必须跳过 exgcd(k,p[i],G,X,Y); if(a[i]%G)&#123;puts(&quot;-1&quot;);return;&#125; p[i]/=G; a[i]=mul(a[i]/G,(X%p[i]+p[i])%p[i],p[i]); exgcd(m,p[i],G,X,Y); if((a[i]-ans)%G)&#123;puts(&quot;-1&quot;);return;&#125; m=m/G*p[i]; ans=(ans+mul(mul(m/p[i],((a[i]-ans)%m+m)%m,m),(X%m+m)%m,m))%m; &#125; printf(&quot;%lld\\n&quot;,ans&gt;=mx?ans:ans+m*((mx-ans-1)/m+1)); &#125; inline void work()&#123; init(); excrt(); &#125;&#125;signed main()&#123; int t=read(); while(t--)star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"P4827 [国家集训队] Crash 的文明世界","slug":"P4827 [国家集训队] Crash 的文明世界","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:23:40.966Z","comments":true,"path":"2022/04/30/P4827 [国家集训队] Crash 的文明世界/","permalink":"https://starcried.github.io/2022/04/30/P4827%20[%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F]%20Crash%20%E7%9A%84%E6%96%87%E6%98%8E%E4%B8%96%E7%95%8C/","excerpt":"","text":"P4827 [国家集训队] Crash 的文明世界 题意 求出对于树上每个点 \\(x\\) 的 \\(\\sum_{u=1}^ndis(x,u)^k\\)。所有边长为 1。 思路 根据斯特林反演： \\[ m^n=\\sum_{j=0}^n\\begin{Bmatrix}n\\\\j\\end{Bmatrix}C_m^jj! \\] 可以得到： \\[ \\sum_{i=1}^n\\sum_{j=0}^{k}\\begin{Bmatrix}k\\\\j\\end{Bmatrix}C_{dis(x,i)}^jj!\\\\ =\\sum_{j=0}^{k}\\begin{Bmatrix}k\\\\j\\end{Bmatrix}j!\\sum_{i=1}^nC_{dis(x,i)}^j\\\\ =\\sum_{j=0}^{k}\\begin{Bmatrix}k\\\\j\\end{Bmatrix}j!\\sum_{i=1}^n(C_{dis(x,i)-1}^{j-1}+C_{dis(x,i)-1}^j) \\] 我们只需要 Dp 一边维护后面的组合数部分的值就行了。最后一步是为了推出转移式，设 \\(f_{x,j}\\) 为 \\(\\sum_{i=1}^nC_{dis(x,i)}^j\\)，则有： \\[ f_{x,j}=\\sum_{x\\rightarrow u}f_{u,j}+f_{u,j-1} \\] 再进行一步换根最后代回原式得出答案即可。 实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=5e4+10,mod=10007,maxm=210; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt; &#125; int n,k,f[maxn][maxm],g[maxn][maxm],S[maxm][maxm],mul[maxm]; void dfs1(int x,int fa)&#123; f[x][0]=1; for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa)&#123; dfs1(u,x); for(int j=1;j&lt;=k;j++) f[x][j]=(f[x][j]+f[u][j]+f[u][j-1])%mod; f[x][0]=(f[x][0]+f[u][0])%mod; &#125; &#125; void dfs2(int x,int fa)&#123; for(int i=0;i&lt;=k;i++) g[x][i]=f[x][i]; if(fa)&#123; static int res[maxm]; for(int i=1;i&lt;=k;i++) res[i]=(g[fa][i]-f[x][i]-f[x][i-1]+mod*2)%mod; res[0]=(g[fa][0]-f[x][0]+mod)%mod; for(int i=1;i&lt;=k;i++) g[x][i]=(g[x][i]+res[i]+res[i-1])%mod; g[x][0]=(g[x][0]+res[0])%mod; &#125; for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa) dfs2(u,x); &#125; inline void work()&#123; n=read(),k=read(); for(int i=1;i&lt;n;i++) addedge(read(),read()); S[0][0]=S[1][1]=1; for(int i=2;i&lt;=k;i++) for(int j=1;j&lt;=i;j++) S[i][j]=(S[i-1][j-1]+S[i-1][j]*j)%mod; mul[0]=1;for(int i=1;i&lt;=k;i++) mul[i]=mul[i-1]*i%mod; dfs1(1,0),dfs2(1,0); for(int i=1;i&lt;=n;i++)&#123; int ans=0; for(int j=0;j&lt;=k;j++) ans=(ans+1ll*S[k][j]*mul[j]*g[i][j])%mod; printf(&quot;%d\\n&quot;,ans); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"}]},{"title":"P5110 块速递推-光速幂、斐波那契数列通项","slug":"P5110 块速递推-光速幂、斐波那契数列通项","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:25:02.950Z","comments":true,"path":"2022/04/30/P5110 块速递推-光速幂、斐波那契数列通项/","permalink":"https://starcried.github.io/2022/04/30/P5110%20%E5%9D%97%E9%80%9F%E9%80%92%E6%8E%A8-%E5%85%89%E9%80%9F%E5%B9%82%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E9%80%9A%E9%A1%B9/","excerpt":"","text":"P5110 块速递推 题意 多次询问，求数列 \\[ a_i=\\begin{cases}233a_{i-1}+666a_{i-2} &amp; i&gt;1\\\\ 0 &amp; i=0\\\\ 1 &amp; i=1\\\\ \\end{cases} \\] 的第 \\(n\\) 项在 \\(\\mod 1e9+7\\) 意义下的值的异或和。 思路 首先这个数列是一个广义斐波那契数列。对于广义斐波那契数列，我们一般是用矩阵快速幂求的。 但是，这个题的询问次数是 \\(5e7\\) 。 所以我们就必须用 \\(O(1)\\) 的方法处理询问。于是，一个自诩光速幂的东西登场了。 实际上，光速幂就是在 \\(\\sqrt n\\) 的时间复杂度内预处理，然后 \\(O(1)\\) 查询。具体来讲，我们可以预处理出转移矩阵的 \\(1、2、\\cdots、\\sqrt n\\) 和 \\(1\\sqrt n、2\\sqrt n、\\cdots、\\sqrt n \\sqrt n\\) 显然就可以 \\(O(1)\\) 求这个东西了。 但是！询问的数字大小肯定不是在模域范围内的，所以我们需要找循环节。 有一个问题就是，矩阵的循环节并不固定。 但是有一个结论，对角线元素互不相同的下三角矩阵的循环节为 \\(\\large\\mathbf{\\varphi_{mod}}\\) 。但是笔者并不会证。 所以这题的正解并不是矩阵光速幂QAQ 我们可以用生成函数或者特征方程或者待定系数法来推出通项公式。具体推导过程与斐波那契数列的推导类似，然后用二次剩余将在根号下的项化成模域下的数，然后我们就得出了数列的通项公式： \\[ a_n=233230706(94153035^n−905847205^n)\\pmod{10^9} \\] 然而我用矩阵光速幂水过去了。 之后学了上面的东西之后可能会试着推一下。 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#define int unsignedusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int mod=1e9+7,ring=1e9+6,siz=31623; struct mat&#123; int a[2][2]; mat()&#123;memset(a,0,sizeof a);&#125; inline void set()&#123;a[0][0]=a[1][1]=1;&#125; inline int* operator [] (const int x)&#123;return a[x];&#125; inline const int* operator [] (const int x) const &#123;return a[x];&#125; inline mat operator * (const mat &amp;b)const&#123; mat ans; for(int i=0;i&lt;2;i++) for(int j=0;j&lt;2;j++) for(int k=0;k&lt;2;k++) (ans[i][j]+=1ll*a[i][k]*b[k][j]%mod)&gt;=mod&amp;&amp;(ans[i][j]-=mod); return ans; &#125; &#125;now,pow[siz+1],Pow[siz+1]; unsigned long long SA,SB,SC; void init()&#123;scanf(&quot;%llu%llu%llu&quot;,&amp;SA,&amp;SB,&amp;SC);&#125; unsigned long long rand() &#123; SA^=SA&lt;&lt;32,SA^=SA&gt;&gt;13,SA^=SA&lt;&lt;1; unsigned long long t=SA; SA=SB,SB=SC,SC^=t^SA;return SC; &#125; inline void work()&#123; now[0][1]=0,now[0][0]=1,pow[1][0][0]=233,pow[1][1][0]=666,pow[1][0][1]=1; pow[0].set(); Pow[0].set(); for(int i=2;i&lt;=siz;i++) pow[i]=pow[i-1]*pow[1]; Pow[1]=pow[siz]; for(int i=2;i&lt;=siz;i++) Pow[i]=Pow[i-1]*Pow[1]; int T=read(); init(); unsigned ans=0; while(T--)&#123; int zp=rand()%ring; int x=zp/siz,y=zp%siz; int res; ans^=(res=(1ll*Pow[x][0][0]*pow[y][0][1]%mod+1ll*Pow[x][0][1]*pow[y][1][1]%mod))&gt;=mod?res-=mod:res; &#125; printf(&quot;%u\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"P4169-CDQ分治 K-D tree（三维偏序）-天使玩偶","slug":"P4169-CDQ分治 K-D tree（三维偏序）-天使玩偶","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:18:31.471Z","comments":true,"path":"2022/04/30/P4169-CDQ分治 K-D tree（三维偏序）-天使玩偶/","permalink":"https://starcried.github.io/2022/04/30/P4169-CDQ%E5%88%86%E6%B2%BB%20K-D%20tree%EF%BC%88%E4%B8%89%E7%BB%B4%E5%81%8F%E5%BA%8F%EF%BC%89-%E5%A4%A9%E4%BD%BF%E7%8E%A9%E5%81%B6/","excerpt":"","text":"P4169-CDQ分治/K-D tree（三维偏序）-天使玩偶 这是一篇两种做法都有的题解 题外话 我写吐了…… 本着不看题解的原则，没写（不会）K-D tree，就写了个cdq分治的做法。下面是我的写题步骤： 想着树状数组维护不了区间最值，于是写了线段树，因为一个**的错误调了几个小时； cdq只写了两个方向。显然是错的，因为没考虑修改。所以挂了； 加上另外两个方向，正确性终于ok，兴高采烈地交上去然后TLE； 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;char buf[1&lt;&lt;23],*p1=buf,*p2=buf,obuf[1&lt;&lt;23],*O=obuf;#define getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;void print(long long x) &#123; if(x&gt;9) print(x/10); *O++=x%10+&#x27;0&#x27;;&#125;namespace star&#123; const int maxn=6e5+10,INF=0x3f3f3f3f; int n,m,ans[maxn],LN=0,RN=1000006; struct query&#123; int x,y,id,op; &#125;q[maxn&lt;&lt;1]; inline bool cmp1(query a,query b)&#123;return a.x&lt;b.x;&#125; inline bool cmp2(query a,query b)&#123;return a.x&gt;b.x;&#125; struct SegmentTree&#123; #define ls (ro&lt;&lt;1) #define rs (ro&lt;&lt;1|1) struct tree&#123; int l,r,mx; &#125;e[16000005]; void build(int ro,int l,int r)&#123; e[ro].l=l,e[ro].r=r; if(l==r)&#123; e[ro].mx=-INF;return; &#125; int mid=l+r&gt;&gt;1; build(ls,l,mid); build(rs,mid+1,r); e[ro].mx=max(e[ls].mx,e[rs].mx); &#125; void update(int ro,int k,int v)&#123; int l=e[ro].l,r=e[ro].r; if(l==r)&#123; e[ro].mx=max(e[ro].mx,v);return; &#125; int mid=l+r&gt;&gt;1; if(k&lt;=mid)update(ls,k,v); else update(rs,k,v); e[ro].mx=max(e[ls].mx,e[rs].mx); &#125; void update2(int ro,int k,int v)&#123; int l=e[ro].l,r=e[ro].r; if(l==r)&#123; e[ro].mx=v;return; &#125; int mid=l+r&gt;&gt;1; if(k&lt;=mid)update2(ls,k,v); else update2(rs,k,v); e[ro].mx=max(e[ls].mx,e[rs].mx); &#125; int query(int ro,int x,int y)&#123; int l=e[ro].l,r=e[ro].r; if(l==x and r==y)return e[ro].mx; int mid=l+r&gt;&gt;1; if(y&lt;=mid)return query(ls,x,y); else if(x&gt;mid)return query(rs,x,y); else return max(query(ls,x,mid),query(rs,mid+1,y)); &#125; #undef ls #undef rs &#125;T; void cdq(int l,int r)&#123; if(l==r)return; int mid=l+r&gt;&gt;1; cdq(l,mid),cdq(mid+1,r); int i,j; sort(q+l,q+mid+1,cmp1),sort(q+mid+1,q+r+1,cmp1); for(i=mid+1,j=l;i&lt;=r;i++)&#123; while(q[j].x&lt;=q[i].x and j&lt;=mid)&#123; if(!q[j].op) T.update(1,q[j].y,q[j].x+q[j].y);j++; &#125; if(q[i].op)ans[q[i].id]=min(ans[q[i].id],q[i].x+q[i].y-T.query(1,LN,q[i].y)); &#125; for(i=l;i&lt;j;i++) T.update2(1,q[i].y,-INF); for(i=mid+1,j=l;i&lt;=r;i++)&#123; while(q[j].x&lt;=q[i].x and j&lt;=mid)&#123; if(!q[j].op) T.update(1,q[j].y,q[j].x-q[j].y);j++; &#125; if(q[i].op)ans[q[i].id]=min(ans[q[i].id],q[i].x-q[i].y-T.query(1,q[i].y,RN)); &#125; for(i=l;i&lt;j;i++) T.update2(1,q[i].y,-INF); sort(q+l,q+mid+1,cmp2),sort(q+mid+1,q+r+1,cmp2); for(i=mid+1,j=l;i&lt;=r;i++)&#123; while(q[j].x&gt;=q[i].x and j&lt;=mid)&#123; if(!q[j].op) T.update(1,q[j].y,q[j].y-q[j].x);j++; &#125; if(q[i].op)ans[q[i].id]=min(ans[q[i].id],q[i].y-q[i].x-T.query(1,LN,q[i].y)); &#125; for(i=l;i&lt;j;i++) T.update2(1,q[i].y,-INF); for(i=mid+1,j=l;i&lt;=r;i++)&#123; while(q[j].x&gt;=q[i].x and j&lt;=mid)&#123; if(!q[j].op) T.update(1,q[j].y,-q[j].y-q[j].x);j++; &#125; if(q[i].op)ans[q[i].id]=min(ans[q[i].id],-q[i].y-q[i].x-T.query(1,q[i].y,RN)); &#125; for(i=l;i&lt;j;i++) T.update2(1,q[i].y,-INF); &#125; inline void work()&#123; n=read(),m=read(); memset(ans,INF,sizeof ans); for(int i=1;i&lt;=n;i++) q[i].x=read(),q[i].y=read(),LN=min(LN,q[i].y),RN=max(RN,q[i].y),q[i].op=0; for(int i=n+1;i&lt;=n+m;i++)&#123; q[i].op=(read()-1); q[i].id=q[i-1].id+q[i].op; q[i].x=read(),q[i].y=read(); &#125; int mx=q[n+m].id; T.build(1,LN,RN); cdq(1,n+m); for(int i=1;i&lt;=mx;i++)print(ans[i]),*O++=&#x27;\\n&#x27;; fwrite(obuf,O-obuf,1,stdout); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 原以为是线段树常数过大，学习了树状数组解法然后WA了； 改回了线段树，把sort换成了merge，又WA； 只有最后一个办法了：改成树状数组+merge，要是再挂我就当场去学KD-tree. 写挂了，我滚去学K-D tree了。 K-D tree K-D tree是一种维护多维空间点的数据结构，在这道题上是两维所以也叫作2-D tree。具体实现方式是将每个节点所在的区域切割递归建成二叉树，每一个树上的节点代表一个实际的结点，但又存储着选择这个结点时的区域大小。 建树 KDT在建树时，为了让它保持平衡，我们需要尽量选择所在空间维度的中位数，所以在保证时间复杂度正确的情况下我们可以使用nth_element函数，其作用是在线性时间内将一个数摆到它排序后应该在的位置，而将比它小的放在左边，比他大的放在右边（不重载运算符情况下是从小到大），但不是有序排列。 1234567891011121314151617int build(int l,int r)&#123; if(l&gt;r)return 0; int mid=l+r&gt;&gt;1; double av[2],va[2]; av[0]=av[1]=va[0]=va[1]=0; for(int i=l;i&lt;=r;i++)av[0]+=e[g[i]].x,av[1]+=e[g[i]].y; av[0]/=(r-l+1),av[1]/=(r-l+1); for(int i=l;i&lt;=r;i++) va[0]+=(av[0]-e[g[i]].x)*(av[0]-e[g[i]].x), va[1]+=(av[1]-e[g[i]].y)*(av[1]-e[g[i]].y);//寻找应该切割的维度 if(va[0]&gt;va[1])nth_element(g+l,g+mid,g+r+1,cmpx),e[g[mid]].d=1;//d是维度 else nth_element(g+l,g+mid,g+r+1,cmpy),e[g[mid]].d=2; e[g[mid]].ls=build(l,mid-1); e[g[mid]].rs=build(mid+1,r); maintain(g[mid]);//pushup函数，更新节点信息。 return g[mid];&#125; 插入 从root递归下去查找，按照当前节点所在维度向下插入，到达空节点时新建节点存储信息。 注意：当插入节点过多时KDT有可能失衡，此时我们需要将它拍扁重建（pia~）（因为KDT的结构，好像没有别的方法了？）\\(^ ①\\) 1234567891011121314void insert(int &amp;x,int k)&#123; if(!x)&#123; x=k,maintain(k);return; &#125; if(e[x].d==1)&#123; if(e[k].x&lt;=e[x].x)insert(e[x].ls,k); else insert(e[x].rs,k); &#125;else&#123; if(e[k].y&lt;=e[x].y)insert(e[x].ls,k); else insert(e[x].rs,k); &#125; maintain(x); if(bad(x)) rebuild(x);//pia&#125; 12inline bool bad(int x)&#123;return 0.9*e[x].siz&lt;=(double)max(e[e[x].ls].siz,e[e[x].rs].siz);&#125;//0.9为拍扁的阈值，越大拍扁越不频繁，但有可能失衡，按照实际情况调整。注意，实测其为0.8时会爆栈。 1234567891011void getson(int x)&#123; if(!x)return; getson(e[x].ls); g[++t]=x; getson(e[x].rs);&#125;inline void rebuild(int &amp;x)&#123; t=0; getson(x);//找到所有被拍扁的节点（其实没必要，新建节点也行） x=build(1,t);&#125; 查询 此题要求查询距离关键点最近的点的距离。 注意：我们在查询下传的时候需要比较的是区块位置距离关键点的距离，而统计答案是按照当前节点的坐标统计。 1234567891011121314int ans=INF;//请不要学鄙人用全局变量传参，我被人嘴了void query(int x)&#123; cmin(ans,dist(x)); int dl=INF,dr=INF; if(e[x].ls)dl=getdis(e[x].ls); if(e[x].rs)dr=getdis(e[x].rs); if(dl&lt;dr)&#123; if(dl&lt;ans)query(e[x].ls); if(dr&lt;ans)query(e[x].rs); &#125;else&#123; if(dr&lt;ans)query(e[x].rs); if(dl&lt;ans)query(e[x].ls); &#125;&#125; 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#define cmin(i,j) (i)=min((i),(j))#define cmax(i,j) (i)=max((i),(j))using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=6e5+10,INF=0x3f3f3f3f; int n,m,rt,tot,qx,qy,g[maxn],t; struct node&#123; int x,y,ls,rs,l[2],r[2],siz,d; &#125;e[maxn]; inline bool cmpx(int a,int b)&#123;return e[a].x&lt;e[b].x;&#125; inline bool cmpy(int a,int b)&#123;return e[a].y&lt;e[b].y;&#125; inline void maintain(int x)&#123; e[x].siz=e[e[x].ls].siz+e[e[x].rs].siz+1; e[x].l[0]=e[x].r[0]=e[x].x; e[x].l[1]=e[x].r[1]=e[x].y; if(e[x].ls) cmin(e[x].l[0],e[e[x].ls].l[0]),cmax(e[x].r[0],e[e[x].ls].r[0]), cmin(e[x].l[1],e[e[x].ls].l[1]),cmax(e[x].r[1],e[e[x].ls].r[1]); if(e[x].rs) cmin(e[x].l[0],e[e[x].rs].l[0]),cmax(e[x].r[0],e[e[x].rs].r[0]), cmin(e[x].l[1],e[e[x].rs].l[1]),cmax(e[x].r[1],e[e[x].rs].r[1]); &#125; int build(int l,int r)&#123; if(l&gt;r)return 0; int mid=l+r&gt;&gt;1; double av[2],va[2]; av[0]=av[1]=va[0]=va[1]=0; for(int i=l;i&lt;=r;i++)av[0]+=e[g[i]].x,av[1]+=e[g[i]].y; av[0]/=(r-l+1),av[1]/=(r-l+1); for(int i=l;i&lt;=r;i++) va[0]+=(av[0]-e[g[i]].x)*(av[0]-e[g[i]].x), va[1]+=(av[1]-e[g[i]].y)*(av[1]-e[g[i]].y); if(va[0]&gt;va[1])nth_element(g+l,g+mid,g+r+1,cmpx),e[g[mid]].d=1; else nth_element(g+l,g+mid,g+r+1,cmpy),e[g[mid]].d=2; e[g[mid]].ls=build(l,mid-1); e[g[mid]].rs=build(mid+1,r); maintain(g[mid]); return g[mid]; &#125; void getson(int x)&#123; if(!x)return; getson(e[x].ls); g[++t]=x; getson(e[x].rs); &#125; inline void rebuild(int &amp;x)&#123; t=0; getson(x); x=build(1,t); &#125; inline bool bad(int x)&#123;return 0.9*e[x].siz&lt;=(double)max(e[e[x].ls].siz,e[e[x].rs].siz);&#125; void insert(int &amp;x,int k)&#123; if(!x)&#123; x=k,maintain(k);return; &#125; if(e[x].d==1)&#123; if(e[k].x&lt;=e[x].x)insert(e[x].ls,k); else insert(e[x].rs,k); &#125;else&#123; if(e[k].y&lt;=e[x].y)insert(e[x].ls,k); else insert(e[x].rs,k); &#125; maintain(x); if(bad(x)) rebuild(x); &#125; inline int getdis(int x)&#123;return max(0,qx-e[x].r[0])+max(0,e[x].l[0]-qx)+max(0,qy-e[x].r[1])+max(0,e[x].l[1]-qy);&#125; inline int dist(int x)&#123;return abs(qx-e[x].x)+abs(qy-e[x].y);&#125; int ans; void query(int x)&#123; cmin(ans,dist(x)); int dl=INF,dr=INF; if(e[x].ls)dl=getdis(e[x].ls); if(e[x].rs)dr=getdis(e[x].rs); if(dl&lt;dr)&#123; if(dl&lt;ans)query(e[x].ls); if(dr&lt;ans)query(e[x].rs); &#125;else&#123; if(dr&lt;ans)query(e[x].rs); if(dl&lt;ans)query(e[x].ls); &#125; &#125; inline void work()&#123; n=read(),m=read(); while(n--)&#123; e[++tot].x=read(),e[tot].y=read(); g[tot]=tot; &#125; rt=build(1,tot); while(m--)&#123; if(read()==1)&#123; e[++tot].x=read(),e[tot].y=read(); insert(rt,tot); &#125;else&#123; qx=read(),qy=read();ans=INF;query(rt); printf(&quot;%d\\n&quot;,ans); &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 注释 ① K-D tree的重建方式含争议。事实上，作者是从OIwiki上学习的K-D tree写法，而在当页下方评论区中有人提出KDT不应该像替罪羊一样按照阈值重构，因为这样的话会在极端情况下多次重构导致时间复杂度退化。他提出，应该每插入\\(\\sqrt n\\)个点后将全树进行重构，这样保证时间复杂度最劣情况下全部插入为\\(O(n\\sqrt n)\\)，查询最劣情况下单次为\\(O(\\sqrt n)\\)。但是大家不用担心，愚以为大多数情况下本人这种写法的均摊时间复杂度是比另一种优的，实在不行可以适当调整阈值。欢迎大家激烈对线。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"分治","slug":"分治","permalink":"https://starcried.github.io/tags/%E5%88%86%E6%B2%BB/"}]},{"title":"P5296 [北京省选集训2019]生成树计数","slug":"P5296 [北京省选集训2019]生成树计数","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:30:16.392Z","comments":true,"path":"2022/04/30/P5296 [北京省选集训2019]生成树计数/","permalink":"https://starcried.github.io/2022/04/30/P5296%20[%E5%8C%97%E4%BA%AC%E7%9C%81%E9%80%89%E9%9B%86%E8%AE%AD2019]%E7%94%9F%E6%88%90%E6%A0%91%E8%AE%A1%E6%95%B0/","excerpt":"","text":"P5296 [北京省选集训2019]生成树计数 题意 求一个带权无向图所有生成树边权和的 \\(k\\) 次方的和。 思路 首先有一个结论：\\(a^i\\) 的 EGF 卷 \\(b^i\\) 的 EGF 等于 \\((a+b)^i\\) 的 EGF。即： \\[ F(a)=\\sum_{i=0}\\frac{a^ix^i}{i!}\\\\ F(a+b)=F(a)*F(b) \\] 证明如下： \\[ (a+b)^k=\\sum_{i=0}^k{k\\choose i}a^ib^{k-i}=\\sum_{i=0}^k\\frac{k!}{i!(k-i)!} a^ib^{k-i}\\\\ \\Rightarrow \\sum_{i=0}^k\\frac{a^i}{i!}\\frac{b^{k-i}}{(k-i)!}k!=(a+b)^k \\\\ \\Rightarrow \\sum_{i=0}^k\\frac{a^i}{i!}\\frac{b^{k-i}}{(k-i)!}=\\frac{(a+b)^k}{k!}\\\\ \\] 然后又有一个结论：度数矩阵减去邻接矩阵的余子式的行列式的值是图所有生成树边权积的和。其中，度数矩阵表示与其相连的边权的和，邻接矩阵为边权。这是矩阵树定理。 于是，我们将边权化为生成函数，然后利用矩阵树定理算出来答案的生成函数即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=35,mod=998244353; int n,k,mul[maxn],inv[maxn]; inline int fpow(int a,int b)&#123;int ans=1;for(;b;b&gt;&gt;=1,a=1ll*a*a%mod) if(b&amp;1) ans=1ll*ans*a%mod;return ans;&#125; struct poly&#123; int a[maxn]; poly():a()&#123;&#125; poly(int x):a()&#123;for(int i=0,d=1;i&lt;=k;i++,d=1ll*d*x%mod) a[i]=1ll*star::inv[i]*d%mod;&#125; int&amp; operator [](const int &amp;x)&#123;return a[x];&#125; const int &amp;operator [](const int &amp;x) const &#123;return a[x];&#125; friend poly operator + (const poly&amp; a,const poly&amp; b) &#123; poly ans; for(int i=0;i&lt;=k;i++) ans[i]=(a[i]+b[i])%mod; return ans; &#125; friend poly operator - (const poly&amp; a,const poly&amp; b) &#123; poly ans; for(int i=0;i&lt;=k;i++) ans[i]=(a[i]-b[i]+mod)%mod; return ans; &#125; friend poly operator * (const poly&amp; a,const poly&amp; b) &#123; poly ans; for(int i=0;i&lt;=k;i++) for(int j=0;j&lt;=i;j++) ans[i]=(ans[i]+1ll*a[j]*b[i-j])%mod; return ans; &#125; inline poly operator - () const &#123; poly ans; for(int i=0;i&lt;=k;i++) ans[i]=(mod-a[i])%mod; return ans; &#125; inline poly inv() const &#123; poly ans,res; ans[0]=fpow(a[0],mod-2); for(int i=1;i&lt;=k;i++) res[i]=1ll*a[i]*ans[0]%mod; for(int i=1;i&lt;=k;i++) for(int j=1;j&lt;=i;j++) ans[i]=(ans[i]+1ll*(mod-res[j])*ans[i-j])%mod; return ans; &#125; &#125;a[maxn][maxn],ans; inline void work()&#123; n=read()-1,k=read(); mul[0]=inv[0]=1; for(int i=1;i&lt;=k;i++) mul[i]=1ll*mul[i-1]*i%mod; inv[k]=fpow(mul[k],mod-2);for(int i=k-1;i&gt;0;i--) inv[i]=1ll*inv[i+1]*(i+1)%mod; for(int i=0;i&lt;=n;i++) for(int j=0;j&lt;=n;j++) if(i!=j) a[i][j]=-poly(read()),a[i][i]=a[i][i]-a[i][j];else read(); ans[0]=1; for(int i=1;i&lt;=n;i++)&#123; poly x=a[i][i].inv(); ans=ans*a[i][i]; for(int j=i;j&lt;=n;j++) a[i][j]=a[i][j]*x; for(int j=1;j&lt;=n;j++) if(j!=i)&#123; poly res=a[j][i]; for(int k=i;k&lt;=n;k++) a[j][k]=a[j][k]-a[i][k]*res; &#125; &#125; printf(&quot;%lld\\n&quot;,1ll*ans[k]*mul[k]%mod); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"多项式","slug":"多项式","permalink":"https://starcried.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"},{"name":"高斯消元","slug":"高斯消元","permalink":"https://starcried.github.io/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"}]},{"title":"P5147-数学-随机数生成器","slug":"P5147-数学-随机数生成器","date":"2022-04-29T16:00:00.000Z","updated":"2024-10-06T17:43:26.649Z","comments":true,"path":"2022/04/30/P5147-数学-随机数生成器/","permalink":"https://starcried.github.io/2022/04/30/P5147-%E6%95%B0%E5%AD%A6-%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8/","excerpt":"","text":"P5147-数学-随机数生成器 （洛谷第一篇题解说这是高一数学题，新高二感觉到被吊打） 我们设work(x)的期望值为\\(f_x\\) 注意\\(f_1\\)是边界。不过对下列式子没有影响。原因参照必修的数列 那么\\(\\displaystyle f_n=1+\\frac{1}{n}\\sum_{i=1}^{n}f_i\\) 移项得到\\(\\displaystyle f_n=\\frac{n}{n-1}+\\frac{1}{n-1}\\sum_{i=1}^{n-1}f_i\\) 记\\(S_x\\)为\\(\\sum_{i=1}^{x}\\) 原式即为 \\(\\displaystyle f_n=\\frac{n}{n-1}+\\frac{1}{n-1}S_{n-1}\\) 通过高一的数学知识化简一下 \\(\\displaystyle f_n=1+\\sum_{i=1}^{n-1}\\frac{1}{i}\\) 发现这玩意就是个（伪）调和级数加1. 推出了通项公式！可以\\(O(1)\\)求解了……吗？ 看看n的范围然后会发现直接求后面这堆东西会死人的。 但是，调和级数我们还是懂的。当n趋近于正无穷时，后面这堆东西近似于调和级数。那么我们把它就当做是好了。 欧拉常数 \\(\\gamma=0.57721 56649 01532 86060 65120 90082 40243 10421 59335\\) 我们知道了欧拉常数，然后就解决了。 12345678910111213#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;cmath&gt;using namespace std;int main()&#123; int n; double ans=0; scanf(&quot;%d&quot;,&amp;n); if(n&lt;100000)for(int i=1;i&lt;n;i++)ans+=1.0/i;//范围较小时会有较大误差，暴力即可 else ans=log(n)+0.577215664901532; printf(&quot;%.5f&quot;,n==1?0:ans+1); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"}]},{"title":"P5042 丢失的题面","slug":"P5042 丢失的题面","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:24:23.836Z","comments":true,"path":"2022/04/30/P5042 丢失的题面/","permalink":"https://starcried.github.io/2022/04/30/P5042%20%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%A2%98%E9%9D%A2/","excerpt":"","text":"P5042 丢失的题面 顺序：10 - 1 - 7 - 8 - 9 - 4 - 5 - 6 - 2 - 3 Point 10 读入，特判，输出。 读入的英文意思是让选手输出自己的程序本身，这个题的确存在，但是这题并没有 SPJ ，所以特判一下输出输出文件就好了。 C++ 的atoi函数可以让读入的字符串变成数字以完成其他点的任务。 Point 1 我和其他聚铑做这个点的过程就十分有趣了。 开始，我们使用了大眼观察法观察了一下这个输出，不知道怎么我就看出了将序列每四个字符划分，然后变成若干以0110开头的长度为 4 的 01 串组。发现这些组的大小都在 3 以内，于是我们在 OEIS 上搜了一下这个序列，居然真的找到了：A007413 它的递推方式是三个元素，每次操作 a-&gt;abc b-&gt;ac c-&gt;b 。这道题中这三个字母分别代表 0110 01101001 和 011010011001 。做了一下，发现是对的。 然后观察文件大小发现输出的字符串长度是 \\(2^{22}\\) 。没细想，写完就过了。 但是为什么是 \\(2^{22}\\) 呢？ 我回头看了一眼，发现输出好像是初始一个 0 字符，每次操作将当前串取反拼接到后面，做 22 次的结果……（鬼知道我当初为啥直接就想每 4 个分组） 然后又看了下 OEIS，发现这个输出本身就是一个数列：A010060。这个序列还有个名字叫做 Thue-Morse Sequence 在wikihow中，叙述了这个序列的几种构造方法，除了上述的两种构造方式之外，还可以直接每次操作 0-&gt;01 1-&gt;10 来构造。 真有趣 但是代码还是用的第一次写的，懒得改了。（by a___) 12345678910111213141516171819202122232425namespace subtask1&#123; int n=22; vector&lt;vector&lt;int&gt;&gt;vec,tmp; string s[4],ans; vector&lt;int&gt;to[4]; inline void main()&#123; int n=20; to[1]=vector&lt;int&gt;(&#123;1,2,3&#125;); to[2]=vector&lt;int&gt;(&#123;1,3&#125;); to[3]=vector&lt;int&gt;(&#123;2&#125;); vec.push_back(std::vector&lt;int&gt;(&#123;1&#125;)); while(n--) &#123; for(auto p:vec) for(auto q:p)tmp.push_back(to[q]); swap(vec,tmp);tmp.clear(); &#125; s[1]=&quot;0110&quot;; s[2]=&quot;01101001&quot;; s[3]=&quot;011010011001&quot;; for(auto p:vec)ans+=s[p.size()]; ans.resize(1&lt;&lt;22); std::cout&lt;&lt;ans&lt;&lt;std::endl; &#125;&#125; Point 7 因为 2~6 个点都没有什么思路，直接来看第 7 个点。 观察了一下输入，发现是一个图，而且边没有边权。观察了一下输出，发现输出只有 0 和 INF 两种数字。于是几乎可以确定是判断图上两点间连通性了。 1234567891011121314namespace subtask7&#123; int fa[100005]; int find(int x)&#123;return fa[x]==x?x:fa[x]=find(fa[x]);&#125; inline void onion(int x,int y)&#123; x=find(x),y=find(y); if(x!=y) fa[x]=y; &#125; inline void main(int n,int m)&#123; int q=read(); while(n) fa[n]=n,n--; while(m--) onion(read(),read()); while(q--) puts(find(read())==find(read())?&quot;0&quot;:&quot;2139062143&quot;); &#125;&#125; Point 8 切完了上面的点，一看这个点也是个图，而且边有边权。大概扫了一下发现这是个随机生成的树，边权也是随的。询问格式是两个点。 再观察输出，发现输出的答案大多都大于 90000。说明是一个答案期望较大的询问。两点间路径和或者乘积不可能，试验了一下异或发现答案溢出 100000，那么或也顺便排除。 傻了吧唧地想了半天，突然有一位聚铑想到，为啥不是最大值呢？ 试了一下果然没错。 12345678910111213141516171819202122232425262728293031323334namespace subtask8&#123; const int maxn=1e5+10; int fa[maxn][21],mx[maxn][21],Q,n=100000; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1],v[maxn&lt;&lt;1],dep[maxn]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;v[ecnt]=v[ecnt-1]=read(); &#125; void dfs(int x,int f)&#123; fa[x][0]=f;dep[x]=dep[f]+1; for(int i=0;i&lt;18;i++) fa[x][i+1]=fa[fa[x][i]][i],mx[x][i+1]=max(mx[x][i],mx[fa[x][i]][i]); for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==f)continue; mx[u][0]=v[i]; dfs(u,x); &#125; &#125; inline int solve(int x,int y)&#123; if(dep[x]&lt;dep[y])swap(x,y); int ans=0; for(int i=18;~i;i--) if(dep[fa[x][i]]&gt;=dep[y]) ans=max(ans,mx[x][i]),x=fa[x][i]; if(x==y)return ans; for(int i=18;~i;i--) if(fa[x][i]!=fa[y][i]) ans=max(ans,max(mx[x][i],mx[y][i])),x=fa[x][i],y=fa[y][i]; ans=max(ans,max(mx[x][0],mx[y][0])); return ans; &#125; inline void main()&#123; Q=read(); for(int i=1;i&lt;n;i++) addedge(read(),read()); dfs(1,0); while(Q--) printf(&quot;%d\\n&quot;,solve(read(),read())); &#125;&#125; Point 9 观察了一下输入，发现是个图。 观察了一下输出，发现有 INF 的存在，那么询问可能是让答案尽量小，所以盲猜最小瓶颈路。试了一下，果然是。 kruskal 的并查集和路径最大值都可以用前面的板子。（出题人真良心） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051namespace subtask9&#123; const int maxn=100005,INF=2139062143; int Fa[100005],fa[maxn][21],mx[maxn][21]; int find(int x)&#123;return Fa[x]==x?x:Fa[x]=find(Fa[x]);&#125; struct edge&#123; int u,v,val; inline bool operator &lt; (const edge&amp; zp) const &#123;return val&lt;zp.val;&#125; &#125;e[maxn&lt;&lt;1]; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1],v[maxn&lt;&lt;1],dep[maxn]; inline void addedge(int a,int b,int c)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;v[ecnt]=c; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;v[ecnt]=c; &#125; void dfs(int x,int f)&#123; fa[x][0]=f;dep[x]=dep[f]+1; for(int i=0;i&lt;18;i++) fa[x][i+1]=fa[fa[x][i]][i],mx[x][i+1]=max(mx[x][i],mx[fa[x][i]][i]); for(int i=head[x];i;i=nxt[i])&#123; int u=to[i]; if(u==f)continue; mx[u][0]=v[i]; dfs(u,x); &#125; &#125; inline int solve(int x,int y)&#123; if(dep[x]&lt;dep[y])swap(x,y); int ans=0; for(int i=18;~i;i--) if(dep[fa[x][i]]&gt;=dep[y]) ans=max(ans,mx[x][i]),x=fa[x][i]; if(x==y)return ans; for(int i=18;~i;i--) if(fa[x][i]!=fa[y][i]) ans=max(ans,max(mx[x][i],mx[y][i])),x=fa[x][i],y=fa[y][i]; ans=max(ans,max(mx[x][0],mx[y][0])); return ans; &#125; inline void main()&#123; read();int Q=read(); for(int i=1;i&lt;=100000;i++) Fa[i]=i,e[i].u=read(),e[i].v=read(),e[i].val=read(); sort(e+1,e+100001); for(int i=1;i&lt;=100000;i++)&#123; int u=find(e[i].u),v=find(e[i].v); if(u!=v)&#123; Fa[u]=v; addedge(e[i].u,e[i].v,e[i].val); &#125; &#125; for(int i=1;i&lt;=50000;i++) if(!dep[i]) dfs(i,0); while(Q--)&#123; int x=read(),y=read(); if(find(x)!=find(y))printf(&quot;%d\\n&quot;,INF); else printf(&quot;%d\\n&quot;,solve(x,y)); &#125; &#125;&#125; Point 4 后面的全做完了，回头看一眼 01 串和 012 串，没啥思路，直接看第四个。 观察了一下输入输出，发现输入输出都是回文 什么玩意是回文的？ 第一个字符大概是 n，发现第一项是 1，第二项是 n。于是有个聚铑很自然地想到是组合数，然后发现输出也是对应的 n 的一行组合数，于是就切了。 拆了一下数，发现模数是 104857601，一个 NTT 模数。 12345678910111213141516namespace subtask4&#123; const int maxn=3e5; int mul[maxn],inv[maxn],n; inline int C(int n,int m)&#123;return 1ll*mul[n]*inv[m]%mod*inv[n-m]%mod;&#125; inline void pre()&#123; mul[0]=inv[0]=1; for(int i=1;i&lt;=n;i++) mul[i]=1ll*mul[i-1]*i%mod; inv[n]=fpow(mul[n],mod-2);for(int i=n-1;i;i--) inv[i]=1ll*inv[i+1]*(i+1)%mod; &#125; inline void main()&#123; n=262144; pre(); printf(&quot;%d\\n&quot;,n); for(int i=0;i&lt;=n;i++) printf(&quot;%d\\n&quot;,C(n,i)); &#125;&#125; PS 后来思考了一下为什么输入把 131072 的一行组合数也全给了，根据二项式定理，输入给出的是 \\((x+1)^n\\)，然后输出的 n 恰好是输入的两倍。所以实际上是让我们算 \\((x+1)^{2n}\\)。也就是做一遍多项式乘法。 会有人写这玩意吗，还是为了给没看出来是组合数的选手分？ Point 5 刚才切了第四个点的聚铑趁热打铁，瞬间就看出来了是每一项乘上了一个 \\((-1)^i\\) 。于是又切了。 当然，如果您想写多项式开根也可以。 因为和前面一个点比较像，就放在一起了。 12345678910111213141516namespace subtask4&#123; const int maxn=3e5; int mul[maxn],inv[maxn],n; inline int C(int n,int m)&#123;return 1ll*mul[n]*inv[m]%mod*inv[n-m]%mod;&#125; inline void pre()&#123; mul[0]=inv[0]=1; for(int i=1;i&lt;=n;i++) mul[i]=1ll*mul[i-1]*i%mod; inv[n]=fpow(mul[n],mod-2);for(int i=n-1;i;i--) inv[i]=1ll*inv[i+1]*(i+1)%mod; &#125; inline void main2()&#123; n=131072; pre(); printf(&quot;%d\\n&quot;,n); for(int i=0;i&lt;=n;i++) printf(&quot;%d\\n&quot;,i&amp;1?mod-C(n,i):C(n,i)); &#125;&#125; Point 6 刚才那位聚铑乘胜追击，观察了一下输入输出的项数，发现输出刚好是输入的 \\(\\frac{1}{3}\\) 。 什么东西能减少项数，而且刚好减到 \\(\\frac{1}{3}\\)？ 只有聚铑知道答案。他一眼就看出来这似乎是一个多项式三次剩余，然后确实是对的。 然而珂爱似乎有更好的方法，因为这个 \\(5e5\\) 的数据范围，还是用的多项式快速幂真的太勉强了，加了快读快输开优化才能过。用珂爱的方法或者多项式三次方根或许能更好（更短）地通过此题。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687namespace subtask6&#123; const int maxn=533000&lt;&lt;2,mod=104857601,g=3,gi=104857602/3,n=177147,p=63776689; struct NTT&#123; int r[maxn],lim; inline void getr(int li)&#123; lim=li; for(int i=0;i&lt;lim;i++) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(lim&gt;&gt;1)); &#125; inline void operator () (int *a,int type) const &#123; for(int i=0;i&lt;lim;i++) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int mid=1;mid&lt;lim;mid&lt;&lt;=1)&#123; int rt=fpow(type==1?g:gi,(mod-1)/(mid&lt;&lt;1)); for(int r=mid&lt;&lt;1,j=0;j&lt;lim;j+=r)&#123; int p=1; for(int k=0;k&lt;mid;k++,p=1ll*p*rt%mod)&#123; int x=a[j+k],y=1ll*p*a[j+k+mid]%mod; a[j+k]=(x+y)%mod,a[j+k+mid]=(x-y+mod)%mod; &#125; &#125; &#125; if(type==-1) for(int p=fpow(lim,mod-2),i=0;i&lt;lim;i++) a[i]=1ll*a[i]*p%mod; &#125; &#125;ntt; void inv(const int *a,int *ans,int n)&#123; if(n==1) return ans[0]=fpow(a[0],mod-2),ans[1]=0,void(); static int res[maxn]; inv(a,ans,n&gt;&gt;1); int lim=n&lt;&lt;1; ntt.getr(lim); for(int i=0;i&lt;n;i++) res[i]=a[i]; for(int i=n;i&lt;lim;i++) res[i]=ans[i]=0; ntt(res,1),ntt(ans,1); for(int i=0;i&lt;lim;i++) ans[i]=ans[i]*(2-1ll*ans[i]*res[i]%mod+mod)%mod; ntt(ans,-1); for(int i=n;i&lt;lim;i++) ans[i]=0; &#125; inline void deri(const int *a,int *ans,int n)&#123;for(int i=1;i&lt;n;i++) ans[i-1]=1ll*a[i]*i%mod;ans[n-1]=0;&#125; inline void inte(const int *a,int *ans,int n)&#123;for(int i=1;i&lt;n;i++) ans[i]=1ll*a[i-1]*fpow(i,mod-2)%mod;ans[0]=0;&#125; inline void ln(const int *a,int *ans,int n)&#123; static int res[maxn]; deri(a,res,n); inv(a,ans,n); int lim=n&lt;&lt;1; ntt.getr(lim); ntt(res,1),ntt(ans,1); for(int i=0;i&lt;lim;i++) res[i]=1ll*res[i]*ans[i]%mod,ans[i]=0; ntt(res,-1); inte(res,ans,n); for(int i=0;i&lt;lim;i++) res[i]=0; &#125; void exp(const int *a,int *ans,int n)&#123; if(n==1) return ans[0]=1,ans[1]=0,void(); static int res[maxn]; exp(a,ans,n&gt;&gt;1); ln(ans,res,n); int lim=n&lt;&lt;1; ntt.getr(lim); res[0]=(1+a[0]-res[0]+mod)%mod; for(int i=1;i&lt;n;i++) res[i]=(a[i]-res[i]+mod)%mod; ntt(ans,1),ntt(res,1); for(int i=0;i&lt;lim;i++) ans[i]=1ll*ans[i]*res[i]%mod,res[i]=0; ntt(ans,-1); for(int i=n;i&lt;lim;i++) ans[i]=0; &#125; inline void fpow(int const *a,int *ans,int k,int n)&#123; static int f[maxn],g[maxn]; for(int i=0;i&lt;n;i++)g[i]=f[i]=ans[i]=0; int d=0; while(!a[d]&amp;&amp;d&lt;n) ++d; int u=::fpow(a[d],mod-2),v=22131490; for(int i=0;i&lt;n-d;i++)g[i]=1ll*a[i+d]*u%mod; for(int i=n-d;i&lt;n;i++)g[i]=0; ln(g,f,n); for(int i=0;i&lt;n;i++)f[i]=1ll*f[i]*k%mod; exp(f,ans,n); d*=k; for(int i=n-1;i&gt;=d;i--)ans[i]=1ll*ans[i-d]*v%mod; for(int i=0;i&lt;d;i++)ans[i]=0; &#125; int a[maxn],ans[maxn]; inline void main()&#123; for(int i=0;i&lt;=n;i++) a[i]=read(); fpow(a,ans,::fpow(3,mod-2),1&lt;&lt;18); out(n); for(int i=0;i&lt;=n;i++) out(ans[i]); &#125;&#125; Point 2 终于要直面 01 串了。（由第一个点就可以知道我 01 串相关有多菜） 首先，一位聚铑通过观察文件大小发现字符个数恰好是斐波那契数列的第 33 项。 发现除了前三项，后面几项都符合斐波那契串。而一个斐波那契串内确实有这样的规律。 写了一下，发现是对的。 顺便模一下这位聚铑写得真可爱。 1234567namespace subtask2&#123; string s[2]=&#123;&quot;0&quot;,&quot;1&quot;&#125;; inline void main()&#123; for(int i=2;i&lt;33;i++) s[i&amp;1]=s[i&amp;1]+s[i&amp;1^1]; puts(s[0].c_str()); &#125;&#125; Point 3 这个点是最艰难的点了。 使劲找规律，先发现字符个数是 \\(3^{12}+11\\) ，然后思考有什么规律。 除去第一个 0，每 12 个数分开，看起来好像是三进制数每次 +1 再 +2 。 往后看了看，什么玩意 经过艰苦的奋斗，最终还是没找出来，于是去膜拜的珂爱的题解。感觉就是个找规律。因为是抄别人的，所以写出来也没啥意思。贴一下别人的代码。 1234567891011121314151617181920212223namespace subtask3&#123; using namespace std; void main() &#123; unordered_set&lt;string&gt;st; string s=&quot;000000000001&quot;,output=&quot;&quot;; while(1）&#123; output+=s[0]; st.insert(s); s+=s[0]; s.erase(0,1); while(st.count(s)&amp;&amp;s!=&quot;000000000000&quot;)&#123; ++s[11]; for(int i=11;~i&amp;&amp;s[i]==&#x27;3&#x27;;--i)&#123; s[i]=&#x27;0&#x27;; if(i)++s[i-1]; &#125; &#125; if(s==&quot;000000000000&quot;)break; &#125; cout&lt;&lt;0&lt;&lt;output&lt;&lt;&quot;00000000000\\n&quot;; &#125;&#125; 代码 都在上面了。贴一下我的主函数（包括第十个点的特判）和用到的全局函数和变量。 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;vector&gt;#include&lt;string&gt;#include&lt;unordered_set&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;const int mod=104857601;char O_[999999],*OU=O_,*OV=OU+999991,OS[21],*OT=OS;#define F fwrite(O_,1,OU-O_,stdout)#define O(x) (*(OU=(OU==OV?(F,O_):OU))++=(x))void out(int x)&#123;for(;*OT++=x%10+48,x/=10;);for(;OT!=OS;O(*--OT));O(10);&#125;inline int fpow(int a,int b)&#123;int ans=1;for(;b;b&gt;&gt;=1,a=1ll*a*a%mod) if(b&amp;1) ans=1ll*ans*a%mod;return ans;&#125;int n;//------------------------------------------------------------signed main()&#123; char s[10]; scanf(&quot;%s&quot;,s); if(strcmp(s,&quot;Maybe&quot;)==0) return puts(&quot;Your program should output itself here.\\nSounds very difficult, yeah?\\nAnyway, good luck!&quot;),0; n=atoi(s); if(n==22)subtask1::main(); if(n==33)subtask2::main(); if(n==12)subtask3::main(); if(n==531441)subtask6::main(); if(n==131072)subtask4::main(); if(n==262144)subtask4::main2(); if(n==100000)&#123; int m=read(); if(m==100000) subtask7::main(n,m); else subtask8::main(); &#125;else if(n==50000) subtask9::main(); return F,0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"模拟","slug":"模拟","permalink":"https://starcried.github.io/tags/%E6%A8%A1%E6%8B%9F/"}]},{"title":"P5311 [Ynoi2011] 成都七中","slug":"P5311 [Ynoi2011] 成都七中","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:18:33.966Z","comments":true,"path":"2022/04/30/P5311 [Ynoi2011] 成都七中/","permalink":"https://starcried.github.io/2022/04/30/P5311%20[Ynoi2011]%20%E6%88%90%E9%83%BD%E4%B8%83%E4%B8%AD/","excerpt":"","text":"P5311 [Ynoi2011] 成都七中 题意 给你一棵 \\(n\\) 个节点的树，每个节点有一种颜色，有 \\(m\\) 次查询操作。 查询操作给定参数 \\(l\\ r\\ x\\)，需输出： 将树中编号在 \\([l,r]\\) 内的所有节点保留，\\(x\\) 所在连通块中颜色种类数。 每次查询操作独立。 思路 考虑点分树的思想。假设我们已经建出点分树，对于每一个分治中心，我们应该维护什么东西？ 我们从分治中心开始遍历，记录遍历到每个点路径上编号的最小值和最大值。很显然，如果遍历到一个询问的 \\(x\\) 的时候路径上最值范围在询问区间以内，那么对于这个询问 \\(x\\) 点与分治中心是联通的。 考虑这个分治中心是怎么给询问更新答案的。我们在遍历的时候记录一下到达每个点时的路径最值和该点的颜色，最后统计答案的时候枚举每个满足上述条件的询问的右端点，用\"HH的项链\"一题的方法用树状数组记录每种颜色的最小编号的最大值的颜色个数，查询区间答案即可。显然，这个时候树状数组里的每一个答案都与分治中心联通，而分治中心又与询问点联通，故能将范围内的答案统计完全。 那么问题来了，每个询问答案被统计几次、在哪里被统计能统计完全呢？ 考虑点分树的结构。对于一个询问的编号区间，假设 \\(u\\) 为询问点 \\(x\\) 的点分树祖先，\\(v\\) 为 \\(u\\) 点分树祖先，且两者都与 \\(x\\) 联通，那么 \\(v\\) 包含的范围一定比 \\(u\\) 大而且完全包含 \\(u\\) 的范围。我们刚才说在分治中心的统计能将整个范围内的答案都统计完全，所以 \\(x\\) 在 \\(v\\) 处被统计一定包含在 \\(u\\) 处统计的所有答案。 我们再考虑一个事情，若 \\(u\\ v\\) 定义同上，但\\(u\\) 与 \\(x\\) 联通而 \\(v\\) 不与 \\(x\\) 联通，那么与 \\(u\\) 相对的 \\(v\\) 的彼处的所有点都一定不与 \\(x\\) 联通，因为这些点一定会经过 \\(v\\) 点。 综上，对于每个点，我们只需要选择一个深度最小的联通的祖先统计答案即可。这时统计的答案是完全的。 然后我们发现我们甚至不需要建出点分树。直接点分治，在每个分治中心搜索出范围内合法的询问，直接按照上述统计方式将询问答案求出，以后都不再更新该询问答案即可。 时间复杂度 \\(O(n\\log^2n)\\)，空间复杂度 \\(O(n)\\)。空间小、时间常数小、代码短的方法谁不喜欢呢~ 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;vector&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int n,m,c[maxn],C[maxn],ans[maxn],siz[maxn],rt,mx[maxn],lst[maxn]; bool vis[maxn],mark[maxn]; struct que&#123; int l,r,id; que()&#123;&#125; que(int l,int r,int id):l(l),r(r),id(id)&#123;&#125; bool operator &lt; (const que &amp;b) const &#123;return r&lt;b.r;&#125; &#125;; vector&lt;int&gt; V[maxn]; vector&lt;que&gt; qu[maxn],a,q; inline void insert(int x,int k)&#123;if(x)for(;x&lt;=n;x+=x&amp;-x) C[x]+=k;&#125; inline int query(int x)&#123;int ans=0;for(;x;x-=x&amp;-x) ans+=C[x]; return ans;&#125; void getrt(int x,int fa,int S)&#123; siz[x]=1,mx[x]=0; for(auto u:V[x]) if(!vis[u] and u!=fa) getrt(u,x,S),mx[x]=max(mx[x],siz[u]),siz[x]+=siz[u]; if((mx[x]=max(mx[x],S-siz[x]))&lt;mx[rt]) rt=x; &#125; void dfs(int x,int fa,int l,int r)&#123; siz[x]=1,a.emplace_back(l,r,c[x]); for(auto u:qu[x]) if(!mark[u.id] and u.l&lt;=l and r&lt;=u.r) mark[u.id]=true,q.push_back(u); for(auto u:V[x]) if(!vis[u] and u!=fa) dfs(u,x,min(l,u),max(r,u)),siz[x]+=siz[u]; &#125; void solve(int x)&#123; vis[x]=true; a.clear(),q.clear(),dfs(x,0,x,x); sort(a.begin(),a.end()),sort(q.begin(),q.end()); for(int i=0,j=0;i&lt;q.size();i++)&#123; while(j&lt;a.size() and a[j].r&lt;=q[i].r)&#123; if(a[j].l&gt;lst[a[j].id]) insert(lst[a[j].id],-1),insert(lst[a[j].id]=a[j].l,1); ++j; &#125; ans[q[i].id]=query(n)-query(q[i].l-1); &#125; for(auto u:a) insert(lst[u.id],-1),lst[u.id]=0; for(auto u:V[x]) if(!vis[u]) rt=0,getrt(u,x,siz[u]),solve(rt); &#125; inline void work()&#123; n=read(),m=read(),mx[0]=n+1; for(int i=1;i&lt;=n;i++) c[i]=read(); for(int u,v,i=1;i&lt;n;i++) u=read(),v=read(),V[u].push_back(v),V[v].push_back(u); for(int l,r,i=1;i&lt;=m;i++) l=read(),r=read(),qu[read()].emplace_back(l,r,i); getrt(1,0,n),solve(rt); for(int i=1;i&lt;=m;i++) printf(&quot;%d\\n&quot;,ans[i]); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"分治","slug":"分治","permalink":"https://starcried.github.io/tags/%E5%88%86%E6%B2%BB/"}]},{"title":"P5468 [NOI2019] 回家路线","slug":"P5468 [NOI2019] 回家路线","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:33:56.995Z","comments":true,"path":"2022/04/30/P5468 [NOI2019] 回家路线/","permalink":"https://starcried.github.io/2022/04/30/P5468%20[NOI2019]%20%E5%9B%9E%E5%AE%B6%E8%B7%AF%E7%BA%BF/","excerpt":"","text":"P5468 [NOI2019] 回家路线 斜率优化入门（指我写的东西而不是这道题） 题意 \\(n\\) 个节点，有 \\(m\\) 趟列车，车 \\(i\\) 从 \\(p_i\\) 时刻至 \\(q_i\\) 时刻从 \\(x_i\\) 地到 \\(y_i\\) 地。猫猫需要只坐列车从 \\(1\\) 节点到达 \\(n\\) 节点。 设猫猫在一个地方等待的时间为 \\(t\\)，那么代价为 \\(At^2+Bt+C\\)，其中 \\(A\\ B\\ C\\) 为给定非负常数，总代价为所有代价总和与到达时间的和。求最小代价。 思路 设 \\(f_i\\) 为走 \\(i\\) 趟列车前的最小代价，有转移方程： \\[ f_i=\\min_{y_j=x_i\\land q_j\\leq q_i}(f_j+A(p_i-q_j)^2+B(p_i-q_j)+C) \\] 最终代价即为： \\[ \\min f_i+q_i \\] 对于第一个方程，不考虑其他限制，即为找到最优的 \\(j\\) 更新 \\(i\\)，有： \\[ \\begin{aligned} f_i&amp;=f_j+A(p_i-q_j)^2+B(p_i-q_j)+C\\\\ f_i&amp;=f_j+Ap_i^2+Aq_j^2-2Ap_iq_j+Bp_i-Bq_j+C\\\\ f_j+Aq_j^2-Bq_j&amp;=2Ap_iq_j+f_i-Ap_i^2-Bp_i-C \\end{aligned} \\] 对于已经更新过的 \\(j\\)，\\(f_j+Aq_j^2-Bq_j\\) 是已知的。后半部分 \\(f_i-Ap_i^2-Bp_i-C\\) 只有 \\(f_i\\) 是未知的，也是我们要最优化的。 那么我们可以将上式看做 \\(y=kx+b\\) 的形式，其中 \\[ \\begin{aligned} &amp;y=f_j+Aq_j^2-Bq_j\\\\ &amp;x=q_j\\\\ &amp;k=2Ap_i\\\\ &amp;b=f_i-Ap_i^2-Bp_i-C \\end{aligned} \\] （常数其实可以属于任意一个位置，上述只是举例） 那么我们可以将所有可以转移到的 \\(j\\) 看做一个二维平面上的点，每次更新 \\(f_i\\) 实际是对一个斜率找出经过其中一个点得到的最优的 \\(b\\)。那么显然只会选到前者构成的凸包上的点。很多题查询的斜率都是单调的，而且之后在凸包后方插入新的点，于是维护凸包的数组就变成了单调队列。否则的话，就是动态维护凸包并在凸包上二分。 对于这道题，最优指最小，那么我们维护的是下凸包。 斜率优化的部分已经完了。考虑加入 \\(y_j=x_i, q_j\\leq p_i\\) 的限制怎么做。对于第一个限制，发现不同点互不影响，那么我们对每个点开一个单调队列，对于一个列车在它的 \\(x\\) 位置查询就好了。对于第二个限制，我们将所有列车按照 \\(p\\) 排序然后枚举时间，那么对于上面更新完的列车先不插入队列，当枚举时间到 \\(p\\) 的时候再将其插入即可。这样就能满足所有限制，并且保证查询的斜率单调递增。 代码 好像不会炸 long long 的样子。 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e6+10; int n,T,m,A,B,C,st[maxn],ed[maxn],p[maxn],q[maxn],hd[maxn],tl[maxn]; long long f[maxn],x[maxn],y[maxn],ans=0x3f3f3f3f3f3f3f3f; vector&lt;int&gt; V[maxn],G[maxn],que[maxn]; inline void work()&#123; n=read(),m=read(),A=read(),B=read(),C=read(); for(int i=1;i&lt;=m;i++) st[i]=read(),ed[i]=read(),p[i]=read(),q[i]=read(),T=max(T,q[i]),G[p[i]].push_back(i); for(int i=1;i&lt;=n;i++) hd[i]=0,tl[i]=-1; for(int t=0;t&lt;=T;t++)&#123; for(auto i:V[t])&#123; int e=ed[i]; while(hd[e]&lt;tl[e] and 1ll*(y[que[e][tl[e]]]-y[que[e][tl[e]-1]])*(x[i]-x[que[e][tl[e]]])&gt;=1ll*(y[i]-y[que[e][tl[e]]])*(x[que[e][tl[e]]]-x[que[e][tl[e]-1]])) --tl[e]; if(++tl[e]==que[e].size()) que[e].push_back(i); else que[e][tl[e]]=i; &#125; for(auto i:G[t])&#123; int e=st[i]; while(hd[e]&lt;tl[e] and (y[que[e][hd[e]+1]]-y[que[e][hd[e]]])&lt;2ll*A*p[i]*(x[que[e][hd[e]+1]]-x[que[e][hd[e]]])) ++hd[e]; if(hd[e]&gt;tl[e] and st[i]!=1) continue; int j=st[i]==1 and hd[e]&gt;tl[e]?0:que[e][hd[e]]; f[i]=f[j]+1ll*A*(p[i]-q[j])*(p[i]-q[j])+1ll*B*(p[i]-q[j])+C; x[i]=q[i],y[i]=f[i]+1ll*A*q[i]*q[i]-1ll*B*q[i]; V[q[i]].push_back(i); if(ed[i]==n) ans=min(ans,f[i]+q[i]); &#125; &#125; printf(&quot;%lld\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"优化","slug":"优化","permalink":"https://starcried.github.io/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"P5591 小猪佩奇学数学","slug":"P5591 小猪佩奇学数学","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:47:04.238Z","comments":true,"path":"2022/04/30/P5591 小猪佩奇学数学/","permalink":"https://starcried.github.io/2022/04/30/P5591%20%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87%E5%AD%A6%E6%95%B0%E5%AD%A6/","excerpt":"","text":"P5591 小猪佩奇学数学 知识点 二项式定理 \\[ (x+1)^n=\\sum_{i=0}^n\\binom nix^i \\] 单位根反演 \\[ [n\\mid k]=\\frac 1n\\sum_{i=0}^{n-1}\\omega_n^{ik} \\] 证明： \\[ [n\\mid k]=\\begin{cases}\\frac 1n\\sum_{i=0}^{n-1}\\omega_n^{ik}=\\frac 1n\\sum_{i=0}^{n-1}1=1 &amp;,n\\mid k\\\\ \\frac 1n\\sum_{i=0}^{n-1}\\omega_n^{ik}=\\frac 1n\\frac{\\omega_n^k-\\omega_n^{nk}}{1-\\omega_n^k}=0 &amp;,n\\not\\mid k\\end{cases} \\] 题意 求 \\[ \\sum_{i=0}^n\\binom ni p^i\\left\\lfloor\\frac ik\\right\\rfloor \\pmod{998244353} \\] \\(1\\le n,p\\le998244353,k\\in\\{2^w|0\\le w\\le 20\\}\\) 思路 一看到前面这个形式容易想到二项式定理，但是后面这个 \\(\\left\\lfloor\\frac ik\\right\\rfloor\\) 不好处理。 观察一下数据范围发现 \\(k\\) 较小，考虑使用单位根反演，我们将柿子往这边化： \\[ \\left\\lfloor\\frac ik\\right\\rfloor=(\\sum_{j=0}^i[k\\mid j])-1=(\\sum_{j=0}^i[k\\mid j])-1=(\\sum_{j=0}^i\\frac 1k\\sum_{i=0}^{k-1}\\omega_k^{ij})-1 \\] 代入得到 \\[ \\begin{aligned}&amp;\\sum_{i=0}^n\\binom ni p^i\\left\\lfloor\\frac ik\\right\\rfloor\\\\ &amp;=\\sum_{i=0}^n\\binom ni p^i\\sum_{j=0}^i\\frac 1k\\sum_{d=0}^{k-1}\\omega_k^{dj}-(\\sum_{i=0}^n\\binom ni p^i)\\\\ &amp;=\\frac 1k\\sum_{d=0}^{k-1}\\sum_{i=0}^n\\binom ni p^i\\sum_{j=0}^i\\omega_k^{dj}-(p+1)^n\\\\ &amp;=\\frac 1k(P+\\sum_{d=1}^{k-1}\\sum_{i=0}^n\\binom ni p^i\\frac{\\omega_k^{di+d}-1}{\\omega_k^d-1})-(p+1)^n\\\\ &amp;=\\frac 1k(P+\\sum_{d=1}^{k-1}\\frac{\\sum_{i=0}^n\\binom ni p^i(\\omega_k^{di+d}-1)}NaN)-(p+1)^n\\\\ &amp;=\\frac 1k(P+\\sum_{d=1}^{k-1}\\frac{\\sum_{i=0}^n\\binom ni p^i\\omega_k^{di+d}-\\sum_{i=0}^n\\binom ni p^i}NaN)-(p+1)^n\\\\ &amp;=\\frac 1k(P+\\sum_{d=1}^{k-1}\\frac{\\omega_k^d\\sum_{i=0}^n\\binom ni p^i\\omega_k^{di}-\\sum_{i=0}^n\\binom ni p^i}NaN)-(p+1)^n\\\\ &amp;=\\frac 1k(P+\\sum_{d=1}^{k-1}\\frac{\\omega_k^d(p\\omega_k^d+1)^n-(p+1)^n}NaN)-(p+1)^n \\end{aligned} \\] 上式中 \\(P\\) 是 \\(d\\) 等于零的情况，此时 \\(\\sum_{j=0}^i\\omega_k^{dj}\\) 全为 1，公比为 1，不适用等比数列求和公式，我们单独算一下。由 \\(\\binom nmm=\\binom {n-1}{m-1}n\\)，有 \\[ \\begin{aligned} P&amp;=\\sum_{i=0}^n\\binom ni p^i(i+1)\\\\ &amp;=(\\sum_{i=0}^n\\binom ni p^ii)+(p+1)^n\\\\ &amp;=(np\\sum_{i=0}^n\\binom {n-1}{i-1} p^{i-1})+(p+1)^n\\\\ &amp;=np(p+1)^{n-1}+(p+1)^n \\end{aligned} \\] 代码 123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=(1&lt;&lt;10)+5,mod=998244353,g=3; int n,p,k,ans,rt; inline int fpow(int a,int b)&#123;int ans=1;for(;b;b&gt;&gt;=1,a=1ll*a*a%mod) if(b&amp;1) ans=1ll*ans*a%mod; return ans;&#125; inline void work()&#123; n=read(),p=read(),k=read(),rt=fpow(g,(mod-1)/k); ans=(1ll*n*p%mod*fpow(p+1,n-1)+fpow(p+1,n))%mod; for(int mul=rt,d=1;d&lt;k;d++,mul=1ll*mul*rt%mod) ans=(ans+(1ll*mul*fpow((1ll*p*mul+1)%mod,n)%mod-fpow(p+1,n)+mod)%mod*fpow((mul-1+mod)%mod,mod-2))%mod; ans=1ll*ans*fpow(k,mod-2)%mod; printf(&quot;%d\\n&quot;,(ans-fpow(p+1,n)+mod)%mod); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"}]},{"title":"P5350 序列","slug":"P5350 序列","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:19:17.168Z","comments":true,"path":"2022/04/30/P5350 序列/","permalink":"https://starcried.github.io/2022/04/30/P5350%20%E5%BA%8F%E5%88%97/","excerpt":"","text":"P5350 序列 题意 维护一个序列，支持区间求和、赋值、加值、复制、交换、翻转操作，其中交换和复制操作保证两段区间长度相等且不交。答案对 \\(1e9+7\\) 取模。 思路 对于区间求和、赋值、加值、交换、翻转操作我们都可以很轻松地使用平衡树进行维护。所以现在的难点就在于复制操作：如何复制一段区间？ 如果我们暴力复制的话，每次我们不得不将被复制的子树扫一遍进行复制，这是肯定不行的。 于是我们使用可持久化平衡树。其中心思想就是每次修改一个节点的信息时，将该节点复制一遍。这样我们在进行复制操作的时候就可以复制出来一个新的树而不会对原树有影响，而且因为不是每次都遍历子树，所以时间复杂度正确。 但是因为要丢弃之前的节点所以空间复杂度略微有些大。因为我们可以进行垃圾回收定期重构使得空间被合理重复利用。 于是这道题就解决了。我使用了 FHQ treap 进行实现，因为发现对于这些操作 FHQ 会比较方便。 然后这道题不卡 ODT 但卡复杂度保证的写法。 细节和我犯过的错误 这是个定长的序列，所以我们每次重构的时候可以选择使用构建二叉搜索树的方法线性构建，否者会被卡常。 每次更改节点信息时都要进行复制，pushdown,merge,split 函数和修改操作里都要复制。 注意 pushdown 和 clone 的前后顺序。有时候我们并不需要将原节点进行下传标记以免建出无用节点增大常数。 注意传参时用的是哪个节点的参数。我曾在 split 操作中下传原节点的儿子，实际上是复制后的节点的儿子。 FHQ 在新建节点后的 rand 值占空间，我们用一段话在 merge 的时候现场随机，即： rd(0,(e[a].siz+e[b].siz)-1)&lt;e[a].siz 可以省下一点空间。 复制和交换的时候记住，给出的区间端点位置可不保证升序的。 重构之后再清空节点数，因为在遍历搜索树的时候会 pushdown 而新加节点。 代码 这里的代码是加强版的代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;chrono&gt;#include&lt;random&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;char buf[1 &lt;&lt; 21], a[20]; int p, p2 = -1;inline void flush() &#123; fwrite(buf, 1, p2 + 1, stdout); p2 = -1;&#125;inline void print(int x) &#123; if (p2 &gt; 1 &lt;&lt; 20) flush(); if (x &lt; 0) buf[++p2] = 45, x = -x; do a[++p] = x % 10 + 48;while (x /= 10); do buf[++p2] = a[p];while (--p);&#125; namespace star&#123; const int maxn=3e5+10,maxm=8e6+10,mod=1e9+7; mt19937 rnd(std::chrono::system_clock::now().time_since_epoch().count()); int rd(int l,int r)&#123;return std::uniform_int_distribution&lt;int&gt;(l,r)(rnd);&#125; int n,m,a[maxn]; int lastans; struct FHQ&#123; #define ls e[ro].son[0] #define rs e[ro].son[1] struct node&#123; int son[2],siz,tag,add,val,sum; bool rev; &#125;e[maxm]; int tot,rt; FHQ():e(),tot(0),rt(0)&#123;&#125; inline void clone(int &amp;x)&#123;e[++tot]=e[x],x=tot;&#125; inline int newnode(const int &amp;a)&#123;return e[++tot]=(node)&#123;&#123;0,0&#125;,1,-1,0,a,a,false&#125;,tot;&#125; inline void pushup(const int &amp;ro)&#123;e[ro].siz=e[ls].siz+e[rs].siz+1,e[ro].sum=(1ll*e[ls].sum+e[rs].sum+e[ro].val)%mod;&#125; void rev(const int &amp;ro)&#123;if(ro)e[ro].rev^=1,swap(ls,rs);&#125; void add(const int &amp;ro,const int &amp;v)&#123;if(ro)e[ro].val=(e[ro].val+v)%mod,e[ro].sum=(e[ro].sum+1ll*e[ro].siz*v)%mod,e[ro].add=(e[ro].add+v)%mod;&#125; void assign(const int &amp;ro,const int &amp;v)&#123;if(ro)e[ro].val=v,e[ro].sum=1ll*e[ro].siz*v%mod,e[ro].add=0,e[ro].tag=v;&#125; inline void pushdown(const int &amp;ro)&#123; if(!e[ro].rev and e[ro].tag==-1 and !e[ro].add) return; if(ls) clone(ls);if(rs) clone(rs); if(e[ro].rev) rev(ls),rev(rs),e[ro].rev=false; if(e[ro].tag!=-1) assign(ls,e[ro].tag),assign(rs,e[ro].tag),e[ro].tag=-1; if(e[ro].add) add(ls,e[ro].add),add(rs,e[ro].add),e[ro].add=0; &#125; int build(const int &amp;l=1,const int &amp;r=n)&#123; if(l&gt;r)return 0; int mid=(l+r)&gt;&gt;1; int ro=newnode(a[mid]); ls=build(l,mid-1),rs=build(mid+1,r); pushup(ro); return ro; &#125; int merge(int a,int b)&#123; if(!a or !b)return a|b; if(rd(0,(e[a].siz+e[b].siz)-1)&lt;e[a].siz)&#123; clone(a),pushdown(a); e[a].son[1]=merge(e[a].son[1],b); pushup(a);return a; &#125;else&#123; clone(b),pushdown(b); e[b].son[0]=merge(a,e[b].son[0]); pushup(b);return b; &#125; &#125; void split(int ro,int k,int &amp;a,int &amp;b)&#123; if(!ro) return a=b=0,void(); if(e[ls].siz&lt;k) a=ro,clone(a),pushdown(a),split(e[a].son[1],k-e[e[a].son[0]].siz-1,e[a].son[1],b),pushup(a); else b=ro,clone(b),pushdown(b),split(e[b].son[0],k,a,e[b].son[0]),pushup(b); &#125; inline void copy()&#123; int l1=read()^lastans,r1=read()^lastans,l2=read()^lastans,r2=read()^lastans,a,b,c,d,e;int bk=1; if(r1&gt;r2)swap(l1,l2),swap(r1,r2),bk=0; split(rt,r2,d,e);split(d,l2-1,c,d);split(c,r1,b,c);split(b,l1-1,a,b); if(bk) rt=merge(a,merge(b,merge(c,merge(b,e)))); else rt=merge(a,merge(d,merge(c,merge(d,e)))); &#125; inline void Swap()&#123; int l1=read()^lastans,r1=read()^lastans,l2=read()^lastans,r2=read()^lastans,a,b,c,d,e; if(r1&gt;r2)swap(l1,l2),swap(r1,r2); split(rt,r2,d,e);split(d,l2-1,c,d);split(c,r1,b,c);split(b,l1-1,a,b); rt=merge(a,merge(d,merge(c,merge(b,e)))); &#125; inline void push(int ro)&#123; if(!ro)return; pushdown(ro); push(ls),a[++n]=e[ro].val,push(rs); &#125; #undef ls #undef rs &#125;S; inline void work()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) a[i]=read(); S.rt=S.build(); while(m--)&#123; switch(read())&#123; case 1:&#123; int l=read()^lastans,r=read()^lastans,a,b,c; S.split(S.rt,r,b,c);S.split(b,l-1,a,b); printf(&quot;%d\\n&quot;,lastans=S.e[b].sum); S.rt=S.merge(a,S.merge(b,c)); break; &#125; case 2:&#123; int l=read()^lastans,r=read()^lastans,a,b,c; S.split(S.rt,r,b,c);S.split(b,l-1,a,b); S.clone(b); S.assign(b,read()^lastans); S.rt=S.merge(a,S.merge(b,c)); break; &#125; case 3:&#123; int l=read()^lastans,r=read()^lastans,a,b,c; S.split(S.rt,r,b,c);S.split(b,l-1,a,b); S.clone(b); S.add(b,read()^lastans); S.rt=S.merge(a,S.merge(b,c)); break; &#125; case 4:S.copy();break; case 5:S.Swap();break; case 6:&#123; int l=read()^lastans,r=read()^lastans,a,b,c; S.split(S.rt,r,b,c);S.split(b,l-1,a,b); S.clone(b); S.rev(b); S.rt=S.merge(a,S.merge(b,c)); break; &#125; &#125; if(S.tot&gt;6500000) n=0,S.push(S.rt),S.rt=S.tot=0,S.rt=S.build(); &#125; n=0,S.push(S.rt); for(int i=1;i&lt;=n;i++) printf(&quot;%d &quot;,a[i]); &#125;&#125;signed main()&#123; star::work(); flush(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"平衡树","slug":"平衡树","permalink":"https://starcried.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"}]},{"title":"P5658 括号树","slug":"P5658 括号树","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:50:13.526Z","comments":true,"path":"2022/04/30/P5658 括号树/","permalink":"https://starcried.github.io/2022/04/30/P5658%20%E6%8B%AC%E5%8F%B7%E6%A0%91/","excerpt":"","text":"P5658 括号树 NOIp2019 我是永远不会忘记我那天在考场上傻瞪着题啥都不会的心理阴影的…… 于是今天我克服心理阴影来写这道题。 树形结构 因为这是一个树，所有优秀的性质这个题都有。并且题目仅仅是问从1开始到所有点的答案，所以我们就可以依靠树的性质来做。 首先，对于一个节点，我们给它记录几个值： \\(lst_i\\)表示i的贡献（只是i的贡献，并不包括从根节点到i路径上点的贡献） 那么我们发现这个lst是如何转移的。考虑一条到i的路径，如果i是后括号，那么\\(lst_i\\)即为与之配对的前括号的父节点的\\(lst\\)+1。因为假设这个前括号的父节点同样有一个已经匹配了的后括号，那么我们势必可以把当前的匹配和之前的匹配序列合并，当前的这个后括号的贡献值，其实就等于前面那个后括号的贡献值+1 \\(sum_i\\)表示从根节点到i的贡献的和。那么转移就是\\(sum_i=sum_{fa_i}+lst_i\\)。 最后答案即为每个sum乘i的异或和。 然后按照树dfs一遍即可……吗？ dfs 对于前括号和后括号我们用一个栈维护即可。遇到前括号入栈，后括号出栈并用上述方式处理，如果空栈就跳过。这里只需要注意一点：dfs之后需要将栈内修改的值重新放回去。 其余就没什么了。 （做不出来还是我太蔡了） 记得开long long。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;stack&gt;#define int long longusing namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125; namespace star&#123; const int maxn=5e5+10; int n,fa[maxn],ans,lst[maxn]; char s[maxn]; int ecnt,head[maxn],nxt[maxn],to[maxn],sum[maxn]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; &#125; stack&lt;int&gt; st; void dfs(int x)&#123; int tmp=0; if(s[x]==&#x27;(&#x27;)st.push(x); else&#123; if(!st.empty())&#123; tmp=st.top(); st.pop(); lst[x]=lst[fa[tmp]]+1; &#125; &#125; sum[x]=sum[fa[x]]+lst[x]; for(int i=head[x];i;i=nxt[i])dfs(to[i]); if(tmp)st.push(tmp); else if(!st.empty())st.pop(); &#125; inline void work()&#123; n=read(); scanf(&quot;%s&quot;,s+1); for(int a,i=2;i&lt;=n;i++) a=read(),addedge(a,i),fa[i]=a; dfs(1); for(int i=1;i&lt;=n;i++) ans^=(sum[i]*i); printf(&quot;%lld&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"P6845 [CEOI2019] Dynamic Diameter","slug":"P6845 [CEOI2019] Dynamic Diameter","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:02:16.957Z","comments":true,"path":"2022/04/30/P6845 [CEOI2019] Dynamic Diameter/","permalink":"https://starcried.github.io/2022/04/30/P6845%20[CEOI2019]%20Dynamic%20Diameter/","excerpt":"","text":"P6845 [CEOI2019] Dynamic Diameter 题意 一颗带权树，每次更改一条边的权，每次修改后求出最大直径。强制在线。 思路 \\(O(n\\log^2n)\\) 的暴力做法。 根据经典结论，对于两个点集的树上最大直径（权值非负），并集点集的树上最大直径的端点一定是原四个端点中的两个。 那么我们就可以用线段树维护点集，合并时 \\(O(\\log n)\\) 查询两点间距离合并就可以做到 \\(O(n\\log^2n)\\) 的复杂度了。 思考如何支持在线修改边权。两点间距离为 \\(dis(x)+dis(y)-2*dis(lca(x,y))\\) 那么先树剖发现修改一条边的权实际上是将子树内 \\(dis\\) 增加，那么子树就是区间加。我们可以用树状数组维护修改。 考虑哪些部分的线段树上的点集最大直径被改了。发现子树内和子树外的最大直径不会变化，那么我们只需要更改子树内与外之间合并的最大直径就行了。我们按照 \\(dfn\\) 用线段树进行维护，那么我们每次只需要将子树区间重新 pushup 一下就可以了。 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cstdlib&gt;#include&lt;utility&gt;using namespace std;inline long long read()&#123; long long x=0;int w=0;char c=getchar(); while(!isdigit(c)) w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int n,q; int ecnt=1,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1],go[maxn]; long long W,w[maxn],dis[maxn]; inline void addedge()&#123; int a=read(),b=read(); to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt; w[ecnt&gt;&gt;1]=read(); &#125; int dep[maxn],fa[maxn],top[maxn],siz[maxn],son[maxn],dfn[maxn],id[maxn]; void dfs1(int x,int f)&#123; fa[x]=f,dep[x]=dep[f]+1,siz[x]=1; for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=f)&#123; dis[u]=dis[x]+w[i&gt;&gt;1],dfs1(u,x),go[i&gt;&gt;1]=u; if(siz[u]&gt;siz[son[x]]) son[x]=u; siz[x]+=siz[u]; &#125; &#125; void dfs2(int x,int topf)&#123; top[x]=topf,dfn[x]=++dfn[0],id[dfn[0]]=x; if(!son[x]) return; dfs2(son[x],topf); for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa[x] and u!=son[x]) dfs2(u,u); &#125; inline int LCA(int x,int y)&#123; while(top[x]!=top[y]) dep[top[x]]&gt;dep[top[y]]?(x=fa[top[x]]):(y=fa[top[y]]); return dep[x]&lt;dep[y]?x:y; &#125; #define ls (ro&lt;&lt;1) #define rs (ro&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) namespace S&#123; long long c[maxn]; inline void upd(int x,long long k)&#123;for(;x&lt;=n;x+=x&amp;-x) c[x]+=k;&#125; inline long long query(int x)&#123;long long ans=dis[id[x]];for(;x;x-=x&amp;-x) ans+=c[x];return ans;&#125; inline void update(int x,int y,long long w)&#123;upd(x,w),upd(y+1,-w);&#125; &#125; inline long long Dis(pair&lt;int,int&gt; a)&#123;return S::query(dfn[a.first])+S::query(dfn[a.second])-2*S::query(dfn[LCA(a.first,a.second)]);&#125; namespace T&#123; pair&lt;int,int&gt; e[maxn&lt;&lt;2]; inline pair&lt;int,int&gt; merge(const pair&lt;int,int&gt;&amp; a,const pair&lt;int,int&gt;&amp; b)&#123; pair&lt;int,int&gt; p[6]=&#123;a,b,make_pair(a.first,b.first),make_pair(a.first,b.second),make_pair(a.second,b.first),make_pair(a.second,b.second)&#125;; long long dis[6]; for(int i=0;i&lt;6;i++) dis[i]=Dis(p[i]); return p[max_element(dis,dis+6)-dis]; &#125; void build(int ro=1,int l=1,int r=n)&#123; if(l==r) return e[ro]=make_pair(id[l],id[l]),void(); build(ls,l,mid),build(rs,mid+1,r); e[ro]=merge(e[ls],e[rs]); &#125; void update(int x,int y,int ro=1,int l=1,int r=n)&#123; if(x==l and y==r) return; if(y&lt;=mid) update(x,y,ls,l,mid); else if(x&gt;mid) update(x,y,rs,mid+1,r); else update(x,mid,ls,l,mid),update(mid+1,y,rs,mid+1,r); e[ro]=merge(e[ls],e[rs]); &#125; &#125; #undef ls #undef rs #undef mid inline void work()&#123; n=read(),q=read(),W=read(); for(int i=1;i&lt;n;i++) addedge(); dfs1(1,0),dfs2(1,1); T::build(); long long ans=0; while(q--)&#123; int e=(read()+ans)%(n-1)+1; long long v=(read()+ans)%W; S::update(dfn[go[e]],dfn[go[e]]+siz[go[e]]-1,v-w[e]),w[e]=v; T::update(dfn[go[e]],dfn[go[e]]+siz[go[e]]-1); printf(&quot;%lld\\n&quot;,ans=Dis(T::e[1])); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线段树","slug":"线段树","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"P6106 [Ynoi2010] Self Adjusting Top Tree","slug":"P6106 [Ynoi2010] Self Adjusting Top Tree","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:51:48.916Z","comments":true,"path":"2022/04/30/P6106 [Ynoi2010] Self Adjusting Top Tree/","permalink":"https://starcried.github.io/2022/04/30/P6106%20[Ynoi2010]%20Self%20Adjusting%20Top%20Tree/","excerpt":"","text":"P6106 [Ynoi2010] Self Adjusting Top Tree 题意 给出平面直角坐标系上若干不与坐标轴平行的处于第一象限的互不相交的线段，多次询问平面中一个第一象限的矩形与这些线段相交部分的长度长度和与所有线段长度和的比值。给出的所有坐标 \\(\\in[1,10^6]\\)。 思路 假设所有线段的斜率都是正的，考虑将询问差分成四个前缀矩形。我们只需要考虑统计若干斜率为正的互不相交的线段与一个前缀矩形的交就行了。 经典套路：若线段互不相交，在扫描线时其相对顺序不会变。比如在用与 \\(y\\) 轴平行的直线做扫描线时线段与其相交的 \\(y\\) 坐标相对大小不会变。再比如，用以原点为端点的射线做扫描线时线段与其交点到原点距离的相对大小不会变。 因此，我们用平行于 \\(y\\) 轴的直线做扫描线，用平衡树维护区间线段长度的和。即，维护单位 \\(x\\) 区间线段长度增量，维护区间线段长度和，支持区间加，支持插入删除。因为线段斜率为正且询问为前缀矩形，所以没有线段另一端不在矩形内的情况。这样就能统计且恰好统计所有与矩形右侧相交的线段的长度和。 统计所有与矩形上侧相交的长度和只需要将扫描线变为与 \\(x\\) 平行的再做一遍就可以了。为了使与顶点交的线段只统计一次，可以将翻转前后其中一次的所有查询减去 eps 使其不合法。 对于所有完全被包含的线段，发现只要线段右上端在矩形内就全部在矩形内。做一遍二维数点即可。 对于所有斜率为负的线段，将它们和询问矩形上下反转，然后再做一遍上述过程即可。 至此，所有的贡献被统计完毕。实现时请注意细节。 代码我觉得我写的还行，就放出来，看懂了的应该挺容易实现的，没看懂的可以参考代码。 实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#include&lt;bits/stdc++.h&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=4e5+10,maxm=1e6+10,N=1e6+1; double eps=1e-6; int n,m,cnt[2],c[2][maxn]; double ans[maxn]; struct vec&#123; int x,y; vec(int x=0,int y=0):x(x),y(y)&#123;&#125; inline void updown()&#123;y=N-y;&#125; &#125;; int X; struct seg&#123; vec a,b; seg()&#123;&#125; seg(vec a,vec b):a(a),b(b)&#123;&#125; inline double length()&#123;return sqrt(1.*(b.y-a.y)*(b.y-a.y)+1.*(b.x-a.x)*(b.x-a.x));&#125; inline void updown()&#123;a.updown(),b.updown();&#125; inline double y() &#123;return a.y+1.0*(X-a.x)*(b.y-a.y)/(b.x-a.x);&#125; &#125;a[maxn],b[2][maxn]; struct que&#123; int x; double y; int tp,id; que()&#123;&#125; que(int x,double y,int tp,int id):x(x),y(y),tp(tp),id(id)&#123;&#125; bool operator &lt; (const que &amp;b) const &#123;return x&lt;b.x;&#125; &#125;q[maxn&lt;&lt;2]; #define ls son[x][0] #define rs son[x][1] double s1[maxn],s2[maxn],s[maxn],tag[maxn],sum[maxn]; int tot,rt,e[maxn],son[maxn][2],rnd[maxn]; inline int newnode(int i)&#123;e[++tot]=i,s1[tot]=s[tot]=a[i].length()/(a[i].b.x-a[i].a.x),s2[tot]=tag[tot]=son[tot][0]=son[tot][1]=sum[tot]=0,rnd[tot]=rand();return tot;&#125; inline void add(int x,int a)&#123;s2[x]+=a*s1[x],sum[x]+=a,tag[x]+=a;&#125; inline void pushdown(int x)&#123;if(tag[x]) add(ls,tag[x]),add(rs,tag[x]),tag[x]=0;&#125; inline void pushup(int x)&#123;s2[x]=s2[ls]+s2[rs]+sum[x]*s[x],s1[x]=s1[ls]+s1[rs]+s[x];&#125; void split(int x,double k,int &amp;a,int &amp;b)&#123; if(!x) return a=b=0,void(); pushdown(x); if(k&gt;=star::a[e[x]].y()) a=x,split(rs,k,rs,b); else b=x,split(ls,k,a,ls); pushup(x); &#125; int merge(int a,int b)&#123; if(!a or !b) return a|b; if(rnd[a]&lt;rnd[b])&#123; pushdown(a),son[a][1]=merge(son[a][1],b),pushup(a); return a; &#125;else&#123; pushdown(b),son[b][0]=merge(a,son[b][0]),pushup(b); return b; &#125; &#125; inline void insert(int i)&#123; int x,y; split(rt,a[i].y(),x,y); rt=merge(merge(x,newnode(i)),y); &#125; inline void update(int i)&#123; int a,b; split(rt,star::a[i].y(),a,b); static int st[maxn]; int top=0,x,y; for(y=0,x=a;rs;y=x,x=rs) pushdown(x),st[++top]=x; if(e[x]!=i) return rt=merge(merge(a,newnode(i)),b),void(); if(!y) a=son[a][0]; else son[y][1]=merge(ls,rs); while(top) pushup(st[top--]); rt=merge(a,b); &#125; inline double query(double k)&#123; int x,y; split(rt,k,x,y); double ans=s2[x]; rt=merge(x,y); return ans; &#125; #undef ls #undef rs double C[maxm]; inline void Insert(int x,double k)&#123;for(;x&lt;=N;x+=x&amp;-x) C[x]+=k;&#125; inline double Query(int x)&#123;double ans=0;for(;x;x-=x&amp;-x) ans+=C[x];return ans;&#125; inline void solve(int *c,int n,seg *b)&#123; int tot=0; for(int i=1;i&lt;=m;i++) q[++tot]=que(b[i].b.x,b[i].b.y-eps,1,i),q[++tot]=que(b[i].a.x,b[i].b.y-eps,-1,i),q[++tot]=que(b[i].b.x,b[i].a.y-eps,-1,i),q[++tot]=que(b[i].a.x,b[i].a.y-eps,1,i); sort(q+1,q+1+tot); if(eps!=0)&#123; sort(c+1,c+1+n,[](int x,int y)&#123;return a[x].b.x&lt;a[y].b.x;&#125;); for(int i=1,j=1;i&lt;=tot;i++)&#123; while(j&lt;=n and a[c[j]].b.x&lt;=q[i].x) Insert(a[c[j]].b.y,a[c[j]].length()),j++; ans[q[i].id]+=q[i].tp*Query(q[i].y+eps); &#125; &#125; static pair&lt;int,int&gt; op[maxn&lt;&lt;1]; for(int i=1;i&lt;=n;i++) op[i*2-1]=make_pair(a[c[i]].a.x,c[i]),op[i*2]=make_pair(a[c[i]].b.x,c[i]); n&lt;&lt;=1; sort(op+1,op+1+n); X=0; for(int i=1,j=1;i&lt;=tot;i++)&#123; while(j&lt;=n and op[j].first&lt;=q[i].x) add(rt,op[j].first-X),X=op[j].first,update(op[j].second),j++; add(rt,q[i].x-X),X=q[i].x,ans[q[i].id]+=q[i].tp*query(q[i].y); &#125; memset(C,0,sizeof C),rt=tot=0; &#125; inline void solve()&#123; solve(c[0],cnt[0],b[0]); solve(c[1],cnt[1],b[1]); &#125; inline void work()&#123; srand(time(0)); n=read(); double len=0; for(int i=1;i&lt;=n;i++)&#123; a[i].a.x=read(),a[i].a.y=read(),a[i].b.x=read(),a[i].b.y=read(); if(a[i].a.x&gt;a[i].b.x) swap(a[i].a,a[i].b); int t=a[i].a.y&gt;a[i].b.y; if(t) a[i].updown(); c[t][++cnt[t]]=i; len+=a[i].length(); &#125; m=read(); for(int i=1;i&lt;=m;i++) b[0][i].a.x=read(),b[0][i].a.y=read(),b[0][i].b.x=read(),b[0][i].b.y=read(),b[1][i]=b[0][i],b[1][i].updown(),swap(b[1][i].a.y,b[1][i].b.y); solve(); for(int i=1;i&lt;=n;i++) swap(a[i].a.x,a[i].a.y),swap(a[i].b.x,a[i].b.y); for(int i=1;i&lt;=m;i++) swap(b[0][i].a.x,b[0][i].a.y),swap(b[0][i].b.x,b[0][i].b.y),swap(b[1][i].a.x,b[1][i].a.y),swap(b[1][i].b.x,b[1][i].b.y); eps=0; solve(); for(int i=1;i&lt;=m;i++) printf(&quot;%.10f\\n&quot;,ans[i]/len); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"平衡树","slug":"平衡树","permalink":"https://starcried.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"}]},{"title":"P5471- K-D tree优化建图-弹跳","slug":"P5471- K-D tree优化建图-弹跳","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:36:55.241Z","comments":true,"path":"2022/04/30/P5471- K-D tree优化建图-弹跳/","permalink":"https://starcried.github.io/2022/04/30/P5471-%20K-D%20tree%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE-%E5%BC%B9%E8%B7%B3/","excerpt":"","text":"P5471- K-D tree优化建图-弹跳 优化建图是一种思想。 题意 有\\(n\\)个城市分布在小鸟岛上，有\\(m\\)个弹弓分布在这些城市里。因为弹弓体积大，固定麻烦，所以每个弹弓只能把小鸟弹飞到一块固定的矩形范围内的城市，同时小鸟会在空中滞留\\(t_i\\)的时间。闪电黄的家在1号城市，追求速度的它想知道，若只使用弹弓出行，它从家到其他所有城市的最短时间花费是多少。 抱歉魔改了题面，但是这个题意真的太像愤怒的小鸟了好吗 思路 暴力：枚举每两个城市间是否能转移进行建图跑最短路。 太浪费了，这么大的矩形有很多点肯定连不上的呀。根据套路，我们想个数据结构优化建图。 二维线段树优化建图 树套树优化建图 K-D tree优化建图 前两个我不会 首先我们把这n个城市建成2-D tree，然后跑Dijkstra: 若当前结点位置在转移的范围内，插入队列，递归查找子节点并更新覆盖范围。 若弹跳的范围与树上结点覆盖的范围有交，查找之，否则不查找。 就这么简单。怎么说K-D tree就是优雅的暴力呢。 实现 我们用一个结构体node存储树上节点信息，用一个结构体data表示一个转移（边）。 对于一个转移，每次从根开始查找，根据以上策略遍历整棵树。时间复杂度O(能过)。事实上，我还跑了目前luogu榜一（醒醒啊你只是因为评测机最近变快了） 把查找单独拉出来： 123456789101112131415161718192021222324252627inline bool cross(node a,data b)&#123;return a.l[0]&lt;=b.r[0] and a.r[0]&gt;=b.l[0] and a.l[1]&lt;=b.r[1] and a.r[1]&gt;=b.l[1];&#125;void solve(node&amp; x,data&amp; p)&#123; if(!x.del and x.in(p))&#123;//若该点坐标在覆盖范围内 if(x.id!=1)&#123; dis[x.id]=p.v; for(int i=head[x.id];i;i=nxt[i])&#123;//遍历所有能到的位置 data u=to[i]; u.v+=p.v; q.push(u); &#125; &#125; x.del=1;//根据dijkstra的贪心策略，该点不再入队 x.clear();//为了保留结点查询的作用。下面会更新范围 &#125; if(x.son[0])&#123; node &amp;now=e[x.son[0]]; if(cross(now,p)) solve(now,p);//注意这里判断的是矩形是否有交而非城市坐标 if(x.del) x.copy(now); else x.update(now);//更新范围 &#125; if(x.son[1])&#123; node &amp;now=e[x.son[1]]; if(cross(now,p)) solve(now,p); if(x.del and !x.son[0]) x.copy(now); else x.update(now);//更新范围 &#125;&#125; 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;queue&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=7e4+10,maxm=15e4,INF=0x3f3f3f3f; int n,m,w,h,root,dis[maxn]; struct data&#123; int v,l[2],r[2]; inline bool operator &lt; (const data &amp;zp) const&#123;return v&gt;zp.v;&#125; &#125;; int ecnt,head[maxm],nxt[maxm]; data to[maxm]; inline void add(int a,data b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; &#125; struct node&#123; int x[2],l[2],r[2],son[2],id; static int d;//“只是声明我要用这个变量，但是它现在还不存在” bool del; inline void clear()&#123; for(int i=0;i&lt;2;i++) x[i]=0,l[i]=INF,r[i]=-INF; &#125; inline void init(int zp)&#123; for(int i=0;i&lt;2;i++) x[i]=l[i]=r[i]=read(); id=zp; &#125; inline void update(const node &amp;zp)&#123; for(int i=0;i&lt;2;i++) l[i]=min(l[i],zp.l[i]),r[i]=max(r[i],zp.r[i]); &#125; inline void copy(const node &amp;zp)&#123; for(int i=0;i&lt;2;i++) l[i]=zp.l[i],r[i]=zp.r[i]; &#125; inline bool operator &lt; (const node &amp;zp) const&#123;return x[d]&lt;zp.x[d];&#125;; inline bool in(const data &amp;zp) const &#123;return x[0]&gt;=zp.l[0] and x[0]&lt;=zp.r[0] and x[1]&gt;=zp.l[1] and x[1]&lt;=zp.r[1];&#125; &#125;e[maxn]; int node::d;//现在这个变量存在了，并且每个node都会用它 int build(int l,int r,int d)&#123; node::d=d; int mid=l+r&gt;&gt;1; nth_element(e+l,e+mid,e+r+1); if(l&lt;mid) e[mid].update(e[e[mid].son[0]=build(l,mid-1,d^1)]); if(r&gt;mid) e[mid].update(e[e[mid].son[1]=build(mid+1,r,d^1)]); return mid; &#125; priority_queue&lt;data&gt; q; inline bool cross(node a,data b)&#123;return a.l[0]&lt;=b.r[0] and a.r[0]&gt;=b.l[0] and a.l[1]&lt;=b.r[1] and a.r[1]&gt;=b.l[1];&#125; void solve(node&amp; x,data&amp; p)&#123; if(!x.del and x.in(p))&#123; if(x.id!=1)&#123; dis[x.id]=p.v; for(int i=head[x.id];i;i=nxt[i])&#123; data u=to[i]; u.v+=p.v; q.push(u); &#125; &#125; x.del=1; x.clear(); &#125; if(x.son[0])&#123; node &amp;now=e[x.son[0]]; if(cross(now,p)) solve(now,p); if(x.del) x.copy(now); else x.update(now); &#125; if(x.son[1])&#123; node &amp;now=e[x.son[1]]; if(cross(now,p)) solve(now,p); if(x.del and !x.son[0]) x.copy(now); else x.update(now); &#125; &#125; inline void work()&#123; n=read(),m=read(),w=read(),h=read(); for(int i=1;i&lt;=n;i++) e[i].init(i); root=build(1,n,0); memset(dis,INF,sizeof dis); dis[1]=0; for(int i=1;i&lt;=m;i++)&#123; data zp; int x=read(); zp.v=read(),zp.l[0]=read(),zp.r[0]=read(),zp.l[1]=read(),zp.r[1]=read(); add(x,zp); &#125; for(int i=head[1];i;i=nxt[i]) q.push(to[i]); while(!q.empty())&#123; data x=q.top();q.pop(); solve(e[root],x); &#125; for(int i=2;i&lt;=n;i++) printf(&quot;%d\\n&quot;,dis[i]); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; PS：据银牌学姐推荐，方差建树常数大，K维循环建树虽然有时候会被卡但实际可能比前者优秀。 为啥题面那么喜欢跳蚤用小鸟们不可爱吗owo 自己吃别人嚼过的馒头为啥还敢写题解？因为觉得自己的马蜂太好看了所以来分享一下","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"P6982 [NEERC2015]Jump","slug":"P6982 [NEERC2015]Jump","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:17:18.021Z","comments":true,"path":"2022/04/30/P6982 [NEERC2015]Jump/","permalink":"https://starcried.github.io/2022/04/30/P6982%20[NEERC2015]Jump/","excerpt":"","text":"P6982 [NEERC2015]Jump 题意 给你一个未知的 01 串，每次可以输出询问一个 01 串，如果该串中正确的个数刚好等于 \\(n\\) 或者 \\(n/2\\) ，将会返回相应的答案，否则会返回 0 。求出这个串。（询问次数不大于 \\(n+500\\)，\\(n\\leq 1000\\)） 思路 先无视询问次数，我们来想一下确定性算法怎么做。 第一步，我们来试着找出 \\(n/2\\) 正确的串。 首先，我们设一个全 0​ 串，每次修改最左边的 0 为 1，在这至多 \\(n\\) 次询问中，我们一定能找到一个有 \\(n/2\\) 位正确的串。 正确性证明：假设全 0 时有小于 \\(n/2\\) 位正确，那么最糟情况，也就是变成全 1 时一定有多于 \\(n/2\\) 位正确；反之亦然。我们每次只改变一位的正确性，也就是说每次正确的位数只会改变 1，这样在移动的过程中一定会有一个情况恰好 \\(n/2\\) 位正确。 第二步，我们来找到正确的串。 我们固定一个位置，每次询问将该位置和其他一个位置取反。显然：若返回的答案为 \\(n/2\\) ，那么说明固定位置和这个位置的正确性是相反的。我们这样询问固定位置和其他每一个位置，就能够得到包含所有位置的两个正确性相反的集合。然后，我们将这个得到的 01 串和取反后的串询问，找到正确的输出即可。 于是我们得到一个询问次数为 \\(2n\\) 的确定性算法。 过不了。怎么办呢？不要伤心，不要心急！然后我们发现第一步我们随机选择的正确率是挺高的。询问499次，每次询问有 \\(\\frac{\\tbinom{\\frac{n}{2}}{n}}{2^n}\\) 的几率询问到 \\(n/2\\) 正确的串，询问499次后，发现这个几率非常大，用电脑算出来是 \\(0.99997\\) ……于是我们就做完了。 实现 记得清空缓冲区。下面的代码使用了阴间的bitset实现，常数挺大。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;bitset&gt;#include&lt;cstdlib&gt;#include&lt;ctime&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; int n,ans; bitset&lt;1002&gt; a,b; inline void write(bitset&lt;1002&gt;&amp; x)&#123; for(int i=0;i&lt;n;i++) cout&lt;&lt;x[i]; cout&lt;&lt;endl; &#125; inline void work()&#123; srand(time(0)); ios::sync_with_stdio(false); cin&gt;&gt;n; for(int i=1;i&lt;=499;i++)&#123; for(int j=0;j&lt;n;j++) a[j]=rand()%2; write(a); cin&gt;&gt;ans; if(ans==n)return; else if(ans==n/2)break; &#125; a[0]=a[0]^1; for(int i=1;i&lt;n;i++)&#123; a[i]=a[i]^1; write(a); cin&gt;&gt;ans; b[i]=a[i]^(ans==n/2); a[i]=a[i]^1; &#125; b[0]=a[0]; write(b); cin&gt;&gt;ans; if(ans==n)return; b.flip(); write(b); cin&gt;&gt;ans; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"交互","slug":"交互","permalink":"https://starcried.github.io/tags/%E4%BA%A4%E4%BA%92/"}]},{"title":"P6295 有标号 DAG 计数","slug":"P6295 有标号 DAG 计数","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:53:36.409Z","comments":true,"path":"2022/04/30/P6295 有标号 DAG 计数/","permalink":"https://starcried.github.io/2022/04/30/P6295%20%E6%9C%89%E6%A0%87%E5%8F%B7%20DAG%20%E8%AE%A1%E6%95%B0/","excerpt":"","text":"P6295 有标号 DAG 计数 题意 求 \\(n\\) 个点有标号弱联通 DAG 数量。 推导 设 \\(f_i\\) 表示 \\(i\\) 个点有标号 DAG 数量（不保证弱联通），有： \\[ f(i)=\\sum_{j=1}^i\\binom ij(-1)^{j-1}f(i-j)2^{j(i-j)} \\] 意义为选至少 \\(j\\) 个度数为零的点，向剩下的 \\(i-j\\) 个点随便连有向边，容斥一下就得到了上式。 下面进行推导。根据一个 trick: \\[ j(i-j)=\\binom i2-\\binom j2-\\binom {i-j}2 \\] 所以有: \\[ \\begin{aligned} &amp;f(i)=\\sum_{j=1}^i\\frac{i!}{j!(i-j)!} (-1)^{j-1} f(i-j) \\frac{2^\\binom i2}{2^\\binom j22^\\binom{i-j}2}\\\\ \\Rightarrow&amp;\\frac{f(i)}{i!2^\\binom i2}=\\sum_{j=1}^i\\frac{(-1)^{j-1}}{j!2^\\binom j2} \\frac{f(i-j)}{(i-j)!2^\\binom{i-j}2} \\end{aligned} \\] 设 \\[ \\begin{aligned} F(x)=\\sum_{i=0}^\\infty\\frac{f(i)}{i!2^{\\binom i2}}\\\\ G(x)=\\sum_{i=1}^\\infty\\frac{(-1)^{i-1}}{i!2^\\binom i2} \\end{aligned} \\] 则有 \\[ F(x)=F(x)G(x)+1 \\] 加 1 是因为常数项为 1. 解得 \\[ F(x)=\\frac1{1-G(x)} \\] 根据 \\(F\\) 的定义，我们解出 \\(F\\) 后乘上 \\(2^\\binom i2\\) 即为 \\(f\\) 的 EGF。根据多项式 ln 和 exp 的组合意义，我们将得到的 EGF ln 一下即可得到题目要求的弱联通的 DAG 数量的 EGF。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=4e5+10,mod=998244353,g=3,gi=998244354/3; inline int fpow(int a,long long b)&#123;int ans=1;for(;b;b&gt;&gt;=1,a=1ll*a*a%mod) if(b&amp;1) ans=1ll*ans*a%mod; return ans;&#125; struct NTT&#123; int r[maxn],lim; inline void getr(int li)&#123;lim=li;for(int i=0;i&lt;=lim;i++) r[i]=(r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(lim&gt;&gt;1));&#125; void operator () (int *a,int type) const &#123; for(int i=0;i&lt;lim;i++) if(i&lt;r[i]) swap(a[i],a[r[i]]); for(int mid=1;mid&lt;lim;mid&lt;&lt;=1)&#123; int rt=fpow(type==1?g:gi,(mod-1)/(mid&lt;&lt;1)); for(int r=mid&lt;&lt;1,j=0;j&lt;lim;j+=r)&#123; int p=1; for(int k=0;k&lt;mid;k++,p=1ll*p*rt%mod)&#123; int x=a[j+k],y=1ll*a[j+k+mid]*p%mod; a[j+k]=(x+y)%mod,a[j+k+mid]=(x-y+mod)%mod; &#125; &#125; &#125; if(type==-1) for(int p=fpow(lim,mod-2),i=0;i&lt;lim;i++) a[i]=1ll*a[i]*p%mod; &#125; &#125;ntt; void Inv(const int *a,int *ans,int n)&#123; if(n==1) return ans[0]=fpow(a[0],mod-2),ans[1]=0,void(); static int res[maxn]; Inv(a,ans,n&gt;&gt;1); int lim=n&lt;&lt;1; ntt.getr(lim); for(int i=0;i&lt;n;i++) res[i]=a[i]; for(int i=n;i&lt;lim;i++) ans[i]=res[i]=0; ntt(ans,1),ntt(res,1); for(int i=0;i&lt;lim;i++) ans[i]=ans[i]*(2-1ll*ans[i]*res[i]%mod+mod)%mod; ntt(ans,-1); for(int i=n;i&lt;lim;i++) ans[i]=0; &#125; inline void deri(const int *a,int *ans,int n)&#123;for(int i=1;i&lt;n;i++) ans[i-1]=1ll*a[i]*i%mod;ans[n-1]=0;&#125; inline void inte(const int *a,int *ans,int n)&#123;for(int i=n-1;i;i--) ans[i]=1ll*a[i-1]*fpow(i,mod-2)%mod;ans[0]=0;&#125; inline void ln(const int *a,int *ans,int n)&#123; static int res[maxn]; Inv(a,ans,n); deri(a,res,n); int lim=n&lt;&lt;1; ntt.getr(lim); ntt(ans,1),ntt(res,1); for(int i=0;i&lt;lim;i++) res[i]=1ll*ans[i]*res[i]%mod,ans[i]=0; ntt(res,-1); for(int i=n;i&lt;lim;i++) res[i]=0; inte(res,ans,n); &#125; int a[maxn],b[maxn],n,inv[maxn],mul[maxn]; inline void work()&#123; n=read(); inv[0]=mul[0]=1;for(int i=1;i&lt;=n;i++) mul[i]=1ll*mul[i-1]*i%mod; inv[n]=fpow(mul[n],mod-2);for(int i=n-1;i;i--) inv[i]=1ll*inv[i+1]*(i+1)%mod; for(int i=1;i&lt;=n;i++) a[i]=(i&amp;1?mod-1ll:1ll)*inv[i]%mod*fpow(fpow(2,1ll*i*(i-1)/2),mod-2)%mod; a[0]=1; int lim=1;for(;lim&lt;=n;lim&lt;&lt;=1); Inv(a,b,lim); for(int i=0;i&lt;=n;i++) b[i]=1ll*b[i]*fpow(2,1ll*i*(i-1)/2)%mod,a[i]=0; for(int i=n+1;i&lt;lim;i++) a[i]=b[i]=0; ln(b,a,lim); for(int i=1;i&lt;=n;i++) printf(&quot;%lld\\n&quot;,1ll*a[i]*mul[i]%mod); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"}]},{"title":"P6753 [BalticOI 2013 Day1] Ball Machine","slug":"P6753 [BalticOI 2013 Day1] Ball Machine","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T15:59:45.011Z","comments":true,"path":"2022/04/30/P6753 [BalticOI 2013 Day1] Ball Machine/","permalink":"https://starcried.github.io/2022/04/30/P6753%20[BalticOI%202013%20Day1]%20Ball%20Machine/","excerpt":"","text":"P6753 [BalticOI 2013 Day1] Ball Machine 题意 给你一个树，每次从根节点放一个求，如果其子节点有空这个球会向下滚，若有多个节点为空则找儿子中以子树内编号的最小值为优先级从小到大找第一个为空的位置滚。 有两种操作，第一种插入若干个球，输出最后一个球到的节点编号；第二种删除一个位置，此时若有可以向下滚的球那么这个球就会滚，输出有多少个球滚了。 保证数据合法。 思路 首先我们思考只有1操作的情况。 对于1操作，球加入的顺序为按照以子树内编号的最小值为优先级的后序遍历 dfs 序。我们得到了 40pts。 对于2操作，删掉一个球后答案一定是其所有祖先中有球的位置的个数。原因显然，因为删球前一定是最佳状态，即没有球能动，所以删掉这个球后只有其祖先会向下移动并且一定会向下移动。 发现祖先有球的段一定是连续的，于是我们就可以用倍增找到最浅的有球的祖先，并且顺便输出答案。 但是2操作后会把父亲节点删去。注意这时候删去的节点并非最后加入的点。而且下一次加入球时会找 dfs 序最小的。这时候我们就需要一些东西比如 stl 的 vector / priority_queue / set 进行维护了。 还有最最最重要的一点！对于操作1，我们是依次一个一个加入的，这样的时间复杂度为什么是正确的？ 显然，因为每个2操作只会删1个点，所以我们最多会插入 n+q 个点。所以要什么重链剖分和线段树暴力就能过 实现 我用的是 vector 存储空节点来实现这个过程的。它的好处在于对于1操作删除是 \\(O(1)\\) 的。不过插入必须用 upper_bound 和 insert 。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;vector&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int n,Q; int fa[maxn][21],rt,dfn[maxn],tot,id[maxn],mn[maxn]; bool vis[maxn]; vector&lt;int&gt; q,G[maxn]; void dfs1(int x)&#123; mn[x]=x; for(int i=0;i&lt;G[x].size();i++) dfs1(G[x][i]),mn[x]=min(mn[x],mn[G[x][i]]); &#125; inline bool cmp1(int a,int b)&#123;return mn[a]&lt;mn[b];&#125; void dfs(int x)&#123; for(int i=0;i&lt;20;i++) fa[x][i+1]=fa[fa[x][i]][i]; sort(G[x].begin(),G[x].end(),cmp1); for(int i=0;i&lt;G[x].size();i++) dfs(G[x][i]); dfn[x]=++tot; id[tot]=x; &#125; inline bool cmp(int a,int b)&#123;return dfn[a]&gt;dfn[b];&#125; inline void work()&#123; n=read(),Q=read(); for(int i=1;i&lt;=n;i++)&#123; if((fa[i][0]=read())==0) rt=i; G[fa[i][0]].push_back(i); &#125; dfs1(rt); dfs(rt);q.resize(n),q.clear(); for(int i=n;i;i--) q.push_back(id[i]); while(Q--) if(read()==1)&#123; int num=read(); while(--num)vis[q.back()]=1,q.pop_back(); printf(&quot;%d\\n&quot;,q.back()); vis[q.back()]=1;q.pop_back(); &#125;else&#123; int x=read(); if(!vis[x])&#123;puts(&quot;0&quot;);continue;&#125;//数据合法，好像没用 int f=x,ans=0; for(int i=20;~i;i--) if(vis[fa[f][i]])f=fa[f][i],ans|=(1&lt;&lt;i); vis[f]=0; q.insert(upper_bound(q.begin(),q.end(),f,cmp),f); printf(&quot;%d\\n&quot;,ans); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 其他 强烈吐槽洛谷的翻译！一直以为是以直接相连节点的编号大小为优先级，结果是子树内的最小值……建议大家看原题面。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"}]},{"title":"P7324 [WC2021] 表达式求值","slug":"P7324 [WC2021] 表达式求值","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:27:16.465Z","comments":true,"path":"2022/04/30/P7324 [WC2021] 表达式求值/","permalink":"https://starcried.github.io/2022/04/30/P7324%20[WC2021]%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/","excerpt":"","text":"P7324 [WC2021] 表达式求值 闲话 WC2021 我只得了 20 分，三道题总共 20 分。我是下场了突然后知后觉这件事的，主要原因是我开了 C++11，然后 T1 T2 都没分了。在洛谷上测本来能拿银牌的。T1 的乱搞能拿 48，还挺高的。 幸亏咱们陕西省选不看冬令营成绩。幸亏是在省选前犯的这个错误。告诫后人和自己，写题前一定要看编译选项，否则只能后悔莫及。 T2 场上写的是不带问号的 \\(O(n|E|)\\) 和带问号 \\(O(n|E|m^2)\\) 的 70 分暴力。后者可以用 minmax 卷积优化掉一个 \\(m\\) 获得 85 分的好成绩。 思路 首先要会上面提到的带问号的暴力，不需要优化。 我在场上写的是这样子的： 1234567891011121314151617181920212223242526272829303132333435363738394041424344int a[maxn][10],but[maxn][10],tmp[10];int* solve(int l,const int &amp;r,const int *a)&#123; l++; int *ans=s[l]==&#x27;(&#x27;?solve(l,to[l],a):but[l];//这里的 to 是预处理的括号匹配位置，完全可以用把 l 设成全局变量的方法解决 l=s[l]==&#x27;(&#x27;?to[l]+1:l+1; while(l+1&lt;r)&#123; char op=s[l++]; int *res=s[l]==&#x27;(&#x27;?solve(l,to[l],a):but[l]; l=s[l]==&#x27;(&#x27;?to[l]+1:l+1; switch(op)&#123; case &#x27;&lt;&#x27;:&#123; memset(tmp,0,sizeof tmp); for(int i=0;i&lt;m;i++) for(int j=0;j&lt;m;j++) if(a[i]&lt;a[j]) tmp[i]=(tmp[i]+1ll*ans[i]*res[j])%mod; else tmp[j]=(tmp[j]+1ll*ans[i]*res[j])%mod; for(int i=0;i&lt;m;i++) ans[i]=tmp[i]; break; &#125; case &#x27;&gt;&#x27;:&#123; memset(tmp,0,sizeof tmp); for(int i=0;i&lt;m;i++) for(int j=0;j&lt;m;j++) if(a[i]&gt;a[j]) tmp[i]=(tmp[i]+1ll*ans[i]*res[j])%mod; else tmp[j]=(tmp[j]+1ll*ans[i]*res[j])%mod; for(int i=0;i&lt;m;i++) ans[i]=tmp[i]; break; &#125; case &#x27;?&#x27;:&#123; memset(tmp,0,sizeof tmp); for(int i=0;i&lt;m;i++) for(int j=0;j&lt;m;j++) tmp[i]=(tmp[i]+1ll*ans[i]*res[j])%mod,tmp[j]=(tmp[j]+1ll*ans[i]*res[j])%mod; for(int i=0;i&lt;m;i++) ans[i]=tmp[i]; break; &#125; &#125; &#125; return ans;&#125;inline void work()&#123; for(int i=0;i&lt;m;i++) for(int j=1;j&lt;=n;j++) a[j][i]=star::a[i][j-1]; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=len;j++) for(int k=0;k&lt;m;k++) but[j][k]=(isdigit(s[j]) and s[j]-&#x27;0&#x27;==k); int* res=solve(1,len,a[i]); for(int j=0;j&lt;m;j++) ans=(ans+1ll*res[j]*a[i][j])%mod; &#125; printf(&quot;%d\\n&quot;,ans);&#125; 即把 \\(n\\) 组数分开来讨论，求每种数贡献的方案数，最后乘上值加起来。 那么问题就在于求每种数的方案数，这样的工作我们需要做 \\(n\\) 遍，非常不划算。 然后发现，对于大小关系相同的每组数，每种数贡献的方案数是相同的，改变的只是它们的值，我们没有必要每次都算一遍方案数。 发现，一个数在一组数中的相对大小关系的情况总数只有 \\(2^m\\) 种，即是否比该数大。 那么我们预处理出一个数的所有相对大小关系总数（这个部分是 \\(O(2^m|E|)\\) 的），然后对于 \\(n\\) 组数每个枚举 \\(m\\) 个数差分统计答案即可（差分得到该数的方案数。此部分是 \\(O(nmlogm)\\) 的）。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;utility&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=5e4+10,maxm=12,S=1050,mod=1e9+7; int n,m,a[maxn][maxm],D,f[S],pos,b[maxm],ans; char s[maxn]; pair&lt;int,int&gt; solve()&#123; int num=0;bool ok=true;char lst=&#x27;&gt;&#x27;; pair&lt;int,int&gt; ans(1,0),now,tmp; while(lst!=&#x27;)&#x27; and ++pos) if(isdigit(s[pos])) num=s[pos]^48; else if(s[pos]==&#x27;(&#x27;) now=solve(),ok=false; else ok and (now=make_pair((D&gt;&gt;num)&amp;1,(D&gt;&gt;num)&amp;1^1),0), ok=true,tmp=make_pair(0,0), lst!=&#x27;&gt;&#x27; and (tmp.second=(tmp.second+1ll*ans.second*now.second)%mod,tmp.first=(tmp.first+1ll*(ans.first+ans.second)*(now.first+now.second)-1ll*ans.second*now.second%mod+mod)%mod), lst!=&#x27;&lt;&#x27; and (tmp.first=(tmp.first+1ll*ans.first*now.first)%mod, tmp.second=(tmp.second+1ll*(ans.first+ans.second)*(now.first+now.second)-1ll*ans.first*now.first%mod+mod)%mod), ans=tmp,lst=s[pos],num=0; return ans; &#125; inline bool cmp(const int &amp;x,const int &amp;y)&#123;return a[pos][x]&lt;a[pos][y];&#125; inline void work()&#123; n=read(),m=read(); for(int i=0;i&lt;m;i++) for(int j=0;j&lt;n;j++) a[j][i]=read(); scanf(&quot;%s&quot;,s+1);s[strlen(s+1)+1]=&#x27;)&#x27;; for(D=0;D&lt;(1&lt;&lt;m);D++) pos=0,f[D]=solve().second; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;m;j++) b[j]=j; pos=i;sort(b,b+m,cmp); for(int j=0,d=0;j&lt;m;d|=(1&lt;&lt;b[j++])) ans=(ans+1ll*(a[i][b[j]]-(j?a[i][b[j-1]]:0))*f[d])%mod; &#125; printf(&quot;%d\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"}]},{"title":"P7003 [NEERC2013]Hack Protection","slug":"P7003 [NEERC2013]Hack Protection","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:18:15.904Z","comments":true,"path":"2022/04/30/P7003 [NEERC2013]Hack Protection/","permalink":"https://starcried.github.io/2022/04/30/P7003%20[NEERC2013]Hack%20Protection/","excerpt":"","text":"P7003 [NEERC2013]Hack Protection 题意 给定一个序列 \\(a\\) ，求有多少个区间满足区间内的数的异或和等于与的和的值。 思路 首先我们求一个异或前缀和 \\(s\\)，对于每一个区间 \\([l,r]\\) ，它的贡献为区间内按位与的和等于 \\(s_r \\bigoplus s_{l-1}\\) 的段的个数。 设 \\(x\\) 为某个区间的按位与的和，上面的也就是： \\[ s_r \\bigoplus s_{l-1}=x\\ \\Leftrightarrow \\ s_r=x \\bigoplus s_{l-1} \\] 发现，如果我们固定 \\(x\\) 和 \\(s_{l-1}\\) ，那么 \\(s_r\\) 就是固定的，我们就可以求区间内与 \\(s_r\\) 相等的数的个数来统计答案。 考虑枚举 \\(l\\) ，发现，对于往后按位与的过程，\\(x\\) (与上文定义相同)最多会变化 \\(\\log\\) 次，我们就可以将其分为这么多段，然后在 \\(s\\) 中求与 \\(s_r\\) 相等的数的个数就可以了。 求每一段的按位与结果，可以记录变成 0 的那一位是什么，或者直接 st 表查询都行。 对于最后一个问题，我们可以用主席树，或者简单地离散化加 vector 上二分即可。 实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;vector&gt;#include&lt;utility&gt;#define int unsigned using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int pre[maxn][35],n,a[maxn],b[maxn],s[maxn]; long long ans; vector&lt;int&gt; V[maxn]; pair&lt;int,int&gt; q[35]; inline void work()&#123; n=read(); for(int i=1;i&lt;=n;i++) s[i]=read(),a[i]=b[i]=a[i-1]^s[i]; sort(b+1,b+1+n); int cnt=unique(b+1,b+1+n)-b-1; for(int i=1;i&lt;=n;i++) a[i]=lower_bound(b+1,b+1+cnt,a[i])-b; for(int i=1;i&lt;=n;i++) V[a[i]].push_back(i); for(int j=0;j&lt;31;j++) pre[n+1][j]=n+1; for(int i=n;i;i--) for(int j=0;j&lt;31;j++) pre[i][j]=((s[i]&gt;&gt;j)&amp;1)?pre[i+1][j]:i; for(int l=1;l&lt;=n;l++)&#123; int tot=0,x=s[l]; q[0].first=l; for(int j=0;j&lt;31;j++) if((s[l]&gt;&gt;j)&amp;1) q[++tot]=make_pair(pre[l][j],j); q[++tot]=make_pair(n+1,0); sort(q+1,q+1+tot); for(int i=1;i&lt;=tot;i++)&#123; int y=lower_bound(b+1,b+1+cnt,x^b[a[l-1]])-b; if(y&lt;=n and b[y]==(x^b[a[l-1]])) ans+=(lower_bound(V[y].begin(),V[y].end(),q[i].first)-lower_bound(V[y].begin(),V[y].end(),q[i-1].first)); x^=(1&lt;&lt;q[i].second); &#125; &#125; printf(&quot;%lld\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"ST表","slug":"ST表","permalink":"https://starcried.github.io/tags/ST%E8%A1%A8/"}]},{"title":"P7362 [eJOI 2020 Day2] XOR Sort","slug":"P7362 [eJOI 2020 Day2] XOR Sort","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:33:51.025Z","comments":true,"path":"2022/04/30/P7362 [eJOI 2020 Day2] XOR Sort/","permalink":"https://starcried.github.io/2022/04/30/P7362%20[eJOI%202020%20Day2]%20XOR%20Sort/","excerpt":"","text":"P7362 [eJOI 2020 Day2] XOR Sort 题意 给你一个长度为 \\(n\\) 的序列，每次操作可以将一个数异或上相邻的一个数，求将序列改为严格单调递增序列或严格单调不降序列的操作次数的操作序列。 注意，改为严格单调递增序列的数据 \\(n\\leq 200\\) 且每个数不相同，改为严格单调不降序列的数据 \\(n\\leq 1000\\)。 不要求操作次数最小，次数需不大于 \\(40000\\)，元素大小小于 \\(2^{20}\\)。 思路 严格单调递增序列的数据实测如果改了数列很容易造成数字相同然后挂掉的情况出现。反而严格单调不降的条件用异或容易满足且数据范围大。我们考虑对数据分治。 严格单调递增序列 我们考虑冒泡排序的思想，每次用异或交换相邻两项，可以过第一档部分分。 考虑优化这个过程。考虑每次将一个最大的数换到序列最后的方法。设 \\[ A=\\{a,b,c,d,e,f,g\\} \\] 若此时 \\(d\\) 是最大的数，我们想把它换到最后面，设 $$ 表示二进制异或操作，我们可以先将序列变为 \\[ \\{a\\oplus b,b\\oplus c,c\\oplus d,d\\oplus e,e\\oplus f,f\\oplus g,g\\} \\] 对于 \\(d\\oplus e\\) 后面的元素，我们将它们按顺序与前一项异或，容易发现序列变为 \\[ \\{a\\oplus b,b\\oplus c,c\\oplus d,d\\oplus e,d\\oplus f,d\\oplus g,d\\} \\] 那么我们就将 \\(d\\) 换到队尾去了。为了消除 \\(d\\) 的影响，我们将前面的元素也进行类似的操作 \\[ \\{a\\oplus d,b\\oplus d,c\\oplus d,d\\oplus e,d\\oplus f,d\\oplus g,d\\} \\] 此时对于缩小了一个长度的序列重复进行求解即可。注意每次寻找的是原数列上的最大值而非每次更新完后的值。 操作次数为 \\(\\frac 12\\times 2n^2=n^2\\)。 严格单调不降序列 从高位向低位考虑，每次我们仅考虑序列这一位的数，若非全 \\(0\\) 则一定能通过异或将其变为只剩一个 \\(1\\) 。从左往右考虑清零，若 \\(a_i\\) 该位为 \\(1\\)，那么我们让 \\(a_{i+1}\\oplus a_i\\) 使该位为 \\(1\\)（若本为 \\(1\\) 则不操作）。操作完后使最后一位为 \\(1\\)，并将序列长度减 \\(1\\)（结尾位置前移）。 注意当有一位为全 \\(0\\) 的时候我们不能将序列长度缩短，因为我们保证序列单调不降的方法是后面的最高位二进制位数比前面的大，全 \\(0\\) 的话会导致不满足并被卡。虽然实际上该题数据没有卡这个。 实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;utility&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1005; int n,a[maxn]; int Ans; pair&lt;int,int&gt; ans[1000005]; inline void work1()&#123; static int b[maxn]; for(int i=1;i&lt;=n;i++) a[i]=b[i]=read(); for(int len=n-1;~len;len--)&#123; int x=0; for(int i=1;i&lt;=len+1;i++) if(b[i]&gt;b[x]) x=i; for(int i=1;i&lt;=len+1 and i&lt;n;i++) a[i]^=a[i+1],ans[++Ans]=make_pair(i,i+1); for(int i=x;i&lt;=len;i++) a[i+1]^=a[i],ans[++Ans]=make_pair(i+1,i),swap(b[i],b[i+1]); for(int i=x-1;i&gt;1;i--) a[i-1]^=a[i],ans[++Ans]=make_pair(i-1,i); &#125; &#125; inline void work2()&#123; for(int i=1;i&lt;=n;i++) a[i]=read(); for(int cnt=0,k=19;~k;k--)&#123; bool ok=false; for(int i=1;i&lt;=n-cnt;i++) ok|=(a[i]&gt;&gt;k)&amp;1; if(!ok) continue; for(int i=1;i&lt;n-cnt;i++) if((a[i]&gt;&gt;k)&amp;1)&#123; if((a[i+1]&gt;&gt;k)&amp;1^1) a[i+1]^=a[i],ans[++Ans]=make_pair(i+1,i); a[i]^=a[i+1],ans[++Ans]=make_pair(i,i+1); &#125; ++cnt; &#125; &#125;&#125;signed main()&#123; star::n=read(); if(read()==1) star::work1(); else star::work2(); printf(&quot;%d\\n&quot;,star::Ans); for(int i=1;i&lt;=star::Ans;i++) printf(&quot;%d %d\\n&quot;,star::ans[i].first,star::ans[i].second); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"构造","slug":"构造","permalink":"https://starcried.github.io/tags/%E6%9E%84%E9%80%A0/"}]},{"title":"P7473 [NOI Online 2021 入门组] 重力球","slug":"P7473 [NOI Online 2021 入门组] 重力球","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:34:31.196Z","comments":true,"path":"2022/04/30/P7473 [NOI Online 2021 入门组] 重力球/","permalink":"https://starcried.github.io/2022/04/30/P7473%20[NOI%20Online%202021%20%E5%85%A5%E9%97%A8%E7%BB%84]%20%E9%87%8D%E5%8A%9B%E7%90%83/","excerpt":"","text":"P7473 [NOI Online 2021 入门组] 重力球 题意 给你一个正方形平面，某些位置有障碍，对于平面上两个球，每次你可以改变重力方向使两个球下落到最底端，求使两个球位置重合的最小改变重力次数。障碍固定，多次询问两个球的位置。 思路 考虑最暴力的想法，总共有 \\(n^4\\) 种状态，即两个球的坐标。 考虑优化状态数，发现只有障碍物（边界）旁边（四联通）的位置才有用。实际最大位置数为 \\(250\\times 4+250\\times 4=2000\\) 左右。那么实际状态数最大为 \\(2000\\times 2000=4000000\\) 左右。 我们把这些状态看做点，每个点只能有四条出边，那么边数和点数同阶。这样我们就有了另外一个暴力的想法：对于每个初始局面，暴力 BFS。 因为有多组询问考虑优化。实际上最终重合的状态有 \\(2000\\) 个，我们反向建边，然后从这些点开始 BFS 出到所有状态的最小代价。每次查询的时候枚举第一次改变重力的方向即可。（注意判重合） 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;vector&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=255,maxm=2010; int n,m,Q,tot,a[maxn][maxn],t[maxn][maxn][4]; unsigned dis[maxm][maxm]; vector&lt;int&gt; to[maxm][4]; inline void addedge(int a,int b,int c)&#123;to[a][c].push_back(b);&#125; inline void work()&#123; n=read(),m=read(),Q=read(); while(m--) a[read()][read()]=-1; for(int i=1;i&lt;=n;a[0][i]=a[i][0]=a[n+1][i]=a[i][n+1]=-1,i++) for(int j=1;j&lt;=n;j++) if(!a[i][j] and (a[i-1][j]==-1 or a[i+1][j]==-1 or a[i][j-1]==-1 or a[i][j+1]==-1)) a[i][j]=++tot; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) t[i][j][0]=a[i][j-1]==-1?a[i][j]:t[i][j-1][0],t[i][j][1]=a[i-1][j]==-1?a[i][j]:t[i-1][j][1]; for(int i=n;i;i--) for(int j=n;j;j--) t[i][j][2]=a[i][j+1]==-1?a[i][j]:t[i][j+1][2],t[i][j][3]=a[i+1][j]==-1?a[i][j]:t[i+1][j][3]; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) if(a[i][j]&gt;0) for(int k=0;k&lt;4;k++) addedge(t[i][j][k],a[i][j],k); static pair&lt;int,int&gt; q[maxm*maxm]; int hd=0,tl=0; memset(dis,-1,sizeof dis); for(int i=1;i&lt;=tot;i++) q[++tl]=make_pair(i,i),dis[i][i]=1; while(hd&lt;tl)&#123; pair&lt;int,int&gt; x=q[++hd]; for(int i=0;i&lt;4;i++) for(auto u:to[x.first][i]) for(auto v:to[x.second][i]) if(dis[u][v]==-1) dis[u][v]=dis[x.first][x.second]+1,q[++tl]=make_pair(u,v); &#125; while(Q--)&#123; int x1=read(),y1=read(),x2=read(),y2=read(); if(x1==x2 and y1==y2) puts(&quot;0&quot;); else printf(&quot;%d\\n&quot;,min(&#123;dis[t[x1][y1][0]][t[x2][y2][0]],dis[t[x1][y1][1]][t[x2][y2][1]],dis[t[x1][y1][2]][t[x2][y2][2]],dis[t[x1][y1][3]][t[x2][y2][3]]&#125;)); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"搜索","slug":"搜索","permalink":"https://starcried.github.io/tags/%E6%90%9C%E7%B4%A2/"}]},{"title":"POJ1944","slug":"POJ1944","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:36:31.046Z","comments":true,"path":"2022/04/30/POJ1944/","permalink":"https://starcried.github.io/2022/04/30/POJ1944/","excerpt":"","text":"poj1944 一道我不会做的贪心题。 （思维才是OI的重点） 但是if您也不会，那就来听我瞎扯吧。 首先，这个图是一个圈，只能连接邻点，使所有求的点联通。 我们先不考虑环，那么就可以想出一个假的做法：用一个a数组记录入度和出度，出度为正，入度为负，用一个sum=0从0遍历每个点记录当前出入度，每次加ai，若sum大于0给答案加上1就行了。 然后，我们来考虑环。我们发现。不管怎么连这个图，肯定都会有一个断边的，连接的路径绝不会是一个完整的环。因为如果连成了完整地环，肯定有一条边断掉这个图还是联通的，即这条边是无用的。那么，我们欺负n小就可以分别从第i个点出发像上述查找一条链的做法一样地计算，然后取最大值就行了。 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=1010,maxm=10010;int n,m,a[maxn],l[maxm],r[maxm];int main()&#123; n=read(),m=read(); for(int i=0;i&lt;m;i++)l[i]=read(),r[i]=read(); int ans=0x3f3f3f3f; for(int i=0;i&lt;n;i++)&#123; memset(a,0,sizeof a); int x,y; for(int j=0;j&lt;m;j++)&#123; x=(l[j]+i)%n; y=(r[j]+i)%n; if(x&gt;y)swap(x,y); a[x]++; a[y]--; &#125; int now=0,pre=0; for(int i=0;i&lt;n;i++)&#123; now+=a[i]; if(now)pre++; &#125; if(pre&lt;ans)ans=pre; &#125; printf(&quot;%d\\n&quot;,ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"贪心","slug":"贪心","permalink":"https://starcried.github.io/tags/%E8%B4%AA%E5%BF%83/"}]},{"title":"POJ3268-最短路径-反向存边","slug":"POJ3268-最短路径-反向存边","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:46:27.986Z","comments":true,"path":"2022/04/30/POJ3268-最短路径-反向存边/","permalink":"https://starcried.github.io/2022/04/30/POJ3268-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-%E5%8F%8D%E5%90%91%E5%AD%98%E8%BE%B9/","excerpt":"","text":"因为是单向边，牛儿来回的路径长度并不相同，所以需要用两次 dijkstra，一次正向从 \\(x\\) 开始 dijkstra，再将边全部反向存再来一次。 因为是板子题比较良心 \\(n\\) 比较小，我们就可以用矩阵来存储啦。如果 \\(n\\) 比较大的话，我的想法是再造一个图，同时反向存边。内存可能占用比较大但是想起来简单。 代码很短。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;#include&lt;utility&gt;#include&lt;vector&gt;#include&lt;functional&gt;#include&lt;ctype.h&gt;using namespace std;typedef pair&lt;int,int&gt; pairr;const int maxn=1005;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;int mapp[maxn][maxn];int n,m,t;int dis[maxn];inline void dijkstra(int st)&#123; memset(dis,0x3f3f3f3f,sizeof dis); priority_queue &lt;pairr,vector&lt;pairr &gt;,greater&lt;pairr &gt; &gt;q; q.push(make_pair(0,st));dis[st]=0; while(!q.empty()) &#123; int v=q.top().second;q.pop(); for(int i=1;i&lt;=n;i++) if(mapp[v][i]) &#123; if(dis[i]&gt;dis[v]+mapp[v][i]) &#123; dis[i]=dis[v]+mapp[v][i]; q.push(make_pair(dis[i],i)); &#125; &#125; &#125;&#125;int way[maxn];int main()&#123; n=read();m=read();t=read(); for(int i=1;i&lt;=m;i++) mapp[read()][read()]=read(); dijkstra(t); for(int i=1;i&lt;=n;i++)way[i]=dis[i]; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;i;j++)swap(mapp[i][j],mapp[j][i]); dijkstra(t); int ans=0; for(int i=1;i&lt;=n;i++)ans=max(ans,dis[i]+way[i]); printf(&quot;%d\\n&quot;,ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"POJ3187 Backward Digit Sums","slug":"POJ3187 Backward Digit Sums","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:40:03.496Z","comments":true,"path":"2022/04/30/POJ3187 Backward Digit Sums/","permalink":"https://starcried.github.io/2022/04/30/POJ3187%20Backward%20Digit%20Sums/","excerpt":"","text":"POJ3187 Backward Digit Sums 好熟悉的题目……但是忘了是怎么做的……好像是随机排列？ 反正都是暴力，看了下网上的题解，好像也没有更好的正解了。有想法的告诉我一下蟹蟹~ 题意 我们可以用1~n这n个数字用类似杨辉三角的方法加起来，我们就可以把他们拆回去。这样的排列可能有多种，我们要它字典序最小的一种。 思路 \\(n\\) 比较小，考虑排列所有可能一个个试……这里用一下新东西。 next_permutation,意义为下一个排列，引用于 &lt;algorithm&gt; 头文件。 用法：next_permutation(a,a+n) 表示排列 a 到 a+n 的下一种排序方法。若要排列整数，建立数组 a，next_permutation(a,a+n) 表示按字典序排列其第 a[0] 到 a[n-1] 元素。这和 sort 的范围表示类似。 next_permutation 的返回值为布尔类型，如果能够继续排列并排列了就返回 true。如果没有后续排列返回 false。我们可以利用这个特性进行判断。 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;cmath&gt;using namespace std;int n,sum,a[100],A[100];void read(int &amp;x)&#123; char c=getchar(); while(c&lt;&#x27;0&#x27; or c&gt;&#x27;9&#x27;)c=getchar(); x=c-&#x27;0&#x27;,c=getchar(); while(c&gt;=&#x27;0&#x27; and c&lt;=&#x27;9&#x27;) x*=10,x+=c-&#x27;0&#x27;,c=getchar();&#125;int main()&#123; read(n);read(sum); if(n==1)&#123; printf(&quot;1\\n&quot;);return 0; &#125; for(int i=0;i&lt;n;i++)A[i]=i+1; do&#123; for(int i=0;i&lt;n;i++)a[i]=A[i]; int cur=n; bool ok=0; while(cur&gt;1)&#123; for(int i=0;i&lt;cur-1;i++)a[i]=a[i]+a[i+1]; if(cur==2 and a[0]==sum) &#123; printf(&quot;%d&quot;,A[0]); for(int i=1;i&lt;n;i++)printf(&quot; %d&quot;,A[i]); printf(&quot;\\n&quot;); return 0; &#125; cur--; &#125; &#125;while(next_permutation(A,A+n));&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"}]},{"title":"[省选联考 2020 A B 卷] 冰火战士","slug":"[省选联考 2020 A B 卷] 冰火战士","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.542Z","comments":true,"path":"2022/04/30/[省选联考 2020 A B 卷] 冰火战士/","permalink":"https://starcried.github.io/2022/04/30/[%E7%9C%81%E9%80%89%E8%81%94%E8%80%83%202020%20A%20B%20%E5%8D%B7]%20%E5%86%B0%E7%81%AB%E6%88%98%E5%A3%AB/","excerpt":"","text":"对树状数组的理解加深了！ 转化题意 动态维护一个单调不降和一个单调不增序列，每次修改后输出两序列取最小值后的最大值和其最大位置。 思路 首先，阅读原题，知道最后答案一定是某个战士的温度，所以我们将温度离散化。 再次阅读，发现冰系是一个（以温度为自变量的）单调不降序列，每次修改一个战士就是修改一段后缀。火系相反，修改前缀。 深度阅读，发现题目其实就是求两个序列的交点。于是转化成上述题意。 考虑二分答案求出两点的交，即温度最大的冰系能量和不大于火系能量和的位置。如果用树状数组动态维护每次查询的话，时间复杂度是 \\(O(log^2n)\\) ，无法通过。 实际上，树状数组也是可以二分的。回忆树状数组的树形结构，一个点 \\(P+2^i\\) 实际上存储了 \\(P+1\\)到\\(P+2^i\\) 的所有信息，所以我们在树状数组上二分，实际上就是像倍增一样，从大到小依次枚举这个点加上 \\(2^i\\) 的祖先，能跳则跳。 于是我们就可以通过这题了。注意我这里存储火系前缀和的方式是记录一个全局和再在树状数组上减去。 最后答案乘二。 实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c)) w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=4e6+10; int n,b[maxn],cnt,sumfire; struct BIT&#123; int c[maxn]; inline void update(int x,int k)&#123;for(;x&lt;=cnt;x+=x&amp;-x)c[x]+=k;&#125; &#125;S1,S2; inline int query(int x)&#123; if(x&lt;1 or x&gt;cnt) return 0; int ans1=0,ans2=sumfire; for(;x;x-=x&amp;-x) ans1+=S1.c[x],ans2+=S2.c[x]; return min(ans1,ans2); &#125; struct query&#123; bool type; int t,v,op; &#125;e[maxn]; inline void work()&#123; n=read(); for(int i=1;i&lt;=n;i++) if((e[i].op=read())==1) e[i].type=read(),e[i].t=b[++cnt]=read(),e[i].v=read(); else e[i]=e[read()],e[i].op=2,e[i].v=-e[i].v; sort(b+1,b+1+cnt); cnt=unique(b+1,b+1+cnt)-b-1; for(int i=1;i&lt;=n;i++) e[i].t=lower_bound(b+1,b+1+cnt,e[i].t)-b; for(int i=1;i&lt;=n;i++)&#123; if(e[i].type==0) S1.update(e[i].t,e[i].v); else S2.update(e[i].t+1,-e[i].v),sumfire+=e[i].v; int x1=0,sum=-sumfire; for(int j=21;~j;j--)&#123; int to=x1|(1&lt;&lt;j),zp; if(to&lt;=cnt and (zp=sum+S1.c[to]-S2.c[to])&lt;=0) sum=zp,x1=to; &#125; int ans1=query(x1),x2=x1+1,ans2=query(x2); if(ans1&lt;=0 and ans2&lt;=0)puts(&quot;Peace&quot;); else if(ans1&gt;ans2) printf(&quot;%d %d\\n&quot;,b[x1],ans1&lt;&lt;1); else &#123; int p=0,sum=sumfire; for(int j=21;~j;j--)&#123; int to=p|(1&lt;&lt;j),zp; if(to&lt;=cnt and (zp=sum+S2.c[to])&gt;=ans2) sum=zp,p=to; &#125;//因为现在的情况一定是火系战士能量低所以光用火系的找答案就行了 printf(&quot;%d %d\\n&quot;,b[p],sum&lt;&lt;1); &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 其他 三分是不正确的因为这玩意的峰不知道在哪而且会有平台。 如果用其他方式存火系的信息请务必考虑是否算进了当前点的值。 听说这题数据特水每次暴力移动上次答案的指针都能过 输出太大在洛谷上OLE了，但LOJ上可以提交，希望管理员修复一下（已修复）","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"树状数组","slug":"树状数组","permalink":"https://starcried.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"},{"name":"二分","slug":"二分","permalink":"https://starcried.github.io/tags/%E4%BA%8C%E5%88%86/"}]},{"title":"bzoj2118 墨墨的等式","slug":"bzoj2118 墨墨的等式","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T07:19:13.495Z","comments":true,"path":"2022/04/30/bzoj2118 墨墨的等式/","permalink":"https://starcried.github.io/2022/04/30/bzoj2118%20%E5%A2%A8%E5%A2%A8%E7%9A%84%E7%AD%89%E5%BC%8F/","excerpt":"","text":"Description 墨墨突然对等式很感兴趣，他正在研究 \\(a_1x_1+a_2x_2+...+a_nx_n=B\\) 存在非负整数解的条件，他要求你编写一个程序，给定 \\(N\\)、\\(\\{a_n\\}\\)、以及 \\(B\\) 的取值范围，求出有多少 \\(B\\) 可以使等式存在非负整数解。 Input 输入的第一行包含 3 个正整数，分别表示 \\(N\\)、\\(B_{Min}\\)、\\(B_{Max}\\) 分别表示数列的长度、\\(B\\) 的下界、\\(B\\) 的上界。输入的第二行包含 \\(N\\) 个整数，即数列 \\(\\{a_n\\}\\) 的值。 Output 输出一个整数，表示有多少b可以使等式存在非负整数解。 Sample Input 2 5 10 3 5 Sample Output 5 HINT 对于 100% 的数据，\\(N\\leq 12\\)，\\(0\\leq a_i\\leq 5*10^5\\)$，\\(1\\leq B_{Min},B_{Max}\\leq 10^{12}\\)。 分析 我们发现这已经不是简单的数论题了！（我开始并没有发现）对于这种无限取的背包问题，可以转化为取 mod 最短路的问题。具体怎么想呢？ 首先我们将 \\(a\\) 排序（因为这道题 \\(n\\) 比较小其实可以不用但是这样更优秀）考虑对于 \\(a_1\\)，对于所有能够取到的数 \\(x\\)，都有 \\(x+a1*k\\)（\\(k\\) 任意）一定会被取到。所以我们就可以把所有能够取到的数模 \\(a_1\\)，发现结果属于 \\(0,\\dots, a_1-1\\)中的一个，那么我们就把每一个 \\(0,\\dots, a_1\\) 看做一个集合包括所有能够取到的数模 \\(a_1\\) 等于该值。 那么最小路怎么解释呢？相当于每次加一个数就走了一条边，我们将所有小于 \\(r\\) 的数模 \\(a_1\\) 的最小值看做最短路，求完后遍历 \\(0,\\dots,a_1\\) 分别求 \\(r\\) 和 \\(l-1\\) 的组合的个数（前缀和）减去即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;ctype.h&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;queue&gt;#include&lt;utility&gt;#include&lt;vector&gt;#include&lt;functional&gt;using namespace std;const int maxn=5e5+5;typedef long long ll;typedef pair&lt;ll,int&gt; pairr;int n,a[15];ll L, R;struct Edge&#123; int to,nxt,dis;&#125;e[maxn*10];int head[maxn];int ecnt;inline void addedge(int from,int to,int dis)&#123; e[++ecnt]=(Edge)&#123;to,head[from],dis&#125;,head[from]=ecnt;&#125;ll dis[maxn];bool vis[maxn];void dijkstra()&#123; priority_queue &lt;pairr,vector&lt;pairr &gt;,greater&lt;pairr &gt; &gt;q; for(int i=0;i&lt;a[1];i++)dis[i]=(ll)1e60; dis[0]=0; q.push(make_pair(0,0)); while(!q.empty()) &#123; int v=q.top().second;q.pop(); if(vis[v])continue;vis[v]=1; for(int i=head[v];i!=-1;i=e[i].nxt) &#123; int u=e[i].to; ll w=(ll)e[i].dis; if(dis[u]&gt;dis[v]+w) &#123; dis[u]=dis[v]+w; q.push(make_pair(dis[u],u)); &#125; &#125; &#125;&#125;inline ll getans(ll x)&#123; ll ans=0; for(int i=0;i&lt;a[1];i++) if(dis[i]&lt;=R)&#123; ll zp=max(0ll,(x-dis[i])/a[1]); if(zp*a[1]+dis[i]&lt;x)ans++; ans+=zp; &#125; return ans;&#125;int main()&#123; scanf(&quot;%d%lld%lld&quot;,&amp;n,&amp;L,&amp;R); memset(head,-1,sizeof(head)); for(int i=1;i&lt;=n;i++) &#123; scanf(&quot;%d&quot;,&amp;a[i]); if(a[i]==0)n--,i--; &#125; sort(a+1,a+1+n); for(int i=0;i&lt;a[1];i++) for(int j=2;j&lt;=n;j++) addedge(i,(a[j]+i)%a[1],a[j]); dijkstra();// printf(&quot;%lld\\n&quot;,getans(R)-getans(L-1)+1); ll ans=0; for (int i=0;i&lt;a[1];i++) if (dis[i]&lt;=R) &#123; ll l=max(0ll,(L-dis[i])/a[1]); if (l*a[1]+dis[i]&lt;L) l++; ll r=(R-dis[i])/a[1]; if (r*a[1]+dis[i]&gt;R) r--; ans+=r-l+1; &#125; printf(&quot;%lld\\n&quot;,ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"Trie树","slug":"Trie树","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T16:49:54.251Z","comments":true,"path":"2022/04/30/Trie树/","permalink":"https://starcried.github.io/2022/04/30/Trie%E6%A0%91/","excerpt":"","text":"就是把字符串转变成一个树，每个节点连接下一个字符，用空间换时间。 对于区分大小写或不区分的题目，只需要改变 ch[][26] 的值就行了。 ch[u][x] 表示 u 节点（标号决定）下一个 x 字符节点的标号。 如果题目让记录附加值，那就用 val[] 在插入时记录一下就好了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;const int maxn=2333;struct trie&#123; ll ch[maxn][26],siz,val[maxn]; trie()&#123; siz=1;//一开始的时候只有根节点这一个节点 memset(ch[0],0,sizeof(ch[0])); memset(val,0,sizeof(val)); &#125; inline ll idx(char c)&#123;return c-&#x27;a&#x27;;&#125; void insert(char *s,ll v) &#123; ll u=0,len=strlen(s+1); for(ll i=1;i&lt;=len;i++)&#123; ll c=idx(s[i]); if(!ch[u][c])&#123; memset(ch[siz],0,sizeof ch[siz]); val[siz]=0; ch[u][c]=siz++; &#125; u=ch[u][c]; &#125; val[u]=v; &#125; ll query(char *s) &#123; ll u=0,len=strlen(s+1); for(ll i=1;i&lt;=len;i++)&#123; ll c=idx(s[i]); if(!ch[u][c])return -1; u=ch[u][c]; &#125; return val[u]; &#125;&#125;tr;int main()&#123; return 0;&#125; P2580 于是他错误的点名开始了 （名字好奇怪） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=10005*50;int n;struct trie&#123; int cnt,ch[maxn][26]; int vis[maxn]; trie() &#123; cnt=1; memset(ch[0],0,sizeof ch[0]); memset(vis,0,sizeof vis); &#125; inline int ex(char c)&#123;return c-&#x27;a&#x27;;&#125; inline void insert(char *s) &#123; int u=0,len=strlen(s+1); for(int i=1;i&lt;=len;i++) &#123; int c=ex(s[i]); if(!ch[u][c])&#123; memset(ch[cnt],0,sizeof ch[cnt]); ch[u][c]=cnt++; &#125; u=ch[u][c]; &#125; &#125; inline int query(char *s) &#123; int u=0,len=strlen(s+1); for(int i=1;i&lt;=len;i++) &#123; int c=ex(s[i]); if(!ch[u][c])return 2; u=ch[u][c]; &#125; if(!vis[u])&#123; vis[u]++;return 1; &#125; return 3; &#125;&#125;tr;int main()&#123; scanf(&quot;%d&quot;,&amp;n); char a[100]; for(int i=1;i&lt;=n;i++) &#123; scanf(&quot;%s&quot;,a+1); tr.insert(a); &#125; int m; scanf(&quot;%d&quot;,&amp;m); for(int i=1;i&lt;=m;i++) &#123; scanf(&quot;%s&quot;,a+1); switch(tr.query(a)) &#123; case(1):&#123; printf(&quot;OK\\n&quot;); break; &#125; case(2):&#123; printf(&quot;WRONG\\n&quot;); break; &#125; case(3):&#123; printf(&quot;REPEAT\\n&quot;); break; &#125; &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"字符串","slug":"字符串","permalink":"https://starcried.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"Matrix-tree定理","slug":"matrix-tree定理","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:29:11.149Z","comments":true,"path":"2022/04/30/matrix-tree定理/","permalink":"https://starcried.github.io/2022/04/30/matrix-tree%E5%AE%9A%E7%90%86/","excerpt":"","text":"矩阵树定理 定义 邻接矩阵：\\(A=(a_{ij})\\)，其中 \\(a_{ij}\\) 表示 \\(i\\) 到 \\(j\\) 有几条边相连。 度数矩阵：\\(C=(c_{ij})\\)，为对角矩阵，其中 \\(c_{ii}\\) 表示 \\(i\\) 的度数。 基尔霍夫矩阵：\\(D=C-A\\)。 余子式：\\(M_{ij}\\) 表示去掉第 \\(i\\) 行第 \\(j\\) 列后得到矩阵的行列式。 定理 无向图的生成树个数等于其基尔霍夫矩阵 \\(D\\) 的任意余子式的行列式。 如果图不连通，那么任意余子式为0。 例题 P4208 [JSOI2008] 最小生成树计数 根据定理，我们只需要求出联通的边权相同的点集，在该集合中根据矩阵树定理求出生成树的多少，然后把所有集合的结果相乘就好辣！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=105,maxm=1005,mod=31011; int n,m,N; int a[maxn][maxn],fa[maxn],but[maxn],bel[maxn]; struct Edge&#123; int u,v,w; bool operator &lt; (const Edge&amp; rhs) const&#123; return w&lt;rhs.w; &#125; &#125;e[maxm],em[maxm]; int find(int x)&#123;return x==fa[x]?x:fa[x]=find(fa[x]);&#125; long long Gauss(int n)&#123; long long ans=1; for(int i=1;i&lt;=n;i++)&#123; for(int j=i+1;j&lt;=n;j++)&#123; while(a[j][i])&#123; long long t=a[i][i]/a[j][i]; for(int k=i;k&lt;=n;k++) a[i][k]=(a[i][k]-t*a[j][k]%mod+mod)%mod; swap(a[i],a[j]); ans=-ans; &#125; &#125; ans=(ans*a[i][i]%mod+mod)%mod; &#125; return ans; &#125; inline void work()&#123; n=read();m=read(); for(int i=1;i&lt;=n;i++) fa[i]=i; for(int i=1;i&lt;=m;i++) e[i].u=read(),e[i].v=read(),e[i].w=read(); sort(e+1,e+m+1); int cnt=0,cnte=0; for(int i=1;i&lt;=m;i++)&#123; int x=find(e[i].u),y=find(e[i].v),z=e[i].w; if(x!=y)&#123; fa[x]=y; em[++cnte]=e[i]; if(z!=but[cnt]) but[++cnt]=z; &#125; &#125; if(cnte!=n-1) return (void)puts(&quot;0&quot;); long long ans=1; for(int i=1;i&lt;=cnt;i++)&#123; for(int j=1;j&lt;=n;j++) fa[j]=j; for(int j=1;j&lt;=cnte;j++) if(em[j].w!=but[i]) fa[find(em[j].u)]=find(em[j].v); N=0; for(int j=1;j&lt;=n;j++) if(find(j)==j) bel[j]=++N; for(int j=1;j&lt;=n;j++) bel[j]=bel[find(j)]; memset(a,0,sizeof(a)); for(int j=1;j&lt;=m;j++) if(e[j].w==but[i])&#123; int x=bel[e[j].u],y=bel[e[j].v]; a[x][y]--,a[y][x]--; a[x][x]++;a[y][y]++; &#125; ans=ans*Gauss(N-1)%mod; &#125; printf(&quot;%lld\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"高斯消元","slug":"高斯消元","permalink":"https://starcried.github.io/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"}]},{"title":"中国剩余定理","slug":"中国剩余定理","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T03:46:04.710Z","comments":true,"path":"2022/04/30/中国剩余定理/","permalink":"https://starcried.github.io/2022/04/30/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/","excerpt":"","text":"“有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？”——《孙子算经》 中国剩余定理 即求多个同余方程的解。 举个栗子。求一个数x，使得： \\[\\begin{cases} x≡2\\pmod 3\\\\ x≡3\\pmod 5\\\\ x≡2\\pmod {11}\\end{cases}\\] 设 \\(M=3*5*11=165\\), \\(a1=3\\), \\(a2=5\\), \\(a3=11\\), \\[ \\begin{aligned} M1=M/a1=55\\\\ M2=M/a2=33\\\\ M3=M/a3=15 \\end{aligned} \\] 然后我们再求 \\(a\\) 的逆元 \\(c\\)。（扩展欧几里得） 然后结果就是 \\((a1*M1*c1 + a2*M2*c2 + a3*M3*c3)\\pmod M\\) 当然，我们要求的不仅仅是符合3个数的要求。于是我们就可以得到代码： （变量名和以上有出入） 12345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;typedef long long ll;void exgcd(ll a,ll b,ll &amp;d,ll &amp;x,ll &amp;y)&#123; if(!b)d=a,x=1,y=0; else&#123; exgcd(b,a%b,d,y,x); y-=(a/b)*x; &#125;&#125;ll China(int n,ll *m,ll*a)&#123; ll M=1,d,y,x=0; for(int i=0;i&lt;n;i++)M*=m[i]; for(int i=0;i&lt;n;i++)&#123; ll w=M/m[i]; exgcd(m[i],w,d,d,y); x=(x+y*w*a[i])%M; &#125; return (x+M)%M;&#125;ll m[15],a[15];int main()&#123; int n; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;i++) scanf(&quot;%lld%lld&quot;,&amp;m[i],&amp;a[i]); printf(&quot;%lld&quot;,China(n,m,a)); return 0;&#125; 以上是中国剩余定理的内容（CRT） 扩展中国剩余定理（exCRT） 简单来说就是对于每两个同余方程，我们可以把它们合并成一个同余方程，并在每次计入一个新的同余方程的时候得到新的解。我们理性地思考一下，如： \\[\\begin{cases} x≡y_1(mod m_1)\\\\ x≡y_2(mod m_2)\\\\ ...\\\\ x≡y_n(mod m_n) \\end{cases}\\] \\[M=LCM_{i−1}^{k−1}mi\\] 其中 \\(m_1,m_2,m_3...m_n\\) 为不一定两两互质的整数,求 \\(x\\) 的最小非负整数解. 假设前 \\(n-1\\) 项已经求出解为 \\(x\\)，那么对于第 \\(n\\) 个式子： \\[x+tM≡y_n(mod m_n)\\] \\(M\\) 和 \\(y_n\\)、\\(m_n\\)是已知的，我们只需 exgcd 求出 \\(x\\) 和 \\(t\\) 就行了。 或者我们把合并感性理解一下，假设原来只有一个同余方程 \\[x≡y_1(mod m_1)\\Rightarrow x+k_1m_1=y_1\\] 我们再加入一个方程 \\[x≡y_2(mod m_2)\\Rightarrow x+k_2m_2=y_2\\] 两者相减，得到 \\[k_1m_1-k_2m_2=y_1-y_2\\] 再用 exgcd 解得 \\(k_1\\) 和 \\(k_2\\) 即可。那么要求 \\(x\\) 的值回代即可。 那么对于一个新加入的式子就有： \\[-k_1m_1+y_1+tm_3=k_3m_3+y_3\\] （\\(k_1\\)、\\(m_1\\) 和 \\(y_1\\) 表示上次的 \\(x\\)）发现新的未知数是 \\(t\\) 和 \\(k_3\\)，重新用exgcd求解即可。 当然这里只写了三个式子。想要更多同余方程组的解？请多次 exgcd。这个思维和上面的思维是等价的。 洛谷P4777 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;cctype&gt;using namespace std;typedef long long ll;inline ll read()&#123; bool w=0;ll x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const ll maxn=1e5+100; ll y[maxn],m[maxn],n; inline void exgcd(ll a,ll b,ll &amp;x,ll &amp;y,ll &amp;d)&#123; if(!b)d=a,x=1,y=0; else exgcd(b,a%b,y,x,d),y-=x*(a/b); &#125; ll mul(ll a,ll b,ll mod)&#123; ll res=0; while(b)&#123; if(b&amp;1)res=(res+a)%mod; a=(a+a)%mod; b&gt;&gt;=1; &#125; return res; &#125; inline ll excrt() &#123; ll xx,yy,k; ll M=m[1],ans=y[1]; for(int i=2;i&lt;=n;i++) &#123; ll a=M,b=m[i],c=(y[i]-ans%b+b)%b;//x≡y(mod m)，ans为上一次的解。 ll gcd; exgcd(a,b,xx,yy,gcd);//tM+km=y-x,c是常数项，xx和yy分别表示t和k ll bg=b/gcd;//这个是为了exgcd的最后一个步骤，求解出最小非负整数解 if(c%gcd!=0) return -1; xx=mul(xx,c/gcd,bg); ans+=xx*M; M*=bg;//M为前k个m的lcm ans=(ans%M+M)%M; &#125; return (ans%M+M)%M; &#125; inline void cried() &#123; n=read(); for(int i=1;i&lt;=n;i++)m[i]=read(),y[i]=read(); printf(&quot;%lld\\n&quot;,excrt()); &#125;&#125;int main()&#123; star::cried(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"二项式反演","slug":"二项式反演","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T03:46:03.383Z","comments":true,"path":"2022/04/30/二项式反演/","permalink":"https://starcried.github.io/2022/04/30/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/","excerpt":"","text":"二项式反演 \\[ \\begin{aligned} g_n=\\sum_{i=0}^n(-1)^i\\binom ni f_i\\Leftrightarrow f_n=\\sum_{i=0}^n(-1)^i\\binom ni g_i\\\\ g_n=\\sum_{i=0}^n\\binom ni f_i\\Leftrightarrow g_n=\\sum_{i=0}^n(-1)^{n-i}\\binom ni f_i \\end{aligned} \\] 反演 对于一个数列 \\(f\\)，若有另一个数列 \\(g\\) 满足 \\[ g_n=\\sum_{i=0}^{n}a_if_i \\] 反演即是求出 \\[ f_n=\\sum_{i=0}^nb_ig_i \\] 证明 反演魔术：反演原理及二项式反演","categories":[{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"主定理","slug":"主定理","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T03:47:11.710Z","comments":true,"path":"2022/04/30/主定理/","permalink":"https://starcried.github.io/2022/04/30/%E4%B8%BB%E5%AE%9A%E7%90%86/","excerpt":"","text":"主定理（Master Theorem）通常是指在算法分析领域中的一个定理，特别是用于分析递归算法的时间复杂度。 时间复杂度相关定义 在计算机科学中，算法的时间复杂度（time complexity）是一个函数，它定性描述该算法的运行时间。其原理在于，将计算机的每种基本运算（如加减乘除）所需的时间视为常数，然后考察一个算法调用了多大量级的基本运算。时间复杂度常用大 \\(O\\) 符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 \\(n\\) 的输入，它至多需要 \\(5n^3 + 3n\\) 的时间运行完毕，那么它的渐近时间复杂度是 \\(O(n^3)\\)。 为了计算时间复杂度，我们通常会估计算法的操作单元数量，每个单元执行的时间都是相同的。因此，总运行时间和算法的操作单元数量最多相差一个常量系数。 相同大小的不同输入值仍可能造成算法的执行时间不同，因此我们通常使用算法的最坏情况复杂度（时间复杂度上界），记为 \\(T(n)\\) ，定义为任何大小的输入 \\(n\\) 所需的最大执行时间。另一种较少使用的方法是平均情况复杂度，通常有特别指定才会使用（如用于随机算法）。 对 Bachmann–Landau 符号描述如下： \\(f(n)=O(g(n))\\) 表示 \\(g\\) 是 \\(f\\) 的上界； \\(f(n)=\\Omega(g(n))\\) 表示 \\(g\\) 是 \\(f\\) 的下界； \\(f(n)=\\Theta(g(n))\\) 表示 \\(g\\) 是 \\(f\\) 的上界和下界。 主定理 在算法中，假设有递归关系式： \\[ T(n)=aT\\left(\\frac nb\\right)+f(n),\\ a\\geq 1,b&gt;1 \\] 其中，\\(n\\) 为问题规模，\\(a\\) 为子问题数量，\\(\\frac nb\\) 为每个子问题的规模（假设每个子问题规模基本一致），\\(f(n)\\) 为递归以外的计算。 情况1： 若 \\(\\exists \\epsilon &gt;0\\) ，有 \\(f(n)=O(n^{\\log_ba-\\epsilon})\\) ，则 \\(T(n)=\\Theta(n^{\\log_ba})\\) 情况2： 若 $ $，有 \\(f(n)=\\Theta(n^{\\log_ba}\\log^\\epsilon n)\\) ，则 \\(T(n)=\\Theta(n^{\\log_ba}\\log^{\\epsilon+1}n)\\) 情况3： 若 \\(\\exists \\epsilon &gt;0,c&lt;1\\) ，有 \\(f(n)=\\Omega(n^{\\log_ba+\\epsilon}),af\\left(\\frac nb\\right)\\leq cf(n)\\) ，则 \\(T(n)=\\Theta(f(n))\\) 证明 设总复杂度为 \\(T(n)\\)，有 \\[ T(n)=\\sum_{i=0}^{\\log_bn}a^i f\\left(\\frac n{b^i}\\right) \\] 将上述三种情况分别代入得 \\(T(n)\\) 得 情况1： \\[ \\begin{aligned} T(n)&amp;=O(\\sum_{i=0}^{\\log_bn}a^i\\left(\\frac n{b^i}\\right)^{\\log_ba-\\epsilon})\\\\ &amp;=O(n^{\\log_ba-\\epsilon}\\sum_{i=0}^{\\log_bn}\\left(\\frac a{b^{\\log_ba=\\epsilon}}\\right)^i)\\\\ &amp;=O(n^{\\log_ba-\\epsilon}\\sum_{i=0}^{\\log_bn}b^{\\epsilon j})\\\\ &amp;=O(n^{\\log_ba-\\epsilon}\\left(\\frac{n^\\epsilon-1}{b^\\epsilon-1}\\right))\\\\ &amp;=O(n^{\\log_ba}) \\end{aligned} \\] 情况2： \\[ \\begin{aligned} T(n) &amp; =\\Theta\\left(\\sum_{i=0}^{\\log_b n} a^i\\left(\\frac{n}{b^i}\\right)^{\\log _b a} \\log ^k\\left(\\frac{n}{b^i}\\right)\\right) \\\\ &amp; =\\Theta\\left(\\sum_{i=0}^{\\log_b n} a^i\\left(\\frac{n^{\\log _b a}}{b^{i^{\\log _b a}}}\\right)\\left(\\log n-\\log b^i\\right)^k\\right) \\\\ &amp; =\\Theta\\left(n^{\\log _b a} \\sum_{i=0}^{\\log_b n}\\left(\\frac{a}{b^{\\log _b a}}\\right)^i\\left(\\log ^k n-\\log ^k b^i\\right)\\right) \\\\ &amp; =\\Theta\\left(n^{\\log _b a} \\sum_{i=0}^{\\log_b n} \\log ^k n-\\log ^k b^i\\right) \\\\ &amp; =\\Theta\\left(n^{\\log _b a}\\left(\\log _b n \\cdot \\log ^k n-\\sum_{i=0}^{\\log_b n} \\log ^k b^i\\right)\\right) \\\\ &amp; =\\Theta\\left(\\log _b n \\cdot \\log ^k n \\cdot n^{\\log _b a}-n^{\\log _b a} \\sum_{i=0}^{\\log_b n} \\log ^k b^i\\right)\\\\ &amp; =\\Theta\\left(n^{\\log _b a}\\log ^{k+1} n\\right) \\end{aligned}\\\\ \\] 情况3： \\[ \\begin{aligned} &amp;af(\\frac nb)\\leq cf(n)\\\\ &amp;\\Rightarrow a^if(\\frac nb)\\leq c^if(n)\\\\ &amp;\\Rightarrow T(n)\\leq \\sum_{i=0}^{\\log_b n}c^if(n)\\\\ &amp;\\Rightarrow T(n)\\leq f(n)\\sum_{i=0}^\\infty c^i\\\\ &amp;\\Rightarrow T(n)\\leq \\left(\\frac 1{1-c}\\right)f(n)\\\\ &amp;\\Rightarrow T(n)=O(f(n)) \\end{aligned} \\] 又由于 \\(f(n)=\\Omega(n^{\\log_ba+\\epsilon})\\)，\\(T(n)=\\Omega(f(n))\\)，因此 \\[T(n)=\\Theta(f(n))\\] 综上，定理得证。 应用 一般的递归算法都可以用主定理分析时间复杂度。如大多数分治算法等。下面给出一个具体的问题作为实例。 最小圆覆盖问题 ：给定平面上的 \\(n\\) 个点，求出一个最小的一圆包围所有的点。 对于一个答案，一定有至少两个点在圆上。若不然，则圆可以继续缩小。因此我们只需要找到两个点（作为直径）或三个点即可确定一个最小圆覆盖。 我们用到随机增量法，即将给出的点以随机的顺序进行遍历。\\(\\{p_i\\}\\) 为加入的点集。设前 \\(i-1\\) 个点确定的最小覆盖圆为 \\(C\\)，此时加入 \\(p_i\\)： 若 \\(p_i\\) 在 \\(C\\) 内，则最小覆盖圆不变。 若 \\(p_i\\) 在 \\(C\\) 外，则其一定在新确定的最小覆盖圆上。此时遍历前 \\(i-1\\) 个点。设当前遍历到 \\(p_j\\)，则将 \\(p_i,p_j\\) 确定的圆设为当前最小覆盖圆，并遍历前 \\(j-1\\) 个点，若有点 \\(p_k\\) 在圆外，则将 \\(p_i,p_j,p_k\\) 确定的圆设为当前最小覆盖圆。 可以证明，这样一定能获得一个最小圆覆盖。 设三个循环的复杂度分别为 \\(T_1(n),T_2(n),T_3(n)\\)。现在考虑第一层循环，即加入一个点的循环。由于最多只有三个点在最小覆盖圆上，且我们的点是随机加入的，理论上每个点其之前点确定的最小覆盖圆上的概率是相同的，因此点 \\(p_i\\) 在加入时在当前圆外并调用下层循环的概率是 \\(\\frac 3i\\)。第二层调用类似。因此计算时间复杂度为 \\[ \\begin{aligned} &amp;T_1(n)=\\sum_{i=1}^n\\frac 3iT_2(i)+O(n)\\\\ &amp;T_2(n)=\\sum_{i=1}^n\\frac 3iT_3(i)+O(n)\\\\ &amp;T_3(n)=O(n) \\end{aligned} \\] 其中两点及三点确定一个圆可由公式推出，计算量固定可视为常数。 这里每一层对上一层实际上是有 \\(n\\) 个规模为 \\(1\\) 的子问题。由主定理得，最终算法的时间复杂度为 \\(T_1(n)=O(n)\\)。 PS:tex 写多了感觉不会写 markdown 了……","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"}]},{"title":"分层图","slug":"分层图","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.550Z","comments":true,"path":"2022/04/30/分层图/","permalink":"https://starcried.github.io/2022/04/30/%E5%88%86%E5%B1%82%E5%9B%BE/","excerpt":"","text":"前言 前几天考试了发现这个东西完全不会欸……学了又忘真是讨厌至极 QAQ 所以又在网上找着看了看写一篇博客备忘。 学习笔记真的很有用！ 分层图 这个很容易理解，来源就是在一些最短路的问题上题目又加了比如说主角可以用传送宝石进行折跃之类的问题（针对），即可以选择k条边把这些边的边权变为零。 怎么样解决呢？可以在原图的基础上多复制k个相同的图，并用k条边把图之间的边用0边权边相连。就是： 于是就有人说了，复制一个图不是需要很多的空间吗，直接爆掉了怎么办(╯‵□′)╯︵┻━┻ （是的有这种可能所以图k不能太大） 其实因为都是复制的好像不需要很多空间，因为图基本上都是一样的。所以只需要用二维数组 dis 记录就行了~（所以可以理解为把二维的图变成了三维，然后有 \\(k\\) 个 \\(0\\) 边权的虫洞可以折跃（雾）） 只需要走一次就行。这里我用 dijkstrua~ 例题 题目我是从这里搬的。代码是我的。但是我没有数据所以有可能是错的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;utility&gt;#include&lt;functional&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=1e4,maxm=5e4,maxk=10,INF=~0U&gt;&gt;1;int n,m,k,start,end;struct edge&#123; int to,next,dis;&#125;e[4*maxm*(maxk+1)+maxk+1];int ecnt,head[maxn*(maxk+1)+1];void addedge(int from,int to,int dis)&#123; //这种赋值写法必须加强制类型转换，c11可以不用 e[++ecnt]=(edge)&#123;to,head[from],dis&#125;;head[from]=ecnt;&#125;void read(int &amp;x)&#123; bool flag = false; char c; do c=getchar();while(c!=&#x27;-&#x27; and (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;)); if(c==&#x27;-&#x27;)flag=true; else x+=c-&#x27;0&#x27;; c=getchar(); while(c&gt;=&#x27;0&#x27; and c&lt;=&#x27;9&#x27;)x*=10,x+=c-&#x27;0&#x27;,c=getchar();&#125;inline void readin()&#123; read(n);read(m);read(k);read(start);read(end); for(int i=1;i&lt;=m;i++) &#123; int a,b,w; read(a);read(b);read(w); //重点来了，开始建边权为零的边 for(int j=0;j&lt;=k;j++) &#123; addedge(a+n*j,b+n*j,w);addedge(b+n*j,a+n*j,w); //这两行是建图并复制图，共建造k+1个图 if(j!=k)//小心别建到虚无中去~ &#123; addedge(a+n*j,b+n*(j+1),0);addedge(b+n*j,a+n*(j+1),0); //这两行是在图之间建边权为0的边 &#125; &#125; &#125;&#125;//分层图的核心已经完成，下面是开心的dijkstrua时间 int dis[maxn*(maxk+1)];bool vis[maxn*(maxk+1)];typedef pair&lt;int,int&gt; pairr;void dijskra()&#123; priority_queue &lt;pairr,vector&lt;pairr &gt;,greater&lt;pairr &gt; &gt; q; q.push(make_pair(0,start)); memset(dis,0x3f3f3f3f,sizeof(dis)); dis[start]=0; while(!q.empty()) &#123; int u=q.top().second;q.pop(); if(!vis[u]) &#123; vis[u]=1; for(int i=head[u];i;i=e[i].next) &#123; int to=e[i].to; if(dis[u]+e[i].dis&lt;dis[to]) &#123; dis[to]=dis[u]+e[i].dis; q.push(make_pair(dis[to],to)); &#125; &#125; &#125; &#125;&#125;int main()&#123; readin(); dijskra(); cout&lt;&lt;dis[end]; return 0;&#125; P4568 [JLOI2011]飞行路线 如果掌握了方法的话这个题和上一道基本上是一模一样的，只需要把板子粘下来就行了。不过我们可以从上一道题发现建的边数太多了啊喂……所以我们这次用一下前面提到的二元数组记录。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;utility&gt;#include&lt;functional&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=1e4,maxm=5e4,maxk=10,INF=~0U&gt;&gt;1;int n,m,k,start,end;struct edge&#123; int to,next,dis;&#125;e[4*maxm*(maxk+1)+maxk+1];int ecnt,head[maxn*(maxk+1)+1];void addedge(int from,int to,int dis)&#123; e[++ecnt]=(edge)&#123;to,head[from],dis&#125;;head[from]=ecnt;&#125;void read(int &amp;x)&#123; bool flag = false; char c; do c=getchar();while(c!=&#x27;-&#x27; and (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;)); if(c==&#x27;-&#x27;)flag=true; else x=c-&#x27;0&#x27;; c=getchar(); while(c&gt;=&#x27;0&#x27; and c&lt;=&#x27;9&#x27;)x*=10,x+=c-&#x27;0&#x27;,c=getchar();&#125;int read2()&#123; int x; char c=getchar(); while(c&lt;&#x27;0&#x27; or c&gt;&#x27;9&#x27;)c=getchar(); x=c-&#x27;0&#x27;;c=getchar(); while(c&gt;=&#x27;0&#x27; and c&lt;=&#x27;9&#x27;) x*=10,x+=c-&#x27;0&#x27;,c=getchar(); return x;&#125;void readin()&#123;// read(n);read(m);read(k);read(start);read(end); n=read2(),m=read2(),k=read2(),start=read2(),end=read2(); for(int i=0;i&lt;m;i++) &#123; int a,b,w;// read(a);read(b);read(w); a=read2(),b=read2(),w=read2(); //重点来了，开始建边权为零的边 for(int j=0;j&lt;=k;j++) &#123; addedge(a+n*j,b+n*j,w);addedge(b+n*j,a+n*j,w); //这两行是建图并复制图，共建造k+1个图 if(j!=k)//小心别建到虚无中去~ &#123; addedge(a+n*j,b+n*(j+1),0);addedge(b+n*j,a+n*(j+1),0); //这两行是在图之间建边权为0的边 &#125; &#125; &#125;&#125;//分层图的核心已经完成，下面是开心的dijskrua时间 int dis[maxn*(maxk+1)];bool vis[maxn*(maxk+1)];typedef pair&lt;int,int&gt; pairr;void dijkstra()&#123; priority_queue &lt;pairr,vector&lt;pairr &gt;,greater&lt;pairr &gt; &gt; q; q.push(make_pair(0,start)); memset(dis,0x3f3f3f3f,sizeof(dis)); dis[start]=0; while(!q.empty()) &#123; int u=q.top().second;q.pop(); if(!vis[u]) &#123; vis[u]=1; for(int i=head[u];i;i=e[i].next) &#123; int to=e[i].to; if(dis[u]+e[i].dis&lt;dis[to]) &#123; dis[to]=dis[u]+e[i].dis; q.push(make_pair(dis[to],to)); &#125; &#125; &#125; &#125;&#125;int main()&#123; readin(); dijkstra(); for(int i=1;i&lt;=k;++i) &#123; addedge(end+(i-1)*n,end+i*n,0); &#125; cout&lt;&lt;dis[end+k*n]; return 0;&#125; 飞行路线1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778 1 #include&lt;iostream&gt; 2 #include&lt;cstdio&gt; 3 #include&lt;utility&gt; 4 #include&lt;queue&gt; 5 #include&lt;functional&gt; 6 #include&lt;vector&gt; 7 #include&lt;algorithm&gt; 8 #include&lt;cstring&gt; 9 using namespace std;10 const int maxn=1e4,maxm=5*1e4,maxk=10;11 typedef pair&lt;int,int&gt; pairr;12 struct edge&#123;13 int to,nxt,dis;14 &#125;e[maxm*4];15 int n,m,k,start,end,d[maxn][maxk+1];16 bool vis[maxn][maxk+1];17 inline int read()18 &#123;19 int x=0;char c=getchar();20 while(!isdigit(c))c=getchar();21 while(isdigit(c))x=x*10+c-&#x27;0&#x27;,c=getchar();22 return x;23 &#125;24 int ecnt,head[maxn];25 inline void addedge(int from,int to,int dis)26 &#123;27 e[++ecnt]=(edge)&#123;to,head[from],dis&#125;,head[from]=ecnt;28 &#125;29 30 void input()31 &#123;32 n=read(),m=read(),k=read(),start=read(),end=read();33 for(int i=0;i&lt;m;i++)34 &#123;35 int from=read(),to=read(),dis=read();36 addedge(from,to ,dis);addedge(to,from,dis);37 &#125;38 &#125;39 40 void dijkstra()41 &#123;42 priority_queue &lt;pairr,vector&lt;pairr&gt;,greater&lt;pairr &gt; &gt; q;43 memset(d,0x3f3f3f3f,sizeof(d));44 d[start][0]=0;45 q.push(make_pair(0,start));46 while(!q.empty())47 &#123;48 int v=q.top().second;q.pop();49 int kk=v/n; //kk标记当前已用的k次数 50 v%=n; //v变为图中点的位置 51 for(register int i=head[v];i;i=e[i].nxt)52 &#123;53 int u=e[i].to,w=e[i].dis;54 if(d[v][kk]+w&lt;d[u][kk]) 55 &#123;56 d[u][kk]=d[v][kk]+e[i].dis;57 q.push(make_pair(d[u][kk],u+(kk)*n));58 &#125;59 if(kk==k)continue;//用完了就算了QAQ 60 if(d[u][kk+1]&gt;d[v][kk])//可以用而且不穿越解非最优就传送 61 &#123;62 d[u][kk+1]=d[v][kk];63 q.push(make_pair(d[u][kk+1],u+(kk+1)*n));//这里编号乘一下以记录层数（因为没有结构体就酱紫了） 64 &#125;65 &#125;66 &#125;67 &#125;68 int main()69 &#123;70 input();71 dijkstra();72 // cout&lt;&lt;d[end][k];//输出全部用过达到的距离 73 //这个输出被最后一组数据hack了，好像是不用用完k个的。所以我们找个min74 int ans=0x3f3f3f3f; 75 for(int i=0;i&lt;=k;i++)ans=min(ans,d[end][i]);76 printf(&quot;%d\\n&quot;,ans);77 return 0;78 &#125; 笔者用的是pair记录，好像用结构体能更清楚一些并记录层数，其实没什么区别的。大家随意（干杯）","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"分数规划","slug":"分数规划","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.551Z","comments":true,"path":"2022/04/30/分数规划/","permalink":"https://starcried.github.io/2022/04/30/%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/","excerpt":"","text":"问题描述 有 \\(n\\) 个物品，每种物品两个权值 \\(a_i\\)，\\(b_i\\)，求一组 \\(w_i\\in\\{0,1\\}\\)，使得 \\[ \\frac{\\sum_{i=1}^n w_i\\cdot a_i}{\\sum_{i=1}^n w_i\\cdot b_i} \\] 最大（或最小）。 有可能包含其他限制。 二分法 显然答案是单调的。对一个答案 \\(mid\\)，有 \\[ \\begin{aligned} &amp;\\frac{\\sum_{i=1}^n w_i\\cdot a_i}{\\sum_{i=1}^n w_i\\cdot b_i}&gt;mid\\\\ \\Leftrightarrow&amp;\\sum_{i=1}^n w_i\\cdot a_i-mid\\sum_{i=1}^n w_i\\cdot b_i&gt;0\\\\ \\Leftrightarrow&amp;\\sum_{i=1}^n w_i\\cdot (a_i-mid \\cdot b_i)&gt;0\\\\ \\end{aligned} \\] 因此可以对该权值 \\(a_i-mid \\cdot b_i\\) 进行贪心对答案进行检查。顺便满足题目要求。 例题 POJ2976 123456789101112131415161718192021222324252627282930313233343536//01分数规划 #include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;int n,k;int a[1010],b[1010];double d[1010];const double eps=1e-7;inline bool ok(double x)&#123; for(int i=1;i&lt;=n;i++) d[i]=a[i]-x*b[i]; sort(d+1,d+1+n); double ans=0; for(int i=n;i&gt;=k+1;i--)ans+=d[i]; return ans&gt;=0;&#125;int main()&#123;while(scanf(&quot;%d%d&quot;,&amp;n,&amp;k) and n|k)&#123;for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,a+i);for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,b+i);double l=0,r=1;while(r-l&gt;eps)&#123;double mid=(l+r)/2;if(ok(mid))l=mid;else r=mid;&#125;printf(&quot;%.0f\\n&quot;,l*100);&#125;return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"二分法","slug":"二分法","permalink":"https://starcried.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"}]},{"title":"动态逆序对专练","slug":"动态逆序对专练","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.552Z","comments":true,"path":"2022/04/30/动态逆序对专练/","permalink":"https://starcried.github.io/2022/04/30/%E5%8A%A8%E6%80%81%E9%80%86%E5%BA%8F%E5%AF%B9%E4%B8%93%E7%BB%83/","excerpt":"","text":"就是三倍经验 题意 维护一个序列，每次修改后求出当前序列逆序对个数。 思路 题目让我们求出 \\[ \\sum_{i=1}^n\\sum_{j=i+1}^n[a_i&gt;a_j] \\] 也就是让我们求出满足 \\[ pos_i&lt;pos_j\\&amp;\\&amp;a_i&gt;a_j \\] 的点对数量。 对于不修改的情况，这显然是一个三维偏序问题，用树状数组或归并处理都可以。 对于修改的情况，我们可以用CDQ分治离线解决，或者使用树套树在线处理。 我这么懒当然是用树套树啦~ 树状数组套值域线段树 思想 树状数组维护序列，值域线段树维护值域。 优点是可以写成非递归式查询，常数相对较小。 缺点是即使是动态开点空间消耗仍然很大。 实现 具体实现是每个树状数组节点开一棵线段树。修改时修改所有树状数组上包括的线段树，查询时类似。 12345678void update(int &amp;ro,int l,int r,int x,int k)&#123;//l和r是当前值域区间，x为位置 if(!ro) ro=++tot; val[ro]+=k; if(l==r)return; int mid=l+r&gt;&gt;1; if(x&lt;=mid)update(ls[ro],l,mid,x,k); else update(rs[ro],mid+1,r,x,k);&#125; 墙裂安利非递归式线段树查询 12345678910111213141516171819202122232425262728inline long long query(int l,int r,int x,int type)&#123; int cnta=0,cntb=0; long long ans=0; for(int i=l-1;i;i-=i&amp;-i) qa[++cnta]=rt[i];//树状数组查询方法：差分 for(int i=r;i;i-=i&amp;-i) qb[++cntb]=rt[i];//先将所有要处理的树状数组上的线段树全部记录，然后一起查询 l=1,r=n; while(l&lt;r)&#123; int mid=l+r&gt;&gt;1; if(x&gt;mid)&#123; if(type)&#123;//type表示查询的类型，按照正常线段树查询的思路处理即可。这里type=1表示查左边 for(int i=1;i&lt;=cnta;i++) ans-=val[ls[qa[i]]]; for(int i=1;i&lt;=cntb;i++) ans+=val[ls[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++) qa[i]=rs[qa[i]]; for(int i=1;i&lt;=cntb;i++) qb[i]=rs[qb[i]]; l=mid+1; &#125;else&#123; if(!type)&#123; for(int i=1;i&lt;=cnta;i++) ans-=val[rs[qa[i]]]; for(int i=1;i&lt;=cntb;i++) ans+=val[rs[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++) qa[i]=ls[qa[i]]; for(int i=1;i&lt;=cntb;i++) qb[i]=ls[qb[i]]; r=mid; &#125; &#125; return ans;&#125; 例题 P3157 [CQOI2011]动态逆序对 给你一个排列，每次删除一个位置上的数，求每次操作后的逆序对数。 思路 插入原序列之后得到原序列答案，每次删除一个数 \\(x\\) 查询 \\(pos_i&lt;x\\) 、\\(a_i&gt;a_x\\) 和 \\(pos_i&gt;x\\) 、\\(a_i&lt;a_x\\) 的答案并用之前的答案减去，然后删除它的影响。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10,maxm=3e7+10; int n,m,a[maxn],ls[maxm],rs[maxm],tot,rt[maxn],val[maxm]; void update(int &amp;ro,int l,int r,int x,int k)&#123; if(!ro) ro=++tot; val[ro]+=k; if(l==r)return; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid) update(ls[ro],l,mid,x,k); else update(rs[ro],mid+1,r,x,k); &#125; int qa[maxn],qb[maxn]; long long ans; inline long long query(int l,int r,int x,int type)&#123; int cnta=0,cntb=0; long long ans=0; for(int i=l-1;i;i-=i&amp;-i) qa[++cnta]=rt[i]; for(int i=r;i;i-=i&amp;-i) qb[++cntb]=rt[i]; l=1,r=n; while(l&lt;r)&#123; int mid=(l+r)&gt;&gt;1; if(x&gt;mid)&#123; if(type)&#123; for(int i=1;i&lt;=cnta;i++)ans-=val[ls[qa[i]]]; for(int i=1;i&lt;=cntb;i++)ans+=val[ls[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++)qa[i]=rs[qa[i]]; for(int i=1;i&lt;=cntb;i++)qb[i]=rs[qb[i]]; l=mid+1; &#125;else&#123; if(!type)&#123; for(int i=1;i&lt;=cnta;i++)ans-=val[rs[qa[i]]]; for(int i=1;i&lt;=cntb;i++)ans+=val[rs[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++)qa[i]=ls[qa[i]]; for(int i=1;i&lt;=cntb;i++)qb[i]=ls[qb[i]]; r=mid; &#125; &#125; return ans; &#125; int pos[maxn]; inline void work()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) &#123; ans+=query(1,i-1,a[i]=read(),0);pos[a[i]]=i; for(int x=i;x&lt;=n;x+=x&amp;-x) update(rt[x],1,n,a[i],1); &#125; printf(&quot;%lld\\n&quot;,ans); while(--m)&#123; int x=read(); ans-=query(1,pos[x]-1,x,0)+query(pos[x]+1,n,x,1); printf(&quot;%lld\\n&quot;,ans); for(int j=pos[x];j&lt;=n;j+=j&amp;-j) update(rt[j],1,n,x,-1); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; CF785E Anton and Permutation 给你一个原序列为递增排列的序列，每次交换两个位置上的数，求每次操作后的逆序对数。 思路 相对于上一题，并非删除而是交换两个位置上的数，实际上就是在原位置删除两个数然后在彼此的位置又加上这两个数。 这里我先减去影响然后更新再加上影响，最后单独讨论一下这两个数之间互换对答案的贡献。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e5+1,maxm=3e7+1; int n,Q,a[maxn],rt[maxn]; long long ans; int ls[maxm],rs[maxm],tot,val[maxm]; void update(int &amp;ro,int l,int r,int x,int k)&#123; if(!ro) ro=++tot; val[ro]+=k; if(l==r)return; int mid=l+r&gt;&gt;1; if(x&lt;=mid)update(ls[ro],l,mid,x,k); else update(rs[ro],mid+1,r,x,k); &#125; int qa[maxn],qb[maxn]; inline long long query(int l,int r,int x,int type)&#123; int cnta=0,cntb=0; long long ans=0; for(int i=l-1;i;i-=i&amp;-i) qa[++cnta]=rt[i]; for(int i=r;i;i-=i&amp;-i) qb[++cntb]=rt[i]; l=1,r=n; while(l&lt;r)&#123; int mid=l+r&gt;&gt;1; if(x&gt;mid)&#123; if(type)&#123; for(int i=1;i&lt;=cnta;i++) ans-=val[ls[qa[i]]]; for(int i=1;i&lt;=cntb;i++) ans+=val[ls[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++) qa[i]=rs[qa[i]]; for(int i=1;i&lt;=cntb;i++) qb[i]=rs[qb[i]]; l=mid+1; &#125;else&#123; if(!type)&#123; for(int i=1;i&lt;=cnta;i++) ans-=val[rs[qa[i]]]; for(int i=1;i&lt;=cntb;i++) ans+=val[rs[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++) qa[i]=ls[qa[i]]; for(int i=1;i&lt;=cntb;i++) qb[i]=ls[qb[i]]; r=mid; &#125; &#125; return ans; &#125; inline void work()&#123; n=read(),Q=read(); for(int i=1;i&lt;=n;i++)&#123; a[i]=i; for(int j=i;j&lt;=n;j+=j&amp;-j) update(rt[j],1,n,a[i],1); &#125; while(Q--)&#123; int x=read(),y=read(); if(x==y)&#123; printf(&quot;%lld\\n&quot;,ans);continue; &#125; if(x&gt;y)swap(x,y); ans=ans-query(1,x-1,a[x],0)-query(x+1,n,a[x],1)-query(1,y-1,a[y],0)-query(y+1,n,a[y],1); for(int i=x;i&lt;=n;i+=i&amp;-i) update(rt[i],1,n,a[x],-1),update(rt[i],1,n,a[y],1); for(int i=y;i&lt;=n;i+=i&amp;-i) update(rt[i],1,n,a[x],1),update(rt[i],1,n,a[y],-1); swap(a[x],a[y]); ans=ans+query(1,x-1,a[x],0)+query(x+1,n,a[x],1)+query(1,y-1,a[y],0)+query(y+1,n,a[y],1); ans+=(a[x]&lt;a[y]?1:-1); printf(&quot;%lld\\n&quot;,ans); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; P1975 [国家集训队]排队 给你一个序列，每次交换两个位置上的数，求每次操作后逆序对数。 思路 给上面的代码加个离散化XD 后面单独讨论两个数的贡献时有一点区别。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e4+1,maxm=3e6+1; int n,Q,a[maxn],cnt,b[maxn],rt[maxn]; long long ans; int ls[maxm],rs[maxm],tot,val[maxm]; void update(int &amp;ro,int l,int r,int x,int k)&#123; if(!ro) ro=++tot; val[ro]+=k; if(l==r)return; int mid=l+r&gt;&gt;1; if(x&lt;=mid)update(ls[ro],l,mid,x,k); else update(rs[ro],mid+1,r,x,k); &#125; int qa[maxn],qb[maxn]; inline long long query(int l,int r,int x,int type)&#123; int cnta=0,cntb=0; long long ans=0; for(int i=l-1;i;i-=i&amp;-i) qa[++cnta]=rt[i]; for(int i=r;i;i-=i&amp;-i) qb[++cntb]=rt[i]; l=1,r=n; while(l&lt;r)&#123; int mid=l+r&gt;&gt;1; if(x&gt;mid)&#123; if(type)&#123; for(int i=1;i&lt;=cnta;i++) ans-=val[ls[qa[i]]]; for(int i=1;i&lt;=cntb;i++) ans+=val[ls[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++) qa[i]=rs[qa[i]]; for(int i=1;i&lt;=cntb;i++) qb[i]=rs[qb[i]]; l=mid+1; &#125;else&#123; if(!type)&#123; for(int i=1;i&lt;=cnta;i++) ans-=val[rs[qa[i]]]; for(int i=1;i&lt;=cntb;i++) ans+=val[rs[qb[i]]]; &#125; for(int i=1;i&lt;=cnta;i++) qa[i]=ls[qa[i]]; for(int i=1;i&lt;=cntb;i++) qb[i]=ls[qb[i]]; r=mid; &#125; &#125; return ans; &#125; inline void work()&#123; n=read(); for(int i=1;i&lt;=n;i++) a[i]=b[i]=read(); sort(b+1,b+1+n); cnt=unique(b+1,b+1+n)-b-1; for(int i=1;i&lt;=n;i++) a[i]=lower_bound(b+1,b+1+cnt,a[i])-b; for(int i=1;i&lt;=n;i++)&#123; ans+=query(1,i-1,a[i],0); for(int j=i;j&lt;=n;j+=j&amp;-j) update(rt[j],1,n,a[i],1); &#125; printf(&quot;%lld\\n&quot;,ans); Q=read(); while(Q--)&#123; int x=read(),y=read(); if(x==y)&#123; printf(&quot;%lld\\n&quot;,ans);continue; &#125; if(x&gt;y)swap(x,y); ans=ans-query(1,x-1,a[x],0)-query(x+1,n,a[x],1)-query(1,y-1,a[y],0)-query(y+1,n,a[y],1); for(int i=x;i&lt;=n;i+=i&amp;-i) update(rt[i],1,n,a[x],-1),update(rt[i],1,n,a[y],1); for(int i=y;i&lt;=n;i+=i&amp;-i) update(rt[i],1,n,a[x],1),update(rt[i],1,n,a[y],-1); swap(a[x],a[y]); ans=ans+query(1,x-1,a[x],0)+query(x+1,n,a[x],1)+query(1,y-1,a[y],0)+query(y+1,n,a[y],1); if(a[x]&lt;a[y]) ans+=1; else if(a[x]&gt;a[y]) ans-=1; printf(&quot;%lld\\n&quot;,ans); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 对于后两个题更简单并且更优秀的分块解法，我不会因为没有普适性所以我们不学，嗯嗯。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"逆序对","slug":"逆序对","permalink":"https://starcried.github.io/tags/%E9%80%86%E5%BA%8F%E5%AF%B9/"}]},{"title":"匈牙利算法（二分图最大匹配）","slug":"匈牙利算法（二分图最大匹配）","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T03:33:23.297Z","comments":true,"path":"2022/04/30/匈牙利算法（二分图最大匹配）/","permalink":"https://starcried.github.io/2022/04/30/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%EF%BC%89/","excerpt":"","text":"无用的文字 又是一篇笔记，因为不做题的话太容易忘了啊啊啊QAQ看到一个题目知道用什么算法做但就是想不出来的感觉太难受了…… 二分图最大匹配 二分图 二分图是指可以被分为两个不相交点子集的图，其中相同点集内无连边。 匈牙利算法 匈牙利算法是用来寻找最大匹配的一个算法。 交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边……形成的路径叫交替路。 增广路：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。 ```cpp //匈牙利算法代码实现； //二分图最大匹配； //即左边的点和右边的点连线最多； //匈牙利算法主要用了增广路径比原路径多; /因为原路径相当于从左边一点向右匹配， 每次匹配后只有两点两两相配，增广路匹配数+1； 深搜即可 / #include #include #include #include #include&lt;ctype.h&gt; using namespace std; int n,m; const int maxn=233; int a[maxn],mapp[maxn][maxn]; bool vis[maxn]; inline int read() { int x=0,w=1;char c=getchar(); while(!isdigit(c)){ if(c=='-')w=-1; c=getchar(); } while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return x*w; } bool match(int x)//x为左侧点标号 { for(int i=1;i&lt;=m;i++) if(mapp[x][i] and !vis[i]) { vis[i]=1; if(!a[i]||match(a[i])) { a[i]=x; return true; } } return false; } inline int hungary() { int ans=0; memset(a,0,sizeof a); for(int i=1;i&lt;=n;i++) { memset(vis,0,sizeof vis); if(match(i))ans++; } return ans; } int main() { n=read(),m=read(); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++)mapp[i][j]=read(); printf(\"%d\",hungary()); return 0; }","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"基数排序","slug":"基数排序","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.555Z","comments":true,"path":"2022/04/30/基数排序/","permalink":"https://starcried.github.io/2022/04/30/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/","excerpt":"","text":"算法描述 基数排序（又叫做桶排序）是一种非比较排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别进行排序。 基数排序的步骤如下： 找出最大数，确定位数。 确定每个位数的范围，并统计每个数字在每个位数上的数量。 位数从低到高按每个位数从小到大进行排序。 输出排序后的数组。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;ctype.h&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=1e5+10;int a[maxn],buck[maxn];inline int get_max(int a[],int n)&#123; int maxx=0; for(int i=0;i&lt;n;i++) maxx=max(maxx,a[i]); return maxx;&#125;inline void count_sort(int a[],int n,int exp)&#123; int output[n],buck[10]=&#123;0&#125;; for(int i=0;i&lt;n;i++) buck[(a[i]/exp)%10]++; for(int i=1;i&lt;10;i++) buck[i]+=buck[i-1]; for(int i=n-1;i&gt;=0;i--) output[--buck[(a[i]/exp)%10]]=a[i]; for(int i=0;i&lt;n;i++) a[i]=output[i];&#125;inline void radix_sort(int a[],int n)&#123; int maxx=get_max(a,n); for(int i=1;(maxx/i)&gt;0;i*=10) count_sort(a,n,i);&#125;int main()&#123; int n=read(); for(int i=0;i&lt;n;i++) a[i]=read(); radix_sort(a,n); for(int i=0;i&lt;n;i++) if(i!=n)printf(&quot;%d &quot;,a[i]); else printf(&quot;%d\\n&quot;,a[i]); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"}]},{"title":"平面几何入门","slug":"平面几何入门","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.557Z","comments":true,"path":"2022/04/30/平面几何入门/","permalink":"https://starcried.github.io/2022/04/30/%E5%B9%B3%E9%9D%A2%E5%87%A0%E4%BD%95%E5%85%A5%E9%97%A8/","excerpt":"","text":"为了给同学讲课，做了一个平面几何入门的课件，保存在网上。 平面几何入门 奇怪的是明明是平面几何还写了一点三维的东西。应该叫计算几何的。","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"几何","slug":"几何","permalink":"https://starcried.github.io/tags/%E5%87%A0%E4%BD%95/"}]},{"title":"并查集及其优化","slug":"并查集及其优化","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.558Z","comments":true,"path":"2022/04/30/并查集及其优化/","permalink":"https://starcried.github.io/2022/04/30/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/","excerpt":"","text":"并查集 并查集是一种树型数据结构，用于处理一些动态集合的合并及查询问题。 并查集的基本操作有： 合并：将两个集合合并为一个集合。 查询：判断两个元素是否属于同一个集合。 并查集的应用场景有： 动态连通性：判断两个点是否连通。 最小生成树：计算最小生成树。 路径压缩：减少树的高度。 并查集优化 并查集有两种启发式优化。第一种是路径压缩，即将每个节点的父节点压缩到根节点，总时间复杂度为 \\(O(n\\alpha)\\)，其中 \\(\\alpha\\) 为一常数。但是会破坏树形结构。 另一种是按秩合并，即将两个集合合并时，选择秩较大的集合作为根节点，总时间复杂度为 \\(O(n\\log n)\\)。由于并其没有破坏树形结构，所以可以实现一些撤回操作。 路径压缩 路径压缩的基本思想是将每个节点的父节点压缩到根节点，这样可以减少树的高度，使得查询操作更快。 1234// 初始化 parent[i] = iint find(int x) &#123; return x == parent[x]? x : parent[x] = find(parent[x]);&#125; 按秩合并 我们从一道例题开始。 UVA11354 大意：求最小生成树的两个点间的最大路径。 带边权的并查集？多组数据？我们按秩合并。基本思想是使深度较小结点的树的根指向包含较多结点的树的根。 我们存边时，用结构体存边。但不用前向星。因为如果要 Kruskal 的话需要改动一下。本来我们连接最短的边时，如果两端的端点的父亲不一样的话直接连上就可以了。但是按秩排序不一样。他既要优化又要不破坏树形结构，我们就造一个秩rank，rank[i]表示的相当于子树大小或者深度的东西，每次查询就把小的连到大的上并直接把边权直接连到父亲结点上，那么就能保留原来的树形结构并做到优化。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;ctype.h&gt;#include &lt;cstring&gt;using namespace std;const int maxn = 50010;inline int read()&#123; int x = 0, w = 1; char c = getchar(); while (!isdigit(c)) &#123; if (c == &#x27;-&#x27;) w = -1; c = getchar(); &#125; while (isdigit(c)) x = (x &lt;&lt; 3) + (x &lt;&lt; 1) + (c ^ 48), c = getchar(); return x * w;&#125;int n, m, t;int fa[maxn], e[maxn], rank[maxn];struct data&#123; // 这是边 int x, y, z;&#125; a[maxn];inline bool cmp(data a, data b) &#123; return a.z &lt; b.z; &#125;inline int find(int x) &#123; return fa[x] == x ? x : find(fa[x]); &#125;inline void kruskal()&#123; int s = 0, f1, f2; for (int i = 1; i &lt;= n; i++) fa[i] = i, rank[i] = 1; for (int i = 1; i &lt;= m; i++) &#123; f1 = find(a[i].x); f2 = find(a[i].y); if (f1 != f2) &#123; if (rank[f1] &lt; rank[f2]) &#123; fa[f1] = f2; e[f1] = a[i].z; rank[f2] = max(rank[f2], rank[f1] + 1); &#125; // 高度大的做小的的根 else &#123; fa[f2] = f1; e[f2] = a[i].z; rank[f1] = max(rank[f1], rank[f2] + 1); &#125; // 相等或者相反就相反来 s++; &#125; if (s == n - 1) break; &#125;&#125;int c[maxn];int query(int x, int y)&#123; for (int i = 1; i &lt;= n; i++) c[i] = -1; int tmp = 0, ans = 0; while (1) &#123; c[x] = tmp; // c是从x开始向上边的最大值。 if (fa[x] == x) break; tmp = max(tmp, e[x]); // e代表向上连接的边权 x = fa[x]; // 向上爬 &#125; while (1) &#123; if (c[y] &gt;= 0) &#123; ans = max(ans, c[y]); break; &#125; // 找到LCA就break if (fa[y] == y) break; // 或者找到根 ans = max(ans, e[y]); y = fa[y]; &#125; // 因为一定会集中到LCA就直接用ans return ans;&#125;int main()&#123; while (~scanf(&quot;%d%d&quot;, &amp;n, &amp;m)) &#123; for (int i = 1; i &lt;= m; i++) &#123; a[i] = (data)&#123;read(), read(), read()&#125;; &#125; sort(a + 1, a + 1 + m, cmp); kruskal(); t = read(); for (int x, y, i = 1; i &lt;= t; i++) &#123; x = read(), y = read(); printf(&quot;%d\\n&quot;, query(x, y)); &#125; &#125; return 0;&#125; 按秩合并不仅仅能够处理最小生成树问题，也可以处理一些大规模数据的动态加边和查询问题，每次连边后可以记录两个秩的大小，非常的方便。","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"并查集","slug":"并查集","permalink":"https://starcried.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"归并排序","slug":"归并排序","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.559Z","comments":true,"path":"2022/04/30/归并排序/","permalink":"https://starcried.github.io/2022/04/30/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","excerpt":"","text":"算法描述 运用了分治的思想，将一个数组分成几乎相等的两份，分别将两段中第一个最小的数拿出来放在一个临时数组中，直到全部取完。因为是递归的，所以每一段的数列都是排序好的。 1234567891011121314void merge_sort(ll *A,ll *B,int x,int y)&#123; if(y-x&lt;=1)return; int mid=x+(y-x)/2; int p=x,q=mid,i=x; merge_sort(A,B,x,mid); merge_sort(A,B,mid,y); while(p&lt;mid or q&lt;y) &#123; if(q&gt;=y or (p&lt;mid and A[p]&lt;=A[q]))B[i++]=A[p++]; else B[i++]=A[q++],ans+=mid-p; &#125; for(int i=x;i&lt;y;i++)A[i]=B[i];&#125; 时间复杂度为 \\(O(n\\log n)\\)。 例题 可以利用分治的过程处理一些问题，比如求数组的逆序对。 我们发现每次递归时左边的还没有入列的数都是大于右边的数的，此时统计左侧比右侧该数大的数的个数，即可统计到所有的逆序对。 洛谷P1908 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;typedef long long ll;template &lt;typename T&gt;inline T read()&#123; int w=0;T x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=5e5+10;int n;ll A[maxn],B[maxn],ans;void merge_sort(ll *A,ll *B,int x,int y)&#123; if(y-x&lt;=1)return; int mid=x+(y-x)/2; int p=x,q=mid,i=x; merge_sort(A,B,x,mid); merge_sort(A,B,mid,y); while(p&lt;mid or q&lt;y) &#123; if(q&gt;=y or (p&lt;mid and A[p]&lt;=A[q]))B[i++]=A[p++]; else B[i++]=A[q++],ans+=mid-p; &#125; for(int i=x;i&lt;y;i++)A[i]=B[i];&#125;int main()&#123; n=read&lt;int&gt;(); for(int i=1;i&lt;=n;i++)A[i]=read&lt;ll&gt;(); merge_sort(A,B,1,n+1); printf(&quot;%lld\\n&quot;,ans); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"分治","slug":"分治","permalink":"https://starcried.github.io/tags/%E5%88%86%E6%B2%BB/"}]},{"title":"快速幂","slug":"快速幂","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.560Z","comments":true,"path":"2022/04/30/快速幂/","permalink":"https://starcried.github.io/2022/04/30/%E5%BF%AB%E9%80%9F%E5%B9%82/","excerpt":"","text":"快速幂 快速幂是在进行底数相同的乘法运算而幂数又极大的情况下使用的一种算法。 将幂次做二进制拆分，然后从低位到高位维护幂次积，同时若该位为 1 乘入答案。 模板 P1226 【模板】快速幂 12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;cstdio&gt;#define int unsigned long longusing namespace std;int a,b,q;int qsm(int a,int b,int q)//快速幂&#123; int ans=1; while(b) &#123; if(b&amp;1)ans=(ans*a)%q; a=(a*a)%q; b&gt;&gt;=1; //二进制运算，相当于b/=2; &#125; return ans%q;&#125;signed main()&#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;q; cout&lt;&lt;a&lt;&lt;&quot;^&quot;&lt;&lt;b&lt;&lt;&quot; mod &quot;&lt;&lt;q&lt;&lt;&quot;=&quot;&lt;&lt;qsm(a,b,q); return 0;&#125; 矩阵快速幂 矩阵快速幂是指用矩阵乘法来求幂次方，矩阵乘法的结合律和交换律保证了运算的顺序。可以套用以上的快速幂。 经典例题是求斐波那契数列第 \\(n\\) 项（mod q）的值。和快速幂一样，这类题指数非常的大。 模板 P3390 【模板】矩阵快速幂 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline long long read()&#123; long long x=0;bool w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=105,mod=1e9+7; struct mat&#123; int n,a[maxn][maxn]; mat()&#123;&#125; mat(const int &amp;x)&#123;n=x;memset(a,0,sizeof a);&#125; inline void set()&#123;for(int i=1;i&lt;=n;i++) a[i][i]=1;&#125; inline int* operator [] (const int &amp;x) &#123;return a[x];&#125; inline const int* operator [] (const int &amp;x) const &#123;return a[x];&#125; inline mat operator * (const mat &amp;b) const&#123; mat ans(n); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) for(int k=1;k&lt;=n;k++) ans[i][j]=(ans[i][j]+1ll*a[i][k]*b[k][j]%mod)%mod; return ans; &#125; &#125;now; inline mat fpow(mat a,long long b)&#123; mat ans(a.n); ans.set(); for(;b;b&gt;&gt;=1,a=a*a)if(b&amp;1)ans=ans*a; return ans; &#125; int n; long long k; inline void work()&#123; n=now.n=read();k=read(); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) now[i][j]=read(); now=fpow(now,k); for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=n;j++) printf(&quot;%d &quot;,now[i][j]); puts(&quot;&quot;); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 至于矩阵乘法还能干什么，应该应用也挺多的，但是我还没那个水平…… 大家一起进步吧XD UPD：NOI2020出来了，发现D1T1用到了矩阵快速幂，于是来更新我写的水的一p的第一篇博客。 也就是更新一个例子：矩阵快速幂优化DP 我们先来个简单版的DP：给你一个图（的邻接矩阵），边权全为1，求给定时间从s到t的路径方案数。 记f[i]表示i时状态，f[i]=f[i-1]*g。 所以我们要求x直接矩阵快速幂乘g的幂次就行了。 2022.9.29 UPD：高中时不求甚解写的东西……也不是我不想了解，是竞赛要求我在理解之前就使用矩阵。突然感觉竞赛和文化课其实没有什么本质区别。 没时间大改，把错误的地方尽量删了。","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"}]},{"title":"扩展欧拉定理","slug":"扩展欧拉定理","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T06:35:22.764Z","comments":true,"path":"2022/04/30/扩展欧拉定理/","permalink":"https://starcried.github.io/2022/04/30/%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/","excerpt":"","text":"欧拉定理 欧拉定理：若 \\(a\\) 与 \\(m\\) 互质，则有 \\[ a^{\\varphi(m)}\\equiv1(\\mod m) \\] 我们可以发现费马小定理其实就是欧拉定理的特殊情况。 证明的话，构造一个与 \\(m\\) 互质的数列操作，利用剩余系证明 扩展欧拉定理 扩展欧拉定理为 \\[ a^b\\equiv \\begin{cases}a^{b\\mod\\varphi(p)},&amp;\\gcd(a,p)=1\\\\ a^b,&amp;\\gcd(a,p)\\ne1,b&lt;\\varphi(p)\\\\ a^{b\\mod\\varphi(p)+\\varphi(p)},&amp;\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end {cases}\\pmod p \\] 证明请上面传送门 在程序上的体现就是加一个判断：如果 \\(b\\ge\\varphi(p)\\)，我们把 \\(b\\) 的模数加上一个 \\(\\varphi(p)\\) 即可。 于是我们就能做掉P5091 输入幂数时取模即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; int n,m,b,phim; inline int fpow(int a,int b)&#123; int ans=1; for(;b;b&gt;&gt;=1,a=a*a%m)if(b&amp;1)ans=ans*a%m; return ans; &#125; inline void work()&#123; n=read(),m=read(); phim=m; int x=m; for(int i=2;i*i&lt;=x;i++)&#123; if(!(x%i))&#123; phim=phim-phim/i; while(!(x%i))x/=i; &#125; &#125; if(x!=1)phim=phim-phim/x; char c=getchar(); bool ok=0; while(!isdigit(c))c=getchar(); while(isdigit(c))&#123; b=b*10+(c^48);c=getchar(); if(b&gt;=phim)ok=1,b%=phim; &#125; if(!ok)printf(&quot;%lld\\n&quot;,fpow(n,b)); else printf(&quot;%lld\\n&quot;,fpow(n,b+phim)); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; CF906D 显然，对于对幂数取模的结果就是再次递归使用欧拉函数。递归求解即可。 先预处理出模数的多次取 phi 的结果然后递归。注意在快速幂的时候需要判断第二种情况。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10; int mod,n,w[maxn],phi[maxn],tot; inline int fpow(int a,int b,int mod)&#123; int ans=1; bool ok=0; for(;b;b&gt;&gt;=1,a=a*a)&#123; if(a&gt;=mod)ok=1,a%=mod; if(b&amp;1)ans=ans*a; if(ans&gt;=mod)ok=1; ans%=mod; &#125; return ans+ok*mod; &#125; int dfs(int l,int r,int dep)&#123; if(phi[dep]==1||w[l]==1) return 1; if(l==r) return w[l]&gt;=phi[dep]?w[l]%phi[dep]+phi[dep]:w[l]; return fpow(w[l],dfs(l+1,r,dep+1),phi[dep]); &#125; inline void work()&#123; n=read(),mod=phi[0]=read(); for(int i=1;i&lt;=n;i++)w[i]=read(); while(phi[tot]!=1)&#123; int x=phi[tot++];phi[tot]=phi[tot-1]; for(int i=2;i*i&lt;=x;i++)&#123; if(!(x%i))&#123; phi[tot]=phi[tot]-phi[tot]/i; while(!(x%i))x/=i; &#125; &#125; if(x&gt;1)phi[tot]=phi[tot]-phi[tot]/x; &#125; int q=read(); while(q--)&#123; int l=read(),r=read(); printf(&quot;%lld\\n&quot;,dfs(l,r,0)%mod); &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; P3934 区间修改，单点查询，加上一个树状数组就行。每次的模数不一样，所以需要预处理一下欧拉函数。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=5e5+10,maxp=2e7+10; int mod,n,m,phi[maxp],tot,prime[maxp/10],cnt,a[maxn]; inline int lowbit(int x)&#123;return x&amp;(-x);&#125; inline void update(int x,int y)&#123; for(;x&lt;=n;x+=lowbit(x))a[x]+=y; &#125; inline int query(int x)&#123; int ans=0; for(;x;x-=lowbit(x))ans+=a[x]; return ans; &#125; bool mark[maxp]; inline void pre(int n)&#123; phi[1]=1; for(int i=2;i&lt;=n;i++)&#123; if(!mark[i])prime[++cnt]=i,phi[i]=i-1; for(int j=1;j&lt;=cnt and i*prime[j]&lt;=n;j++)&#123; mark[i*prime[j]]=1; if(!(i%prime[j]))&#123; phi[i*prime[j]]=phi[i]*prime[j]; break; &#125; phi[i*prime[j]]=phi[i]*(prime[j]-1); &#125; &#125; &#125; inline int fpow(int a,int b,int mod)&#123; int ans=1; bool ok=0; for(;b;b&gt;&gt;=1,a=a*a)&#123; if(a&gt;=mod)ok=1,a%=mod; if(b&amp;1)ans=ans*a; if(ans&gt;=mod)ok=1; ans%=mod; &#125; return ans+ok*mod; &#125; int dfs(int l,int r,int mod)&#123; int w=query(l); if(mod==1||w==1) return 1; if(l==r) return w&gt;=mod?w%mod+mod:w; return fpow(w,dfs(l+1,r,phi[mod]),mod); &#125; inline void work()&#123; n=read(),m=read(); int pre=0,zp=0; for(int i=1;i&lt;=n;i++)zp=read(),update(i,zp-pre),pre=zp; while(m--)&#123; if(read()==1)&#123; int l=read(),r=read(),k=read(); update(l,k),update(r+1,-k); &#125;else&#123; int l=read(),r=read(),p=read(); printf(&quot;%lld\\n&quot;,dfs(l,r,p)%p); &#125; &#125; &#125;&#125;signed main()&#123; star::pre(20000000); star::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"扩展欧几里得(exgcd)-求解不定方程 求逆元","slug":"扩展欧几里得(exgcd)-求解不定方程 求逆元","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.560Z","comments":true,"path":"2022/04/30/扩展欧几里得(exgcd)-求解不定方程 求逆元/","permalink":"https://starcried.github.io/2022/04/30/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97(exgcd)-%E6%B1%82%E8%A7%A3%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B%20%E6%B1%82%E9%80%86%E5%85%83/","excerpt":"","text":"贝祖定理 如果 \\(a\\)、\\(b\\) 是整数，那么一定存在整数 \\(x\\)、\\(y\\) 使得 \\(ax+by=\\gcd(a,b)\\)。 换句话说，如果 \\(ax+by=m\\) 有解，那么 \\(m\\) 一定是 \\(\\gcd(a,b)\\) 的若干倍。（可以来判断一个这样的式子有没有解） 有一个直接的应用就是 如果 \\(ax+by=1\\) 有解，那么 \\(gcd(a,b)=1\\)。 然而这并不能告诉我们x,y解是多少。 扩展欧几里得（exgcd） 首先对 \\(a|b\\) 一定有一个解 \\(a\\times 1+b\\times 0=\\gcd(a,b)\\)。但是我们的 \\(a\\) 和 \\(b\\) 不一定满足该条件。不过我们可以辗转相除直到满足条件，然后回代： \\[ \\begin{aligned} &amp;b\\times x_n+(a-\\lfloor \\frac ab\\rfloor*b)\\times y_n=\\gcd(a,b) \\\\ \\Rightarrow &amp;a\\times y_n + b\\times(x_n – \\lfloor \\frac ab\\rfloor\\times y_n) = \\gcd(a,b)\\\\ \\Rightarrow &amp;x_{n+1} = y_n , y_{n+1} = x_n – \\lfloor \\frac ab\\rfloor\\times y_n\\\\ \\end{aligned} \\] 1234567891011121314151617181920212223242526272829303132333435#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;typedef long long ll;ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y)//这个是返回值版的 &#123; if(!b) &#123; x=1;y=0; return a; //边界 &#125; int r=exgcd(b,a%b,x,y); int temp=y; //把x y变成上一层的 y=x-(a/b)*y; x=temp; //更改x和y的值，因为是引用的 return r; //得到a b的最大公因数&#125;void exgcd1(ll a,ll b,ll &amp;d,ll &amp;x,ll &amp;y)//这个不返回直接更新 &#123; if(!b)d=a,x=1,y=0; else &#123; exgcd1(b,a%b,d,y,x); y-=x*(a/b); &#125;&#125;int main()&#123; ll a,b,d,x,y; cin&gt;&gt;a&gt;&gt;b; d=exgcd(a,b,x,y);//最大公约数// exgcd1(a,b,d,x,y); printf(&quot;%d %d&quot;,x,y);//x，y已经被更新了 return 0;&#125; 解释一下 exgcd1() 的递推式。d 是最大公约数，这个在 b=0，即上一层 a%b==0 时找到，更新传回即可。 我们 x 和 y 都是直接更新地址的，那我们这里的 y 其实就是传给上一层的 x，相当于 y=x-(a/b)*y，因为我们传下来的时候是将 x 和 y 颠倒的，那么这里 x 就和 y 互换,即 y-=(a/b)*x，x 还是 x，传上去就变成 y 了。 求逆元 上面得到的 \\(x\\) 即为 \\(a\\) 在 \\(\\pmod b\\) 意义下的逆元。 注意，一个数的是有可能没有逆元的，需要提前判断，否则这时候 x 好像是返回 \\(1\\)。如果是有逆元的，解出来的 x 有可能是负数，这时候你可能需要 x=(x+mod)%mod。 求不定方程 （我之前没用Markdown写得真难受） （这个部分是我学了excrt之后才更新的） （之前学的真是肤浅而且一团乱麻） exgcd 既然可以求 \\(ax+by=\\gcd(a,b)\\) 的解，那么一定就可以求 \\(ax+by=c\\) 的解。 假设 \\(g=\\gcd(a,b)\\)，那么我们先把方程两边同时乘 \\(g/c\\)，那么是不是就可以求 \\(x\\) 和 \\(y\\) 了呢？那么求完之后我们在给他乘回去不就行了？ 那就行了。 判断无解的情况：如果求出来的 \\(g\\) 并不能被 \\(c\\) 整除，说明在数论范围内它无解。 鉴于不定方程的性质，\\(x\\) 的最小正整数解是在 \\(b\\) 意义下取模的，\\(y\\) 的最小正整数解是在 \\(a\\) 意义下取模的。我们就可以求出 \\(x\\)，\\(y\\) 的最小整数解和整数解的个数。因为 \\(x\\) 和 \\(y\\) 的增减性是相反的，我们也就可以相应算出最大值。 P5656 【模板】二元一次不定方程 (exgcd) 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;bits/stdc++.h&gt;#define int long long //watch out!using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;inline void write(int x)&#123; if(x&gt;9)write(x/10); putchar(x%10+&#x27;0&#x27;);&#125;inline void exgcd(int a,int b,int&amp; d,int&amp; x,int&amp; y)&#123; if(!b)d=a,x=1,y=0; else exgcd(b,a%b,d,y,x),y-=(a/b)*x;&#125;inline void solve(int a,int b,int c)&#123; int cnt=0,miny,maxy,minx,maxx; int gcd,x,y; exgcd(a,b,gcd,x,y); if(c%gcd!=0)&#123;printf(&quot;-1\\n&quot;);return;&#125; a/=gcd;b/=gcd;c/=gcd;//这里学习了一下大佬的做法，将所有答案除以gcd，实际上是一样的，不过下面的x和y就不是乘c/gcd了。 x*=c; y*=c; minx=x&gt;0&amp;&amp;x%b!=0?x%b:x%b+b; maxy=(c-minx*a)/b; miny=y&gt;0&amp;&amp;y%a!=0?y%a:y%a+a; maxx=(c-miny*b)/a; if(maxx&gt;0)cnt=(maxx-minx)/b+1; if(cnt==0)printf(&quot;%d %d\\n&quot;,minx,miny); else printf(&quot;%d %d %d %d %d\\n&quot;,cnt,minx,miny,maxx,maxy);&#125;signed main()&#123; int t=read(); while(t--)&#123; int a=read(),b=read(),c=read(); solve(a,b,c); &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"},{"name":"exgcd","slug":"exgcd","permalink":"https://starcried.github.io/tags/exgcd/"}]},{"title":"扫描线","slug":"扫描线","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T07:42:31.184Z","comments":true,"path":"2022/04/30/扫描线/","permalink":"https://starcried.github.io/2022/04/30/%E6%89%AB%E6%8F%8F%E7%BA%BF/","excerpt":"","text":"我的第一篇洛谷博客就是扫描线。虽然那时候什么也不懂，也非常幼稚，甚至不知扫描线的原理是如何，只是一门心思地去做，就像面对未知的生活。 扫描线处理矩阵面积之和的问题，当然它们会有互相覆盖而不能直接加起来。 扫描线就是从下往上一次扫描“线”，然后用线将图分成多个区域，累加即可。用线段树记录横坐标此时扫描线处的长度。 用 Xi 表示第 \\(i\\) 条竖直的线（用来划分区间），用 line 结构体表示线水平的线。 P5490 【模板】扫描线 矩形面积并 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#define R registerusing namespace std;typedef long long ll;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=1e6+10;struct Line&#123; ll l,r,h; int val; bool operator &lt; (const Line &amp;zp) const &#123;return h&lt;zp.h;&#125;&#125;line[maxn&lt;&lt;1];int n;ll X[maxn&lt;&lt;1];struct SegmentTree&#123; #define ls (ro&lt;&lt;1) #define rs (ro&lt;&lt;1|1) int l,r,sum; struct tree&#123; int l,r,sum; ll len; &#125;e[maxn&lt;&lt;2]; inline void pushup(int ro) &#123; if(e[ro].sum)e[ro].len=X[e[ro].r+1]-X[e[ro].l]; else e[ro].len=e[ls].len+e[rs].len; &#125; void build(int ro,int l,int r) &#123; e[ro].l=l,e[ro].r=r; if(l==r)return; int mid=l+r&gt;&gt;1; build(ls,l,mid); build(rs,mid+1,r); &#125; void update(int ro,int l,int r,int val) &#123; if(X[e[ro].r+1]&lt;=l or r&lt;=X[e[ro].l])return; if(l&lt;=X[e[ro].l] and X[e[ro].r+1]&lt;=r) &#123; e[ro].sum+=val; pushup(ro); return; &#125; update(ls,l,r,val); update(rs,l,r,val); pushup(ro); &#125; #undef ls #undef rs&#125;seg;int main()&#123; n=read(); for(int i=1;i&lt;=n;i++) &#123; ll x1=(ll)read(),y1=(ll)read(),x2=(ll)read(),y2=(ll)read(); line[(i&lt;&lt;1)-1]=(Line)&#123;x1,x2,y1,1&#125;; line[i&lt;&lt;1]=(Line)&#123;x1,x2,y2,-1&#125;; X[(i&lt;&lt;1)-1]=x1,X[i&lt;&lt;1]=x2; &#125; n&lt;&lt;=1; sort(line+1,line+n+1); sort(X+1,X+n+1); int cnt=unique(X+1,X+n+1)-X-1; seg.build(1,1,cnt-1); ll ans=0; for(register int i=1;i&lt;n;i++) &#123; seg.update(1,line[i].l,line[i].r,line[i].val); ans+=seg.e[1].len*(line[i+1].h-line[i].h); &#125; printf(&quot;%lld\\n&quot;,ans); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线段树","slug":"线段树","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"斜率优化","slug":"斜率优化","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T03:25:50.968Z","comments":true,"path":"2022/04/30/斜率优化/","permalink":"https://starcried.github.io/2022/04/30/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/","excerpt":"","text":"这是之前博客园的草稿，写得不好，本来想直接删除了事。然而，斜率优化是一个很重要也很基础的优化问题，是需要学习掌握的。但我现在没有精力写一篇新的文章了。 OI wiki: 斜率优化","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"优化","slug":"优化","permalink":"https://starcried.github.io/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"斐波那契数列相关","slug":"斐波那契数列相关","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T09:29:39.612Z","comments":true,"path":"2022/04/30/斐波那契数列相关/","permalink":"https://starcried.github.io/2022/04/30/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9B%B8%E5%85%B3/","excerpt":"","text":"斐波那契数列 \\(F(0)=F(1)=1\\) 或 \\(F(1)=F(2)=1\\)，\\(F(i)=F(i-1)+F(i-2)\\). 广义斐波那契数列在转移时有系数且首两项给定。 求法 注意到斐波那契数列的转移为一个矩阵乘 \\[ \\begin{bmatrix}F(i)&amp;F(i-1)\\end{bmatrix} \\begin{bmatrix} 1&amp;1\\\\ 1&amp;0 \\end{bmatrix} \\] 当然广义斐波那契数列的转移就是把转移矩阵的系数换了一下。 所以我们可以通过矩阵快速幂快速求得所求项数。 给出广义斐波那契数列的矩阵乘代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; int mod; struct mat&#123; int a[2][2]; inline void set()&#123; memset(a,0,sizeof a); &#125; inline void zero()&#123; set();a[0][0]=a[1][1]=1; &#125; inline int* operator [] (const int x)&#123;return a[x];&#125; inline const int* operator [] (const int x) const &#123;return a[x];&#125; inline mat operator * (const mat &amp;b)const&#123; mat ans; ans.set(); for(int i=0;i&lt;2;i++) for(int j=0;j&lt;2;j++) for(int k=0;k&lt;2;k++) ans[i][j]=(ans[i][j]+a[i][k]*b[k][j]%mod)%mod; return ans; &#125; &#125;now,pow; inline mat fpow(mat a,int b)&#123; mat ans; ans.zero(); for(;b;b&gt;&gt;=1,a=a*a)if(b&amp;1)ans=ans*a; return ans; &#125; inline void work()&#123; int p=read(),q=read(),a1=read(),a2=read(),n=read(); mod=read(); now[0][1]=a1,now[0][0]=a2,pow[0][0]=p,pow[1][0]=q,pow[0][1]=1; printf(&quot;%lld&quot;,(now*fpow(pow,n-1))[0][1]); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 性质 斐波那契数具有很多神奇的性质，虽然有些不太常用 齐肯多夫定理：任何正整数可以表示为若干个不连续的斐波那契数之和。 于是我们可以引出来一个叫做斐波那契进制的东西。 简单来说，因为任何数都可以被若干个斐波那契数的和表示，我们就可以把这个数用01串表示。其中第i位表示是否含有\\(F[i]\\)。 更形式化地讲，从大到小枚举斐波那契数，每当$ F[i]\\(不小于当前数就将此位置为1并减去该\\) F[i]$，根据定理最后一定会被减完，即被一个01串表示。 因为斐波那契数的增长速度很快，所以这个串并不会很长。 我们来看个毒瘤题： P6791 [SNOI2020] 取石子 对于这个LCA的毒瘤题本身我并不会没什么好说的，没有发现打表之外的解法 通过打表我们可以发现，设\\(a_i\\)表示还剩i颗石子时甲必胜此次至少要取的石子个数，那么 \\(a_i\\) 为 \\(i\\) 在斐波那契进制下的 lowbit。 所以这个题本身和斐波那契数就只有这么点关系 对于题本身不予讨论。我也不会证 斐波那契公约数 P1306 我们需要证明\\(F[\\gcd(i,j)]=\\gcd(F[i],F[j])\\)。 其中\\(F[0]=F[1]=1\\)。 引理：\\(\\gcd(F[i],F[i-1])=1\\) 证明： \\[ \\gcd(F[i],F[i-1])=\\gcd(F[i]-F[i-1],F[i-1])=\\gcd(F[i-1],F[i-2])=\\dots=\\gcd(F[2],F[1])=1 \\] 即\\(F[i]\\)与\\(F[i-1]\\)互质。 引理：\\(F[m+n]=F[m-1]F[n]+F[m]F[n+1]\\) 设\\(F[n]=a,F[n+1]=b\\),向下递推发现由\\(a\\)和\\(b\\)表达的\\(F[i]\\)中其系数是斐波那契数。自己推推就知道了。 \\(F[\\gcd(i,j)]=\\gcd(F[i],F[j])\\) 证明： 不妨设\\(i&lt;j\\)，则有 \\[ \\gcd(F[i],F[j])\\\\=\\gcd(F[i],F[j-i-1]F[i]+F[j-i]F[i+1])\\\\=\\gcd(F[i],F[j-i]F[i+1])\\\\=\\gcd(F[i],F[j-i]) \\] 即 \\[ \\gcd(F[i],F[j])=\\gcd(F[i],F[j\\mod i]) \\] 递归求解，发现我们就是在对F的下标求gcd，也就是 \\[ \\gcd(F[i],F[j])=F[\\gcd(i,j)] \\\\ \\square \\] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int mod=1e8; struct mat&#123; int a[2][2]; mat()&#123; memset(a,0,sizeof a); &#125; inline void zero()&#123; a[0][0]=a[1][1]=1; &#125; inline int* operator [] (const int x)&#123;return a[x];&#125; inline const int* operator [] (const int x) const &#123;return a[x];&#125; inline friend mat operator * (const mat &amp;a,const mat &amp;b)&#123; mat ans; for(int i=0;i&lt;2;i++) for(int j=0;j&lt;2;j++) for(int k=0;k&lt;2;k++) ans[i][j]=(ans[i][j]+a[i][k]*b[k][j]%mod)%mod; return ans; &#125; &#125;now,pow; int gcd(int a,int b)&#123;return b?gcd(b,a%b):a;&#125; inline mat fpow(mat a,int b)&#123; mat ans; ans.zero(); for(;b;b&gt;&gt;=1,a=a*a)if(b&amp;1)ans=ans*a; return ans; &#125; inline void work()&#123; now[0][0]=now[0][1]=pow[0][0]=pow[0][1]=pow[1][0]=1; printf(&quot;%lld&quot;,(now*fpow(pow,gcd(read(),read())-1))[0][1]); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; \\(F[i-1]*F[i+2]-F[i]*F[i+1]=(-1)^i\\) 还是设\\(F[i]=a,F[i+1]=b\\)，然后推来推去，具体看@浅色调 的过程 对于P3986，这个结论可以用来快速解决 \\(aF[i]+bF[i+1]=k\\) 而不用exgcd。 即有通解 \\(x=k*(-1)^iF[i-1],y=k*(-1)^{i+1}F[i-2]\\) 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=100,mod=1e9+7; int N,f[maxn],ans; inline void work()&#123; int k=read(); f[1]=f[2]=1;ans=k-1; for(N=3;(f[N]=f[N-1]+f[N-2])&lt;k;N++); N--; for(int x,y,j=2;j&lt;=N;j++)&#123; int q=((j-1)&amp;1)?-1:1; x=k*q*f[j+3],y=-k*q*f[j+2]; if(x&lt;0)&#123; y-=((-x)/f[j+1]+1)*f[j]; if(y&gt;0)ans=(ans+(int)ceil(1.0*y/f[j]))%mod; &#125;else if(y&lt;0)&#123; x-=((-y)/f[j]+1)*f[j+1]; if(x&gt;0)ans=(ans+(int)ceil(1.0*x/f[j+1]))%mod; &#125; &#125; printf(&quot;%lld&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; PS: @浅色调的题解对N多算了一次，减掉即可。或者在第二遍 for 循环内直接判掉 break 也行。 UPD10.15 给定一个长为n的序列，可在其中填1，求使1任意两个都不相邻的方案数。 昨天看了一道叫做01矩阵的题目想到该问题，经询问 luogu 聚铑们得到答案。 首先，这玩意和斐波那契数有什么关系？ 考虑 DP，对于位置 \\(i\\),设 \\(f[i][0],f[i][1]\\) 为前 \\(i\\) 个数填完、\\(i\\) 填 \\(0\\) 或 \\(1\\) 的方案数，则有转移 \\[ f[i][0]=f[i-1][0]+f[i-1][1]\\\\ f[i][1]=f[i-1][0] \\] 设\\(g[i]\\)为到i的方案总数，则有 \\[ g[i]=f[i][0]+f[i][1]\\\\ g[i]=f[i-1][0]+f[i-1][1]+f[i-1][0]\\\\ g[i]=g[i-1]+g[i-2] \\] 和斐波那契数列的转移相同。 板子题 总结 斐波那契数列性质很多。之后遇到新的我应该会补。 如果您凑巧看到了这里并知道一些相关题目请不吝赐教~","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"斜堆","slug":"斜堆","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T03:20:17.737Z","comments":true,"path":"2022/04/30/斜堆/","permalink":"https://starcried.github.io/2022/04/30/%E6%96%9C%E5%A0%86/","excerpt":"","text":"斜堆 斜堆是个很有趣的东西。而且它有一些很有意思的性质。 斜堆的大概就是每次往堆里面插入一个元素的操作非常“有趣”。插入的节点从根节点开始。如果插入的元素值比所在根小，它会将根“挤下去”，即替代原先的根的位置，将原先的根连到它的左子树上。如果所在根节点为空，它直接插入到此节点上。如果插入的元素比根大，那么它就会先交换所在根的两个子树，然后再递归到原先根的左子树进行插入，直到它比所在根小或者所在根为空。 我们知道根是一个二叉树。根据斜堆的定义，我们可以大概推测它的几个明显的性质： 斜堆是一个小根堆 斜堆上的任意一个节点有可能是一个完全二叉树或一个不完全二叉树，当且仅当它的左子树大于它的右子树。 根据以上性质，我们可以得出“斜堆上任意一个节点若有右子树必定有左子树”的结论。证明显然。 然后，我们就会发现几个不得了的性质： 对于一个斜堆，它最后插入的节点一定在它的最左边的链上。 若有一个节点没有右子树，并且它的左子节点拥有左节点，那么这个节点必定是最后插入的节点。 对于没有符合性质4的节点的斜堆，它最后插入的节点一定是最左边链的最深端点。 后三个性质可以轻易得到斜堆最后插入的节点位置，这就是我们解这道题的关键了：倒着推，每次删除最后插入的节点，将为了插入该节点而交换子树的节点交换回来。每删除一个节点后得到的新的堆就可以再次用相同的方法做了，直到堆中只剩一个节点或者堆中没有节点（看心情）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn=52;inline int read()&#123; int x=0;bool w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;int n,ans[maxn],root;int son[maxn][2],fa[maxn],node[maxn];int main()&#123; n=read(); for(int i=1;i&lt;=n;i++)&#123; int x=read(); son[x%100][x/100]=i; fa[i]=x%100; &#125; root=0; int tot=0; while(son[root][0])&#123; int now=root; while(son[now][0])&#123; if(!son[now][1] and son[son[now][0]][0]) break; now=son[now][0]; &#125; if(now!=root)&#123; ans[++tot]=now; now=fa[now]; fa[son[now][0]]=0; son[now][0]=son[son[now][0]][0]; if(son[now][0]) fa[son[now][0]]=now; while(now!=root)&#123; swap(son[now][0],son[now][1]); now=fa[now]; &#125; swap(son[root][0],son[root][1]); &#125;else&#123; ans[++tot]=now; root=son[root][0]; fa[root]=0; &#125; &#125; ans[++tot]=root; for(int i=tot;i&gt;0;i--)printf(&quot;%d &quot;,ans[i]); return 0;&#125;/*6100 0 2 102 4 104*/ 当然也可以用dfs求解。","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"堆","slug":"堆","permalink":"https://starcried.github.io/tags/%E5%A0%86/"}]},{"title":"最大权闭合子图","slug":"最大权闭合子图","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T04:04:58.195Z","comments":true,"path":"2022/04/30/最大权闭合子图/","permalink":"https://starcried.github.io/2022/04/30/%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/","excerpt":"","text":"最大权闭合子图 闭合子图 定义有向图的一个闭合子图是该有向图的一个点集，其中这个点集中的所有点的出边连向的还是点集中的点。 最大权闭合子图 给有向图的点加一个点权，能得到的点权最大的闭合子图。 网络流模型 将所有正点权的点的点权全部加入答案。接下来我们将原来正点权的点变成负点权。现在图上全是负点，我们需要尽量选最少点权使图符合条件。 设超级源点和超级汇点。 将超级源向所有原来是正点权的点连边，流量为其点权绝对值。 将所有负点权的点向超级汇连边，流量为其点权绝对值。 将所有原图上的边加入，流量为无限。 接下来跑最小割。可以证明此时最小割就是使图合法的最小代价。感性理解一下，将源点与汇点割开的最小割，因为原图的边的流量是无限，只能将超级源汇连出去的边割开。相当于就是不选某些正点或选择某些汇点。这也就保证了后面的点选择时前面的点一定会被选。 最后用前面的答案减去最小割即可。 如果需要构造方案，请看下例题。 P2762 太空飞行计划问题 题意 给你两个集合，一个集合所有元素有正点权，另一个有负点权，前一个集合的每一个元素有若干后一个集合的必选后继，要求若选择该元素后继必选，求能得到的最大点权和。 思路 最大权闭合子图模板。将前一个集合的所有元素向其所有后继连边，就变成了一个有向图，然后用上述方法建模即可。 关于读入 我使用了快读来读入换行符。其代码如下： 1234567inline int read()&#123; int w=0,x=0;static char c(0); while(!isdigit(c) and c!=&#x27;\\n&#x27;) w|=c==&#x27;-&#x27;,c=getchar(); if(c==&#x27;\\n&#x27;)return c=getchar(),INF; while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125; 其中，利用了 static 来保证之前读入的字符能够重新判断。在这个函数中，如果读到换行符将会返回 INF。 关于输出方案 在这道题中，思考网络流建模方式即可得出，如果在最后一次 bfs 中一个正点权的点可以到达，说明其没有被取消选择，即被选择了；如果一个负点权的点可以到达，说明其被选择了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;namespace star&#123; const int maxn=105,maxm=2600,s=103,t=104,INF=0x3f3f3f3f; inline int read()&#123; int w=0,x=0;static char c(0); while(!isdigit(c) and c!=&#x27;\\n&#x27;) w|=c==&#x27;-&#x27;,c=getchar(); if(c==&#x27;\\n&#x27;)return c=getchar(),INF; while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x; &#125; int n,m,val[maxn],ans; int ecnt=1,head[maxn],cur[maxn],to[maxm&lt;&lt;1],nxt[maxm&lt;&lt;1],w[maxm&lt;&lt;1]; inline void addedge(int a,int b,int c)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt,w[ecnt]=c; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt,w[ecnt]=0; &#125; int dep[maxn]; inline bool bfs()&#123; memset(dep,-1,sizeof dep); static int q[maxn]; int hd=0,tl=1; q[tl]=s,dep[s]=0; while(hd&lt;tl)&#123; int x=q[++hd]; for(int u,i=head[x];i;i=nxt[i]) if(dep[u=to[i]]==-1 and w[i]) dep[u]=dep[x]+1,q[++tl]=u; &#125; return dep[t]!=-1; &#125; int dfs(int x,int flow)&#123; if(x==t)return flow; int used=0,u; for(int&amp; i=cur[x];i;i=nxt[i]) if(dep[u=to[i]]==dep[x]+1 and w[i])&#123; int v=dfs(u,min(flow-used,w[i])); used+=v,w[i]-=v,w[i^1]+=v; if(used==flow) break; &#125; return used; &#125; inline int dinic()&#123; int ans=0; while(bfs()) memcpy(cur,head,sizeof cur),ans+=dfs(s,INF); return ans; &#125; inline void work()&#123; m=read(),n=read();read(); for(int v,i=1;i&lt;=m;i++)&#123; addedge(s,i,v=read());ans+=v; while((v=read())!=INF) addedge(i,v+m,INF); &#125; for(int i=1;i&lt;=n;i++) addedge(i+m,t,read()); ans-=dinic(); for(int i=1;i&lt;=m;i++) if(dep[i]!=-1) printf(&quot;%d &quot;,i);puts(&quot;&quot;); for(int i=1;i&lt;=n;i++) if(dep[m+i]!=-1) printf(&quot;%d &quot;,i); printf(&quot;\\n%d\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; CF103E Buying Sets 题意 有一个大小为 n 的全集，每个元素是一个数，有 n 个子集。题目保证任意 k 个子集的并的大小 ⩾ k。 每个子集有一个可正可负的权值，你需要选出一些子集使得这些子集并的大小等于子集个数，且所选子集的权值和最小。可以为空集。 思路 发现如果没有 子集并的大小等于子集个数 的限制，将边权取负就是最大权闭合子图的模板。考虑怎么满足这个限制。 我们把每个节点的点权加上一个巨大的偏移量 \\(\\Delta\\) 即可。 原因是，如果跑最大流时要多选一个点的话，代价一定会变得很大。因为题目保证 任意 k 个子集的并的大小 ⩾ k，而且可以选空集，所以我们可以这么干。 早期代码","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"网络流","slug":"网络流","permalink":"https://starcried.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"}]},{"title":"最小路径覆盖","slug":"最小路径覆盖","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T06:58:28.471Z","comments":true,"path":"2022/04/30/最小路径覆盖/","permalink":"https://starcried.github.io/2022/04/30/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96/","excerpt":"","text":"路径覆盖 路径覆盖指一个路径的集合中所有路径点集的并集为原图点集。最小路径覆盖使路径集合大小最小。 路径覆盖分为可否重复选点两种。可重复选点在建模中加大流量即可。 网络流模型 建超级源 \\(S\\) 和超级汇 \\(T\\)，将每个点拆点。 将 \\(S\\) 向所有点 \\(i\\) 连边，将所有点 \\(i&#39;\\) 向 \\(T\\) 连边。 对于原图边集，每一条边 \\(u\\) 向 \\(v&#39;\\) 连边。 选点不重的最小路径覆盖问题，上述所有边流量为 1，答案为点数减去最小割。 考虑对于这个模型建出来的图求出的最小割是什么。它实际上是最大的可以合并的路径条数。因为每合并两条路径相当于总路径数就减少了，所以有最小路径覆盖等于点数减最大匹配。 其中最大匹配就是我们刚才的模型。可以发现，我们实际上就是建了一个二分图在求最大匹配。 P2764 最小路径覆盖问题 题意如上，要求构造方案。 我的构造方式如下：利用并查集，对于每条道路的端点，若这条边被选择了就将这两条边加入一个并查集，每个并查集代表一条路径。最后从每个路径的起点进行一遍搜索即可。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=305,maxm=6305,S=303,T=304,INF=0x3f3f3f3f; int n,m; int ecnt=1,head[maxn],cur[maxn],to[maxm&lt;&lt;1],nxt[maxm&lt;&lt;1],w[maxm&lt;&lt;1]; inline void addedge(int a,int b,int c)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt,w[ecnt]=c; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt,w[ecnt]=0; &#125; int dep[maxn]; inline bool bfs()&#123; memset(dep,-1,sizeof dep); static int q[maxn]; int hd=0,tl=1; q[tl]=S;dep[S]=0; while(hd&lt;tl)&#123; int x=q[++hd]; for(int u,i=head[x];i;i=nxt[i]) if(dep[u=to[i]]==-1 and w[i]) dep[u]=dep[x]+1,q[++tl]=u; &#125; return dep[T]!=-1; &#125; int dfs(int x,int flow)&#123; if(x==T) return flow; int used=0,u; for(int&amp; i=cur[x];i;i=nxt[i]) if(dep[u=to[i]]==dep[x]+1 and w[i])&#123; int v=dfs(u,min(flow-used,w[i])); used+=v,w[i]-=v,w[i^1]+=v; if(used==flow)break; &#125; return used; &#125; inline int dinic()&#123; int ans=0; while(bfs()) memcpy(cur,head,sizeof head),ans+=dfs(S,INF); return ans; &#125; int fa[maxn]; bool vis[maxn]; int find(int x)&#123;return fa[x]==x?x:fa[x]=find(fa[x]);&#125; void Dfs(int x)&#123;printf(&quot;%d &quot;,x);for(int u,i=head[x];i;i=nxt[i]) if(!w[i] and (u=to[i])&gt;n and u&lt;=n*2) Dfs(u-n);&#125; inline void work()&#123; n=read(),m=read(); for(int u,v,i=1;i&lt;=m;i++) u=read(),v=read(),addedge(u,v+n,1); for(int i=1;i&lt;=n;i++) addedge(S,i,1),addedge(i+n,T,1),fa[i]=i; int ans=n-dinic(); for(int i=1;i&lt;=m;i++) if(!w[i&lt;&lt;1]) fa[find(to[i&lt;&lt;1]-n)]=find(to[i&lt;&lt;1|1]); for(int i=1;i&lt;=n;i++) if(find(i)==i) Dfs(i),puts(&quot;&quot;); printf(&quot;%d\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; P2469 星际竞速 题意 给你若干单向道路，并且每个点有一个可以从任意位置任意时刻到达该点的代价。求遍历所有点的最小代价。 思路 参照最小路径覆盖的思路，拆出来的第二个点与汇点间的连边表示到达该点。建模方式如下： 对于所给的所有边 \\((u,v)\\)，将 \\(u\\) 向 \\(v&#39;\\) 建边权费用边。 从源点向所有 \\(i\\) 连无费用边。 从所有 \\(i&#39;\\) 向汇点连无费用边。 从源点向所有 \\(i&#39;\\) 连传送费用边。上述所有边流量为 1。（因为从任何位置传送与起点无关） 跑最小费用最大流即为答案。正确性，考虑建出来的图，因为源点到所有点都有传送的边，所以跑最小割一定会经过所有点，并且因为都是单向边且流量为 1，所以保证正确。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;queue&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=3005,maxm=600005,S=3003,T=3004,INF=0x3f3f3f3f; int n,m; int ecnt=1,head[maxn],to[maxm],nxt[maxm],w[maxm],v[maxm]; inline void addedge(int a,int b,int c,int d)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt,w[ecnt]=c,v[ecnt]=d; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt,w[ecnt]=0,v[ecnt]=-d; &#125; int dis[maxn],pre[maxn]; bool vis[maxn]; inline bool spfa()&#123; queue&lt;int&gt; q; memset(pre,0,sizeof pre); memset(vis,0,sizeof vis); memset(dis,INF,sizeof dis); q.push(S);dis[S]=0; while(!q.empty())&#123; int x=q.front();q.pop(); vis[x]=false; for(int u,i=head[x];i;i=nxt[i]) if(dis[u=to[i]]&gt;dis[x]+v[i] and w[i])&#123; dis[u]=dis[x]+v[i];pre[u]=i; if(!vis[u]) vis[u]=true,q.push(u); &#125; &#125; return pre[T]; &#125; int a[maxn]; inline void work()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) addedge(S,i,1,0),addedge(i+n,T,1,0),addedge(S,i+n,1,a[i]=read()); for(int u,v,zp,i=1;i&lt;=m;i++)&#123; u=read(),v=read(); if(u&gt;v) swap(u,v); if((zp=read())&lt;a[v])addedge(u,v+n,1,zp); &#125; int ans=0; while(spfa())&#123; int mn=INF; for(int i=pre[T];i;i=pre[to[i^1]]) mn=min(mn,w[i]); for(int i=pre[T];i;i=pre[to[i^1]]) w[i]-=mn,w[i^1]+=mn; ans+=dis[T]*mn; &#125; printf(&quot;%d\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"网络流","slug":"网络流","permalink":"https://starcried.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"}]},{"title":"最小覆盖问题-POJ3041-P1129","slug":"最小覆盖问题-POJ3041-P1129","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T06:57:24.590Z","comments":true,"path":"2022/04/30/最小覆盖问题-POJ3041-P1129/","permalink":"https://starcried.github.io/2022/04/30/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98-POJ3041-P1129/","excerpt":"","text":"POJ3041 这道题正解对于像我这种蒟蒻来说比较难以想到。 我们发现每次覆盖的只是一条线上的所有点。那么我们可以把它想象成一个二分图，两个集合分别是横轴和纵轴。 想一想，这实际上是不是就是x轴轴和纵轴的最大匹配？ 于是这就变成了一个板子匈牙利算法题目。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;ctype.h&gt;#define R registerusing namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=505,maxm=10005;int n,m;int mapp[maxn][maxn];bool vis[maxn];int match[maxn];bool find(int x)&#123; for(R int i=1;i&lt;=n;i++) if(mapp[x][i] and vis[i]==0) &#123; vis[i]=1; if(match[i]==0 || find(match[i])) &#123; match[i]=x; return 1; &#125; &#125; return 0;&#125;int main()&#123; n=read(),m=read(); for(R int i=1;i&lt;=m;i++)mapp[read()][read()]=1; int ans=0; for(R int i=1;i&lt;=n;i++) &#123; memset(vis,0,sizeof vis); if(find(i))ans++; &#125; printf(&quot;%d&quot;,ans); return 0;&#125; 洛谷P1129 这道题也差不多了，\\(O(n^2)\\)就能过。 也是求x和y轴的最大匹配。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;ctype.h&gt;#define R registerusing namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=505,maxm=10005;int n,m;int mapp[maxn][maxn];bool vis[maxn];int match[maxn];bool find(int x)&#123; for(R int i=1;i&lt;=n;i++) if(mapp[x][i] and vis[i]==0) &#123; vis[i]=1; if(match[i]==0 || find(match[i])) &#123; match[i]=x; return 1; &#125; &#125; return 0;&#125;int main()&#123; int t=read();k: while(t--) &#123; memset(mapp,0,sizeof mapp); memset(match,0,sizeof match); n=read(); for(R int i=1;i&lt;=n;i++) for(R int j=1;j&lt;=n;j++)mapp[i][j]=read(); int ans=0; for(R int i=1;i&lt;=n;i++) &#123; memset(vis,0,sizeof vis); if(!find(i))&#123; printf(&quot;No\\n&quot;); goto k; &#125; &#125; printf(&quot;Yes\\n&quot;); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"最大网络流dinic","slug":"最大网络流dinic","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T04:11:49.744Z","comments":true,"path":"2022/04/30/最大网络流dinic/","permalink":"https://starcried.github.io/2022/04/30/%E6%9C%80%E5%A4%A7%E7%BD%91%E7%BB%9C%E6%B5%81dinic/","excerpt":"","text":"算法介绍 最大流问题是指在一个有向图中，从一个源点到一个汇点，最大化流量，使得所有边的容量都大于等于 0。 dinic 算法是一种高效的求解最大流问题的算法，其时间复杂度为 \\(O(EV^2)\\)。 dinic 算法的基本思想是，通过增广路算法，找到一条从源点到汇点的增广路，然后通过深度优先搜索（DFS）算法，在增广路上进行流的增广，直到不能再增广为止。 步骤 初始化 flow（最大流量）为 INF（极大值），建边（正向弧和反向弧） bfs 寻找增广路看看有没有路，顺便进行深度标号。如果没有路直接结束输出 flow。 如果有，我们按照深度 dfs。dfs 时注意在给正向弧减权时给反向弧加权。 ans+=flow ,重复2到4步骤，直到无路可走。 以上就是网络流全部内容（误 P3376 【模板】网络最大流 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;queue&gt; #define R register#define INF 1&lt;&lt;30using namespace std;template &lt;typename T&gt;inline T read()&#123; T x=0;int w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; typedef long long ll; const int maxn=100000; struct Edge&#123; int to,nxt; ll dis; &#125;e[200000]; int head[maxn],ecnt=1;//这里记为-1的原因时便于访问正向弧和反向弧 int n,m,s,end,dep[maxn]; inline void addedge(int from,int to,ll dis)&#123; e[++ecnt].to=to,e[ecnt].nxt=head[from],e[ecnt].dis=dis,head[from]=ecnt; &#125; inline void add(int from,int to,ll dis)&#123; addedge(from,to,dis);addedge(to,from,0); &#125; ll DFS(int x,ll flow) &#123; if(x==end) return flow; ll used=0; for(R int i=head[x];i;i=e[i].nxt) &#123; int u=e[i].to; if(e[i].dis and dep[u]==dep[x]+1) &#123; long long w=DFS(u,min(e[i].dis,flow-used)); used+=w; e[i].dis-=w;e[i^1].dis+=w; if(used==flow)return flow; &#125; &#125; if(!used)dep[x]=-1; return used; &#125; queue&lt;int&gt;q; inline bool BFS() &#123; memset(dep,-1,sizeof dep); dep[s]=0; q.push(s); while(!q.empty()) &#123; int u=q.front();q.pop(); for(R int i=head[u];i;i=e[i].nxt) if(e[i].dis and dep[e[i].to]==-1) dep[e[i].to]=dep[u]+1,q.push(e[i].to); &#125; if(dep[end]==-1)return 0; return 1; &#125; inline void work() &#123; n=read&lt;int&gt;(),m=read&lt;int&gt;(),s=read&lt;int&gt;(),end=read&lt;int&gt;(); ll ans=0; int a,b; ll c; for(R int i=0;i&lt;m;i++)a=read&lt;int&gt;(),b=read&lt;int&gt;(),c=read&lt;ll&gt;(),add(a,b,c); while(BFS()) ans+=DFS(s,INF); printf(&quot;%lld\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 当前弧优化 如果虽然上面的代码能过模板题，但是时间复杂度其实是不对的，因为没有加当前弧优化。 这也不是什么高深的玩意。我们证明，如果一个点在之前的 dfs 中已经把一些边考虑过了，由于在当前和以后的流的 dfs 中这些边都是增广过的，也就是再也没法做出贡献了，那么我们用一个数组 cur 记录一下考虑到哪里了然后下一次 dfs 时接着上次的就行了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;queue&gt; #define R register#define INF 1&lt;&lt;30using namespace std;template &lt;typename T&gt;inline T read()&#123; T x=0;int w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace ysr&#123; typedef long long ll; const int maxn=100000; struct Edge&#123; int to,nxt; ll dis; &#125;e[200000]; int cur[maxn],head[maxn],ecnt=1;//这里记为-1的原因时便于访问正向弧和反向弧 int n,m,s,end,dep[maxn]; inline void addedge(int from,int to,ll dis)&#123; e[++ecnt].to=to,e[ecnt].nxt=head[from],e[ecnt].dis=dis,head[from]=ecnt; &#125; inline void add(int from,int to,ll dis)&#123; addedge(from,to,dis);addedge(to,from,0); &#125; ll DFS(int x,ll flow) &#123; if(x==end) return flow; ll used=0; for(R int i=cur[x];i;i=e[i].nxt) &#123; cur[x]=i; int u=e[i].to; if(e[i].dis and dep[u]==dep[x]+1) &#123; long long w=DFS(u,min(e[i].dis,flow-used)); used+=w; e[i].dis-=w;e[i^1].dis+=w; if(used==flow)return flow; &#125; &#125; if(!used)dep[x]=-1; return used; &#125; queue&lt;int&gt;q; inline bool BFS() &#123; for(R int i=0;i&lt;=n;i++)cur[i]=head[i],dep[i]=-1; dep[s]=0; q.push(s); while(!q.empty()) &#123; int u=q.front();q.pop(); for(R int i=head[u];i;i=e[i].nxt) if(e[i].dis and dep[e[i].to]==-1) dep[e[i].to]=dep[u]+1,q.push(e[i].to); &#125; if(dep[end]==-1)return 0; return 1; &#125; inline void work() &#123; n=read&lt;int&gt;(),m=read&lt;int&gt;(),s=read&lt;int&gt;(),end=read&lt;int&gt;(); ll ans=0; int a,b; ll c; for(R int i=0;i&lt;m;i++)a=read&lt;int&gt;(),b=read&lt;int&gt;(),c=read&lt;ll&gt;(),add(a,b,c); while(BFS()) ans+=DFS(s,INF); printf(&quot;%lld\\n&quot;,ans); &#125;&#125;signed main()&#123; ysr::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"网络流","slug":"网络流","permalink":"https://starcried.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"}]},{"title":"期望长度P1365,CF235B,P1654","slug":"期望长度P1365,CF235B,P1654","date":"2022-04-29T16:00:00.000Z","updated":"2024-10-06T16:13:42.705Z","comments":true,"path":"2022/04/30/期望长度P1365,CF235B,P1654/","permalink":"https://starcried.github.io/2022/04/30/%E6%9C%9F%E6%9C%9B%E9%95%BF%E5%BA%A6P1365,CF235B,P1654/","excerpt":"","text":"定义 这里期望长度表示一段序列连续长度的期望。具体来说，对于一段序列，每个点都有一个概率连续和断开。求所有连续序列和的期望。 当然，对于以上期望长度的定义，我们只需要求出每个点存在的期望的和即可。但是题目永远不会这么简单。 Osu! Osu!是一个音乐游戏，玩家需要对音符在恰当时候进行敲击来通关。一次到位的敲击为o，不到位的为x。一段连续到位的敲击，即combo次数为这段序列的长度。 我们接下来讨论的三个题都和这个游戏有关。 level1 一段Osu!序列为一串字符，包括'o','x','?'。其中'o','x'的定义如上，'?'表示此位置有一半的几率为'o'。游戏得分为所有combo次数平方的和。求得分的期望。 也就是我们要求所有序列长度平方的期望和。 期望 期望具有线性性，但不具有积性。这意味着我们无法对求得的期望长度直接平方来得到答案。 并且请注意一点，若一个值的期望为 0，并不意味着它的平方的期望为 0。这可以帮助我们理解期望的线性性。 期望的平方在大多数情况下并没有什么实际意义。 但是，期望具有线性性。 考虑我们的答案，实际上就是长度平方的期望。考虑往后的转移。（设 \\(f1\\) 表示当前期望长度，\\(f2\\) 表示答案，即长度平方期望的和） 根据公式 \\((len+1)^2=len^2+2*len+1\\) 若后一位 \\(i\\) 为'o',则后一位 \\(i\\) 的期望值分别为 \\[f1_i=f1_{i-1}+1\\] \\[f2_i=f2_{i-1}+2*f1_{i-1}+1\\] 即此位 \\(f2\\) 的值其实是可以从前一位线性转移来的。所谓线性，就是其幂为 1。 同样，考虑第 \\(i\\) 位为'x'的情况，\\(f1=0\\) , \\(f2\\) 直接继承前面的答案。 然后我们就可以得到'?'的情况：上述两种情况和除以2. \\[f1_i=\\frac{f1_{i-1}+1}2\\] \\[f2_i=\\frac{2*f2_{i-1}+2*f1_{i-1}+1}{2}\\] 于是我们就能完成P1365 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; int n; double f,len,p; inline void work()&#123; n=read(); char c=getchar(); while(c!=&#x27;o&#x27; and c!=&#x27;?&#x27; and c!=&#x27;x&#x27;)c=getchar(); while(n--)&#123; if(c==&#x27;o&#x27;)f=(f+2*len+1),len=len+1; else if(c==&#x27;?&#x27;)f=(2*(f+len)+1)/2,len=(len+1)/2; else len=0; &#125; printf(&quot;%.4lf&quot;,f); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; level2 我们发现，其实对于概率任意的情况也可以推出来。上题三种字符其实就是对应概率为 \\(1\\)，\\(0.5\\)，\\(0\\) 的三种情况。 设 \\(p\\) 为该点为'o'的概率，则有: \\[f2_i=f2_{i-1}+p*(2*f1_{i-1}+1)\\] \\[f1_i=p*(f1_{i-1}+1)\\] 所以上题的代码的核心部分等同于： 123456while(n--)&#123; p=c==&#x27;o&#x27;?1.0:c==&#x27;?&#x27;?0.5:0.0; f=f+p*(2*len+1); len=p*(len+1); c=getchar();&#125; 于是我们可以完成CF235B 123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; int n; double f,len,p; inline void work()&#123; n=read(); while(n--)&#123; scanf(&quot;%lf&quot;,&amp;p); f=(f-len*len+(len+1)*(len+1))*p+f*(1-p); len=p*(len+1); &#125; printf(&quot;%.8lf&quot;,f); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; level3 我们已经完成了对于长度平方的期望和的问题。那么我们就可以解决新的问题：对于答案为所有combo长度立方的和的期望我们怎么求解呢？ 根据期望的线性性，我们再维护一个平方的期望即可。 根据公式 \\((len+1)^3=len^3+3len^2+3len+1\\)，我们可以得到以下转移： \\[ \\begin{aligned} f3_i&amp;=f3_{i-1}+p*(3*(f2_{i-1}+f1_{i-1})+1)\\\\ f2_i&amp;=p*(f2_{i-1}+2*f1_{i-1}+1)\\\\ f1_i&amp;=p*(f1_{i-1}+1); \\end{aligned} \\] 注意！ 我承认我的变量名的定义有亿点点毒瘤，因为读者可以清楚地发现在上一题中 \\(f2\\) 的转移为 \\(f2_i=f2_{i-1}+p*(2*f1_{i-1}+1)\\) 而非当前转移。实际上在定义 \\(f2\\) 时我的定义为答案而非二次项的期望，根据期望的线性性，答案是可以继承上一次的答案进行转移的，也就是对于'x'的情况继承 \\(f2\\) 而非 \\(0\\) 的原因。 在此level中我对 \\(f2\\) 重新定义为长度二次幂的期望。希望不要因为我的毒瘤误导大家。 相同的，我对 \\(f3\\) 的定义为答案，因此需要继承之前的答案。 于是我们就完成了P1654 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; int n; double f1,f2,f3; inline void work()&#123; n=read(); double p; while(n--)&#123; scanf(&quot;%lf&quot;,&amp;p); f3=f3+p*(3*(f2+f1)+1); f2=p*(f2+2*f1+1); f1=p*(f1+1); &#125; printf(&quot;%.1lf&quot;,f3); &#125;&#125;signed main()&#123; star::work(); return 0;&#125; 总结 期望好神奇。","categories":[{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"树上差分","slug":"树上差分","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T09:05:04.810Z","comments":true,"path":"2022/04/30/树上差分/","permalink":"https://starcried.github.io/2022/04/30/%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/","excerpt":"","text":"差分 记录相邻节点值的差值。这样一来，前缀和就相当于原值了。 树上差分 树上差分基本上就是差分在树上的实现。因为差分的原理，我们先将所有点的权值改变成差分值，再更改一段区间内的所有值时，只需要更改首尾两端的值，如果要求值的话 dfs 重新加上前缀和就是正常的值了。 P3128 [USACO15DEC] Max Flow P 模板题，发现更改任意两点间的值只需要在两点差分值加上 1 然后在 lca 和 fa[lca]（倍增的话就是 fa[lca][0]）上减去 1，从根 dfs 并记录最大值即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;ctype.h&gt;#define R registerusing namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=233333;int n,m,ans[maxn];int top[maxn],fa[maxn][18],dep[maxn],head[maxn],ecnt,cnt;struct Edge&#123; int to,nxt;&#125;e[maxn&lt;&lt;1];inline void addedge(int a,int b)&#123; e[++ecnt]=(Edge)&#123;b,head[a]&#125;;head[a]=ecnt; e[++ecnt]=(Edge)&#123;a,head[b]&#125;;head[b]=ecnt;&#125;bool vis[maxn];void dfs1(int x,int depth)&#123; for (R int i=0;fa[x][i];++i) fa[x][i+1]=fa[fa[x][i]][i]; vis[x]=1; dep[x]=depth; for(R int i=head[x];i;i=e[i].nxt) &#123; int u=e[i].to; if(vis[u])continue; fa[u][0]=x; dfs1(u,depth+1); &#125;&#125;inline int LCA(int u,int v)&#123; if(dep[u]&lt;dep[v])swap(u,v); for(R int i=0;i&lt;=16;i++) if((dep[u]-dep[v])&amp;(1&lt;&lt;i))u=fa[u][i]; if(u==v)return u; for(R int i=16;i&gt;=0;i--) if(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i]; return fa[u][0]; &#125; int Ans=0;void dfs2(int x)&#123; vis[x]=1; for(R int i=head[x];i;i=e[i].nxt) &#123; int u=e[i].to; if(vis[u])continue; dfs2(u); ans[x]+=ans[u]; &#125; Ans=max(Ans,ans[x]);&#125;int main()&#123; n=read(),m=read(); for(R int i=1;i&lt;n;i++)addedge(read(),read()); fa[1][0]=0; dfs1(1,1); for(R int i=1;i&lt;=m;i++) &#123; int x=read(),y=read(); int lca=LCA(x,y); ans[x]++,ans[y]++,ans[lca]--,ans[fa[lca][0]]--; &#125; memset(vis,0,sizeof vis); dfs2(1); printf(&quot;%d\\n&quot;,Ans); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"树链剖分","slug":"树链剖分","permalink":"https://starcried.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"}]},{"title":"权值线段树套序列线段树","slug":"权值线段树套序列线段树","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T07:18:29.449Z","comments":true,"path":"2022/04/30/权值线段树套序列线段树/","permalink":"https://starcried.github.io/2022/04/30/%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%BA%8F%E5%88%97%E7%BA%BF%E6%AE%B5%E6%A0%91/","excerpt":"","text":"【模板】权值线段树套序列线段树 P3380 【模板】二逼平衡树（树套树） 主要思路如下： 外层为权值线段树，内层为动态开点线段树，也就是每个权值线段树上的节点开一个动态开点线段树。 外层的权值线段树支持查询排名，内层的线段树限制了区间。实际上就是在普通权值线段树上查询的价值变成了在其线段树上区间查询返回的值。 对于这道模板题，我们先写几个函数： 插入 下方的update为外层线段树，将路径上的所有点的线段树修改。 上方的update为内层线段树，动态开点单点修改。 要判断k==1为题目需要，因为如果是删除的话就不需要开点了。 变量解释：v为权值，p为下标，k为修改的值。 1234567891011121314void update(int &amp;ro,int l,int r,int p,int k)&#123; if(k==1 and !ro)ro=++tot; if(ro) val[ro]+=k; if(!ro or l==r)return; int mid=l+r&gt;&gt;1; (p&lt;=mid)?update(ls[ro],l,mid,p,k):update(rs[ro],mid+1,r,p,k);&#125;void update(int &amp;ro,int l,int r,int v,int p,int k)&#123; if(k==1 and !ro)ro=++Tot; if(ro) update(rt[ro],1,n,p,k); if(!ro or l==r)return; int mid=l+r&gt;&gt;1; (v&lt;=mid)?update(Ls[ro],l,mid,v,p,k):update(Rs[ro],mid+1,r,v,p,k);&#125; 查询 本题有多个查询： 查询k在区间中的排名，我们需要查询0~k-1在区间中的个数将结果加1。（因为有可能有重复元素） 查询区间内排名为k的值，我们只需要在权值线段树上查询即可，一个点的贡献就是其线段树在区间内的贡献。 查询前驱和后继，就是将上面两种操作合并，先查询有多少点在区间内小于/小于等于该值，然后查询排名即可。 注意判断边界情况。 123456789101112131415161718192021222324252627int query(int ro,int l,int r,int x,int y)&#123; if(!ro)return 0; if(x&lt;=l and y&gt;=r)return val[ro]; int mid=l+r&gt;&gt;1; return (x&lt;=mid?query(ls[ro],l,mid,x,y):0)+(y&gt;mid?query(rs[ro],mid+1,r,x,y):0);&#125;int rank(int ro,int l,int r,int x,int y,int L,int R)&#123; if(!ro)return 0; if(x&lt;=l and y&gt;=r)return query(rt[ro],1,n,L,R); int mid=l+r&gt;&gt;1; return (x&lt;=mid?rank(Ls[ro],l,mid,x,y,L,R):0)+(y&gt;mid?rank(Rs[ro],mid+1,r,x,y,L,R):0);&#125;int kth(int ro,int l,int r,int k,int L,int R)&#123; if(l==r)return l; int mid=l+r&gt;&gt;1,tmp=query(rt[Ls[ro]],1,n,L,R); return (k&lt;=tmp)?kth(Ls[ro],l,mid,k,L,R):kth(Rs[ro],mid+1,r,k-tmp,L,R);&#125;inline int pre(int x,int y,int k)&#123; int zp; if(!(zp=rank(root,0,maxl,0,k-1,x,y)))return -2147483647; return kth(root,0,maxl,zp,x,y);&#125;inline int nxt(int x,int y,int k)&#123; int zp; if((zp=rank(root,0,maxl,0,k,x,y))==rank(root,0,maxl,0,maxl,x,y))return 2147483647; return kth(root,0,maxl,zp+1,x,y);&#125; 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=5e4+10,maxm=1e7+10,maxl=1e8; int n,q,rt[maxm],ls[maxm*3],rs[maxm*3],Ls[maxm],Rs[maxm],val[maxm*3],tot,Tot,root; int a[maxn]; void update(int &amp;ro,int l,int r,int p,int k)&#123; if(k==1 and !ro)ro=++tot; if(ro) val[ro]+=k; if(!ro or l==r)return; int mid=l+r&gt;&gt;1; (p&lt;=mid)?update(ls[ro],l,mid,p,k):update(rs[ro],mid+1,r,p,k); &#125; void update(int &amp;ro,int l,int r,int v,int p,int k)&#123; if(k==1 and !ro)ro=++Tot; if(ro) update(rt[ro],1,n,p,k); if(!ro or l==r)return; int mid=l+r&gt;&gt;1; (v&lt;=mid)?update(Ls[ro],l,mid,v,p,k):update(Rs[ro],mid+1,r,v,p,k); &#125; int query(int ro,int l,int r,int x,int y)&#123; if(!ro)return 0; if(x&lt;=l and y&gt;=r)return val[ro]; int mid=l+r&gt;&gt;1; return (x&lt;=mid?query(ls[ro],l,mid,x,y):0)+(y&gt;mid?query(rs[ro],mid+1,r,x,y):0); &#125; int rank(int ro,int l,int r,int x,int y,int L,int R)&#123; if(!ro)return 0; if(x&lt;=l and y&gt;=r)return query(rt[ro],1,n,L,R); int mid=l+r&gt;&gt;1; return (x&lt;=mid?rank(Ls[ro],l,mid,x,y,L,R):0)+(y&gt;mid?rank(Rs[ro],mid+1,r,x,y,L,R):0); &#125; int kth(int ro,int l,int r,int k,int L,int R)&#123; if(l==r)return l; int mid=l+r&gt;&gt;1,tmp=query(rt[Ls[ro]],1,n,L,R); return (k&lt;=tmp)?kth(Ls[ro],l,mid,k,L,R):kth(Rs[ro],mid+1,r,k-tmp,L,R); &#125; inline int pre(int x,int y,int k)&#123; int zp; if(!(zp=rank(root,0,maxl,0,k-1,x,y)))return -2147483647; return kth(root,0,maxl,zp,x,y); &#125; inline int nxt(int x,int y,int k)&#123; int zp; if((zp=rank(root,0,maxl,0,k,x,y))==rank(root,0,maxl,0,maxl,x,y))return 2147483647; return kth(root,0,maxl,zp+1,x,y); &#125; inline void work()&#123; n=read(),q=read(); for(int i=1;i&lt;=n;i++) update(root,0,maxl,a[i]=read(),i,1); while(q--)&#123; int op=read(),x=read(),y=read(); switch(op)&#123; case 1:printf(&quot;%d\\n&quot;,rank(root,0,maxl,0,read()-1,x,y)+1);break; case 2:printf(&quot;%d\\n&quot;,kth(root,0,maxl,read(),x,y));break; case 3:update(root,0,maxl,a[x],x,-1),update(root,0,maxl,a[x]=y,x,1);break; case 4:printf(&quot;%d\\n&quot;,pre(x,y,read()));break; case 5:printf(&quot;%d\\n&quot;,nxt(x,y,read()));break; &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125; P3332 [ZJOI2013]K大数查询 只剩一个询问查询k大数，区间修改。具体就是把上面内层的线段树变成了区间修改的。 常数巨大的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cctype&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=5e4+10,maxm=1e7+10,maxl=5e5+10; int n,q,rt[maxm],ls[maxm*3],rs[maxm*3],Ls[maxm],Rs[maxm],val[maxm*3],tag[maxm*3],tot,Tot,root; void pushdown(int ro,int l,int r)&#123; int mid=floor((l+r)/2.0); if(!tag[ro])return; if(!ls[ro])ls[ro]=++tot; if(!rs[ro])rs[ro]=++tot; tag[ls[ro]]+=tag[ro],tag[rs[ro]]+=tag[ro]; val[ls[ro]]+=tag[ro]*(mid-l+1),val[rs[ro]]+=tag[ro]*(r-mid); tag[ro]=0; &#125; void pushup(int ro)&#123; val[ro]=val[ls[ro]]+val[rs[ro]]; &#125; void update(int &amp;ro,int l,int r,int x,int y,int k)&#123; if(!ro)ro=++tot; if(l==x and r==y)return (void)(tag[ro]+=k,val[ro]+=k*(r-l+1)); pushdown(ro,l,r); int mid=floor((l+r)/2.0); if(y&lt;=mid) update(ls[ro],l,mid,x,y,k); else if(x&gt;mid) update(rs[ro],mid+1,r,x,y,k); else update(ls[ro],l,mid,x,mid,k),update(rs[ro],mid+1,r,mid+1,y,k); pushup(ro); &#125; void update(int &amp;ro,int l,int r,int v,int x,int y,int k)&#123; if(!ro)ro=++Tot; if(ro) update(rt[ro],1,n,x,y,k); if(l==r)return; int mid=floor((l+r)/2.0); (v&lt;=mid)?update(Ls[ro],l,mid,v,x,y,k):update(Rs[ro],mid+1,r,v,x,y,k); &#125; int query(int ro,int l,int r,int x,int y)&#123; if(!ro)return 0; if(x==l and y==r)return val[ro]; pushdown(ro,l,r); int mid=floor((l+r)/2.0); if(y&lt;=mid) return query(ls[ro],l,mid,x,y); else if(x&gt;mid) return query(rs[ro],mid+1,r,x,y); else return query(ls[ro],l,mid,x,mid)+query(rs[ro],mid+1,r,mid+1,y); &#125; int kth(int ro,int l,int r,int k,int L,int R)&#123; if(l==r)return l; int mid=floor((l+r)/2.0),tmp=query(rt[Rs[ro]],1,n,L,R); return (k&lt;=tmp)?kth(Rs[ro],mid+1,r,k,L,R):kth(Ls[ro],l,mid,k-tmp,L,R); &#125; inline void work()&#123; n=read(),q=read(); while(q--)&#123; int op=read(),l=read(),r=read(),x=read(); switch(op)&#123; case 1:update(root,-maxl,maxl,x,l,r,1);break; case 2:printf(&quot;%lld\\n&quot;,kth(root,-maxl,maxl,x,l,r));break; &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线段树","slug":"线段树","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"树形分治算法","slug":"树形分治算法","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T09:05:39.078Z","comments":true,"path":"2022/04/30/树形分治算法/","permalink":"https://starcried.github.io/2022/04/30/%E6%A0%91%E5%BD%A2%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/","excerpt":"","text":"点分治 点分治是一种树形分治的算法，它选择当前连通块一个重心，将树分成多个连通块进行处理，然后对每个连通块进行分治递归。 树的重心 树上的一个点，满足它的儿子的 \\(size\\) 的最大值最小。 可以证明，一个树有一个或者两个重心。若有两个重心，它俩一定是直接相连的。 处理问题 求树上给定路径联通的点的对数。我们发现将树分治后，形成了若干个连通块，而且这些连通块必定经过重心。那么我们就可以 \\(O(\\log n)\\)次地计算每一块之间的联通路径数。那么怎么计算呢？ 两两之间分别计算 利用容斥原理，在每一个分治中计算\\(sum_i^n\\) 编号计算 求树上给定路径到给定点的路径权和。对于每一个连通块，因为有连通块内部和到上一层重心两个距离，我们必须利用动态开点线段树 时间复杂度\\(O(n \\log^2 n)\\)。 点分树和动态点分树 点分树就是将每一层的重心与下一层的子树的所有重心连边所构成的树。 只能用来处理路径相关问题。 知识交叉——替罪羊树 替罪羊树是一个二叉平衡搜索树，它有一个阈值，一般为 \\(0.75\\)，当一个点的一个子树大小大于该树的大小乘以阈值，那么我们就把它拍扁暴力重构成新的树。 那么点分树有一个类似的阈值，当一个子连通块的大小大于上层树大小乘阈值，我们分治重构它。 当然，之所以会不平衡，是因为插入了新的点，进行了修改。 例题 捉迷藏 紫荆花之恋 震波 边分治 同样是对树进行分治，只不过这次是找一条边将左右两边分成两个连通块。 对于多子树点的处理 因为多子树点（比如菊花图）是无法直接进行边分治的，我们可以插入虚点和虚边构成二叉树解决。即边分二叉树。 虚点和虚边是没有贡献的，所以这样就可以保证答案正确。 插入虚点和虚边的方法是：给每个子节点连上虚点，然后给虚点之间连边，给第一个虚点向节点连边，于是就成了二叉树。 边分树 我们发现，每一层都分成了两个连通块，我们构建出一个点连接两个连通块，pushup 上子树的权值。 具体地，先对 \\(1\\) 树进行边分治，每个点初始的边分树是一条链，考虑对每个点构造出这个边分树。 开始只有根。根其实就是记录分治时候是在那个位置。定义连接分治重心 root 深度较小的连通块为右部点，另一个为左部点，保存每个点作为左部点还是右部点。然后在每个之前最后一个加入位置 lasti 下面加入左儿子或者右儿子。 在 lasti 位置保留这个信息 vl，vr。初始是 -inf。 左部点贡献权值：dis[x]； 右部点贡献：dis[x]-dis[lca]。 lca 一定在右部点。 其实这就是合并二叉树：\\(O(nlogn)\\) 次地合并，每次在分支处计算贡献，并只加上不重合的点。时间复杂度是和线段树合并类似的。 例题 《暴力写挂》 （以下代码来自某划水选手） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178#include &lt;bits/stdc++.h&gt;using namespace std;namespace TYC&#123; typedef long long ll; const int N = 366666 * 2 + 5, M = 20; const ll INF = 0x3f3f3f3f3f3f3f3fLL; int n, node_cnt, rot[N]; ll ans; struct edge &#123; int v, w; &#125;; struct node &#123; int son[2]; ll val; &#125; tr[N * M]; namespace T1 &#123; int tot, size[N], Head[N], now[N]; ll dis[N]; vector&lt;edge&gt; T[N]; struct Edge &#123; int to, next, w, vis; &#125; E[N &lt;&lt; 1]; inline void add(const int u, const int v, const int w) &#123; static int ec = 1; E[++ec] = &#123;v, Head[u], w, 0&#125;; Head[u] = ec; E[++ec] = &#123;u, Head[v], w, 0&#125;; Head[v] = ec; &#125; void buildtree(const int u, const int f) &#123; for (auto p : T[u]) if (p.v != f) &#123; dis[p.v] = dis[u] + p.w; buildtree(p.v, u); &#125; static vector&lt;edge&gt; son; son.clear(); for (auto p : T[u]) if (p.v != f) son.push_back(p); int sz = int(son.size()); if (!sz) return; for (int i = 0; i &lt; sz; i++) add(tot + i + 1, son[i].v, son[i].w); for (int i = 1; i &lt; sz; i++) add(tot + i, tot + i + 1, 0); add(u, tot + 1, 0); tot += sz; &#125; void build() &#123; tot = n; for (int i = 1, u, v, w; i &lt; n; i++) &#123; scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w); T[u].push_back(&#123;v, w&#125;); T[v].push_back(&#123;u, w&#125;); &#125; buildtree(1, 0); for (int i = 1; i &lt;= n; i++) rot[i] = now[i] = ++node_cnt; &#125; void getsize(const int u, const int f) &#123; size[u] = 1; for (int i = Head[u], v; i; i = E[i].next) if (!E[i].vis &amp;&amp; (v = E[i].to) != f) &#123; getsize(v, u); size[u] += size[v]; &#125; &#125; void getedge(const int u, const int f, const int sz, int &amp;p) &#123; for (int i = Head[u], v; i; i = E[i].next) if (!E[i].vis &amp;&amp; (v = E[i].to) != f) &#123; if (max(size[v], sz - size[v]) &lt; max(size[E[p].to], sz - size[E[p].to])) p = i; getedge(v, u, sz, p); &#125; &#125; void dfs(const int u, const int f, const ll d, const int c) &#123; if (u &lt;= n) &#123; tr[now[u]].son[c] = ++node_cnt; tr[now[u] = node_cnt].val = d + dis[u]; &#125; for (int i = Head[u], v; i; i = E[i].next) if (!E[i].vis &amp;&amp; (v = E[i].to) != f) dfs(v, u, d + E[i].w, c); &#125; void solve(const int x) &#123; getsize(x, 0); if (size[x] == 1) return; int p = 0, u, v; getedge(x, 0, size[x], p); E[p].vis = E[p ^ 1].vis = 1; dfs(u = E[p].to, 0, E[p].w, 0); dfs(v = E[p ^ 1].to, 0, 0, 1); solve(u); solve(v); &#125; &#125; namespace T2 &#123; ll res; vector&lt;edge&gt; E[N]; void update(const int x, const int y) &#123; if (x &amp;&amp; y) ans = max(ans, tr[x].val + tr[y].val - res); &#125; void merge(int &amp;x, const int y) &#123; if (!x || !y) return void(x = x + y); tr[x].val = max(tr[x].val, tr[y].val); update(tr[x].son[0], tr[y].son[1]); update(tr[x].son[1], tr[y].son[0]); merge(tr[x].son[0], tr[y].son[0]); merge(tr[x].son[1], tr[y].son[1]); &#125; void dfs(const int u, const int f, const ll d) &#123; ans = max(ans, (T1::dis[u] - d) * 2); for (auto p : E[u]) if (p.v != f) &#123; dfs(p.v, u, d + p.w); res = d * 2; merge(rot[u], rot[p.v]); &#125; &#125; void solve() &#123; for (int i = 1, u, v, w; i &lt; n; i++) &#123; scanf(&quot;%d%d%d&quot;, &amp;u, &amp;v, &amp;w); E[u].push_back(&#123;v, w&#125;); E[v].push_back(&#123;u, w&#125;); &#125; dfs(1, 0, 0); &#125; &#125; void work() &#123; scanf(&quot;%d&quot;, &amp;n); T1::build(); T1::solve(1); T2::solve(); printf(&quot;%lld\\n&quot;, ans &gt;&gt; 1); &#125;&#125;int main()&#123; TYC::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"点分治","slug":"点分治","permalink":"https://starcried.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"}]},{"title":"树链剖分","slug":"树链剖分","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T08:57:39.572Z","comments":true,"path":"2022/04/30/树链剖分/","permalink":"https://starcried.github.io/2022/04/30/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/","excerpt":"","text":"P3384 【模板】重链剖分/树链剖分 适用问题 对一个给定的树，维护（修改、查询）其节点点权/边权，操作可 \\(O(\\log n)\\) 次处理（如路径、子树）。 实现 将一棵树剖分成若干条链，每一条链通过区间数据结构维护。 将一个点的子树中最大的那个做为重儿子，其他的叫做轻儿子，对于所有点的重儿子连的链称为重链。我们将重链作为主链，将轻儿子构成的其他轻链加在重链的后面。很明显，对于每一条链，它的节点都是相连的（废话）。对于每一个子树，它的所有的节点都排在子树根的后面。 所以我们就把一个树成功地拆解成了一条链。 因为这条链有如上我所说的几个性质，题目要求如果是能在链上连续维护的（如求子树权值和，求任意两点间距离和），我们就可以用数据结构维护它了，比如线段树。 由于树的重心的性质，一次操作拆成了 \\(O(\\log n)\\) 次修改。 剖分部分 首先我们需要两次 dfs。 dfs1 用于建树，顺便记录每个节点的父亲 和 该点的深度 和 它的子树的大小 和 它的重儿子。 fa[] 父亲节点 dep[] 深度 siz[] 子树大小 son[] 重儿子（重儿子为子树大者） 12345678910111213void dfs1(int x,int f,int depth)&#123; siz[x]=1; dep[x]=depth; fa[x]=f; int maxson=-1; for(R int i=head[x];i;i=e[i].nxt) &#123; int u=e[i].to; if(u==f)continue; dfs1(u,x,depth+1); siz[x]+=siz[u]; if(siz[u]&gt;maxson)son[x]=u,maxson=siz[u]; &#125;&#125; dfs2 用于将一个树退化成链，记录节点在链的编号 和 节点的链首节点 和 链上节点的权值。 cnt 时间戳 id[] 编号 top[] 链首节点 a[] 原值 w[] 链上的值（便于维护） 1234567891011121314void dfs2(int x,int topf)&#123; id[x]=++cnt; w[cnt]=a[x]; top[x]=topf; if(!son[x])return; dfs2(son[x],topf); for(R int i=head[x];i;i=e[i].nxt) &#123; int u=e[i].to; if(u==fa[x]||u==son[x])continue; dfs2(u,u); &#125;&#125; 求两点间距离 要求两点间距离： 若两点在一条链上（top[x]==top[y]）我们直接求两点间的距离即可。 若两点不在一条链上，那么求更深的那个点 x 到此刻链首 top[x] 的距离，然后令 x=fa[top[x]]，即可将 x 更新到新链上。重复操作，每次只将深度更大的点向上更新。最终两点会处于同一条链（重链或轻链，最远是重链）上，然后再加上两点间的和就可以了。 用线段树维护。 12345678910111213141516inline int queryrange(int x,int y)&#123; int ans=0; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]])swap(x,y); res=0; st.query(1,id[top[x]],id[x]); ans=(ans+res)%mod; x=fa[top[x]]; &#125; if(dep[x]&gt;dep[y])swap(x,y); res=0; st.query(1,id[x],id[y]); ans=(ans+res)%mod; return ans;&#125; 更新两点间距离 和上面是一样的，分成若干条链更新就可以了。 12345678910inline void updaterange(int x,int y,int k)&#123; k%=mod; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]])swap(x,y); st.update(1,id[top[x]],id[x],k); x=fa[top[x]]; &#125; if(dep[x]&gt;dep[y])swap(x,y); st.update(1,id[x],id[y],k);&#125; 更新/查询子树权值（和） 如上，子树节点在链上一定是在根的后面并且连续的。 所以要更新以 x 为根节点的所有子树结点，就更新 id[x]~id[x]+size[x]-1 的范围即可。 模板 当然要根据题目需要做各种修改。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include&lt;bits/stdc++.h&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c)) w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=x*10+c-&#x27;0&#x27;,c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=1e5+10,maxm=1e5+10; int n,m,root,mod; int fa[maxn],dep[maxn],son[maxn],siz[maxn],top[maxn],dfn[maxn],a[maxn],w[maxn]; int ecnt,head[maxn],to[maxn&lt;&lt;1],nxt[maxn&lt;&lt;1]; inline void addedge(int a,int b)&#123; to[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt; to[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt; &#125; struct SegmentTree&#123; #define ls (ro&lt;&lt;1) #define rs (ro&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) int val[maxn&lt;&lt;2],tag[maxn&lt;&lt;2]; inline void pushup(int ro)&#123;val[ro]=(val[ls]+val[rs])%mod;&#125; inline void pushdown(int ro,int l,int r)&#123; tag[ls]+=tag[ro],val[ls]=(val[ls]+(mid-l+1)*tag[ro])%mod; tag[rs]+=tag[ro],val[rs]=(val[rs]+(r-mid)*tag[ro])%mod; tag[ro]=0; &#125; void build(const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(l==r) return val[ro]=w[l]%mod,void(); build(ls,l,mid),build(rs,mid+1,r); pushup(ro); &#125; void update(int x,int y,int k,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(x==l and y==r) return tag[ro]+=k,val[ro]=(val[ro]+k*(r-l+1))%mod,void(); if(tag[ro]) pushdown(ro,l,r); if(y&lt;=mid) update(x,y,k,ls,l,mid); else if(x&gt;mid) update(x,y,k,rs,mid+1,r); else update(x,mid,k,ls,l,mid),update(mid+1,y,k,rs,mid+1,r); pushup(ro); &#125; int query(int x,int y,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(x==l and y==r) return val[ro]; if(tag[ro]) pushdown(ro,l,r); if(y&lt;=mid) return query(x,y,ls,l,mid); if(x&gt;mid) return query(x,y,rs,mid+1,r); return (query(x,mid,ls,l,mid)+query(mid+1,y,rs,mid+1,r))%mod; &#125; #undef ls #undef rs #undef mid &#125;st; void dfs1(int x,int Fa)&#123; fa[x]=Fa,siz[x]=1,dep[x]=dep[Fa]+1; int mx=-1; for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=Fa)&#123; dfs1(u,x); siz[x]+=siz[u]; if(siz[u]&gt;mx) son[x]=u,mx=siz[u]; &#125; &#125; void dfs2(int x,int topf)&#123; w[dfn[x]=++dfn[0]]=a[x]; top[x]=topf; if(!son[x]) return; dfs2(son[x],topf); for(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa[x] and u!=son[x]) dfs2(u,u); &#125; inline void update(int x,int y,int k)&#123; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); st.update(dfn[top[x]],dfn[x],k); x=fa[top[x]]; &#125; if(dep[x]&gt;dep[y])swap(x,y); st.update(dfn[x],dfn[y],k); &#125; inline int query(int x,int y)&#123; int ans=0; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); ans=(ans+st.query(dfn[top[x]],dfn[x]))%mod; x=fa[top[x]]; &#125; if(dep[x]&gt;dep[y])swap(x,y); ans=(ans+st.query(dfn[x],dfn[y]))%mod; return ans; &#125; inline void work()&#123; n=read(),m=read(),root=read(),mod=read(); for(int i=1;i&lt;=n;i++) a[i]=read(); for(int i=1;i&lt;n;i++) addedge(read(),read()); dfs1(root,root),dfs2(root,root); st.build(); while(m--)&#123; int a,b,c; switch(read())&#123; case 1:&#123; a=read(),b=read(),c=read()%mod; update(a,b,c); break; &#125; case 2:&#123; printf(&quot;%d\\n&quot;,query(read(),read())); break; &#125; case 3:&#123; a=read(),b=read(); st.update(dfn[a],dfn[a]+siz[a]-1,b); break; &#125; case 4:&#123; a=read(); printf(&quot;%d\\n&quot;,st.query(dfn[a],dfn[a]+siz[a]-1)); break; &#125; &#125; &#125; &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"树链剖分","slug":"树链剖分","permalink":"https://starcried.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"}]},{"title":"求逆元","slug":"求逆元","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T07:14:46.512Z","comments":true,"path":"2022/04/30/求逆元/","permalink":"https://starcried.github.io/2022/04/30/%E6%B1%82%E9%80%86%E5%85%83/","excerpt":"","text":"逆元 求一个数的逆元，就是说这个数乘以它的逆元恰好等于1。在 \\(\\mathbb{Z}_p\\) 内，设 \\(a\\),\\(b\\) 互质，则 \\(a\\) 的逆元记作 \\(a^-1\\)，定义为 \\(b\\)，使得 \\(ab=1\\)。 \\(p\\) 是素数时，逆元唯一存在。 \\(p\\) 是合数时，逆元可能不存在。 求逆元 扩展欧几里得 适用于 \\(p\\) 不为素数的情况。 解方程组 \\(ax+py=1\\)，解得的 \\(x\\) 即为 \\(a\\) 的逆元。 费马小定理 费马小定理：若 \\(p\\) 为素数，则对于任意整数 \\(a\\)，有 \\[a^{p-1}\\equiv 1\\pmod p,\\] 那么 \\[a^{p-2}\\equiv a^{-1}\\pmod p.\\] 递推 inv[i]=(mod-mod/i)*inv[mod%i]%mod 1234567891011121314151617#include&lt;iostream&gt;using namespace std; int inv[20],n=10,MOD=7;int main()&#123; inv[1]=1; for(int i=2;i&lt;=n;i++) &#123; if(i&gt;=MOD)break; inv[i]=(MOD-MOD/i)*inv[MOD%i]%MOD; &#125; for(int i=1;i&lt;=n;i++) &#123; cout&lt;&lt;inv[i]&lt;&lt;&quot;\\n&quot;; &#125; return 0;&#125; 求阶乘的逆元 1234mul[0]=inv[0]=1;for(int i=1;i&lt;=n;i++) mul[i]=1ll*mul[i-1]*i%mod;inv[n]=fpow(mul[n],mod-2,mod); //这里 inv 表示的是阶乘的逆元for(int i=n-1;i&gt;0;i--) inv[i]=1ll*inv[i+1]*(i+1)%mod;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"笛卡尔树","slug":"笛卡尔树","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-14T12:19:42.272Z","comments":true,"path":"2022/04/30/笛卡尔树/","permalink":"https://starcried.github.io/2022/04/30/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91/","excerpt":"","text":"笛卡尔树 笛卡尔树（Cartesian tree）是一种树形数据结构，每个节点都是一个区间，树的根节点表示整个区间，左儿子表示区间的左半部分，右儿子表示区间的右半部分。 笛卡尔树可以通过单调栈 \\(O(n)\\) 静态建造。 例题 P2659美丽的序列 题意 找出一个序列的所有子段中子段长度乘段内元素最小值的最大值。 思路 我们需要找出所有子段中贡献最大的，并且一个子段的贡献为其长度乘区间最小值。 建出符合小根堆性质的笛卡尔树，递归所有点，更新答案即可。 因为这是一道裸题，所以我记录一下建笛卡尔树的模板。思路是用一个单调栈维护一下右链。 123456789// 建笛卡尔树for(int k,i=1;i&lt;=n;i++)&#123; k=top; while(k and a[st[k]]&gt;a[i])k--; if(k) rs[st[k]]=i,isrt[i]=1; if(k&lt;top) ls[i]=st[k+1],isrt[st[k+1]]=1; st[++k]=i; top=k;&#125; 实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;namespace star&#123; const int maxn=2e6+10; int n,a[maxn],ls[maxn],rs[maxn],st[maxn],top; long long ans; bool isrt[maxn]; void dfs(int x,int l,int r)&#123; ans=max(ans,1ll*a[x]*(r-l+1)); if(ls[x])dfs(ls[x],l,x-1); if(rs[x])dfs(rs[x],x+1,r); &#125; inline void work()&#123; n=read(); for(int i=1;i&lt;=n;i++) a[i]=read(); for(int k,i=1;i&lt;=n;i++)&#123; k=top; while(k and a[st[k]]&gt;a[i])k--; if(k) rs[st[k]]=i,isrt[i]=1; if(k&lt;top) ls[i]=st[k+1],isrt[st[k+1]]=1; st[++k]=i; top=k; &#125; int root=0; for(int i=1;i&lt;=n;i++) if(!isrt[i]) root=i; dfs(root,1,n); printf(&quot;%lld\\n&quot;,ans); &#125;&#125;signed main()&#123; star::work(); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"单调栈","slug":"单调栈","permalink":"https://starcried.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"}]},{"title":"模拟退火","slug":"模拟退火","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.582Z","comments":true,"path":"2022/04/30/模拟退火/","permalink":"https://starcried.github.io/2022/04/30/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/","excerpt":"","text":"算法介绍 模拟退火是一种最优化随机化算法。什么叫随机化算法？就是抽奖抽正解 一般用于求解最优解，即最优化问题，而且一般比较适合于小数据的最优解和大数据的近似最优解。 算法步骤 每次迭代都随机选择一个解，然后模拟退火得到该解的邻域最优解，如果邻域最优解比当前解更优，则接受该邻域最优解小，则更新当前解为该解。 模拟退火步骤如下： 先初始化温度，当前解和当前答案 如果温度小于最终温度，跳到第7步结束；否则跳3 重复执行4~5步若干次 由当前解生成一个临时的新解，并计算新的答案 判断是否接受该临时解，接受则更新解和答案，不接受则回退到上个解 降温，跳2 结束 对于差解的判断和当前温度有关，解越差我们越不想要它，接受它的概率就小一些；贪心往往会在开始的时候陷入局部最优解，我们就要在开始的时候跳出局部最优，也就是通过走向较差的解，所以开始的时候接受差解的概率要大一些；快结束的时候我们需要稳定在当前的最优解，接受差解的概率就小一些，所以我们模拟物理的退火原理，温度从高逐渐降低，对于接受差解概率的计算公式 e^(delta/T) 来说，新解答案的差异值为分子 delta，是个负数（如果正数取负就行），答案越差，delta 绝对值越大，指数越小，概率也越小；温度越低，指数越小，概率也越小，这就符合了我们求解的需要。 代码中定义如下： delta 表示退火的速度 eps 表示极低值。退火时是 tempetare*delta 当然达不到 0 T表示初始温度 srand(seed) 表示以 seed 为种子生成的随机数。引用于 cstdlib 库。当你想完全随机时可令 seed=time(0)，time() 函数引用于 ctime 库。生成完了后，用 rand() 得到这些值 exp(x) 表示 e^x，引用于 cmath 库 模拟退火的中心公式是在随机出的解差于最优解时，有一定几率跳出该解，并且这个几率会随着次数变小，即： rand()&lt;exp((ans-newans)/t) * RAND_MAX POJ 2420 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;ctype.h&gt;#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;ctime&gt;#include&lt;cmath&gt;#include&lt;utility&gt;#define eps 1e-10#define INF 1e19#define delta 0.98using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=2e5+10; typedef pair&lt;double,double&gt; pairr;pair &lt;double,double&gt; p[maxn];int dx[]=&#123;0,0,1,-1&#125;,dy[]=&#123;1,-1,0,0&#125;;inline double dist(pairr a,pairr b)&#123; return sqrt((a.first-b.first)(a.first-b.first)+(a.second-b.second)(a.second-b.second));&#125;inline double getsum(pairr p[],int n,pairr z)&#123; double ans=0; while(n--) ans+=dist(p[n],z); return ans;&#125;double search(pairr p[],int n)&#123; pairr s=p[0]; double t=100000; double ans=INF; while(t&gt;eps) &#123; bool flag=1; while(flag) &#123; flag=0; for(register int i=0;i&lt;4;i++) &#123; pairr z; z.first=s.first+dx[i]t; z.second=s.second+dy[i]t; double tp=getsum(p,n,z); if(ans&gt;tp)ans=tp,s=z,flag=1; &#125; &#125; t*=delta; &#125; return ans;&#125;int main()&#123; int n=read(); for(register int i=0;i&lt;n;i++)p[i]=make_pair(read(),read()); printf(&quot;%.0f&quot;,search(p,n)); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"随机化","slug":"随机化","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96/"}]},{"title":"类欧几里得算法","slug":"类欧几里得算法","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T06:34:11.033Z","comments":true,"path":"2022/04/30/类欧几里得算法/","permalink":"https://starcried.github.io/2022/04/30/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/","excerpt":"","text":"类欧几里得算法之所以得名是因为其算法复杂度证明与扩展欧几里得算法类似。 我认为类欧更偏向于是一种思想。 其主要思想就是寻找可以简便计算的边界，然后通过化式子将不同情况化为边界递归计算。 通过几个具体的例子，可以更好地理解其思想。 P5170 【模板】类欧几里得算法 推导 \\[ f(a,b,c,n)=\\sum_{i=0}^n \\lfloor\\frac{ai+b}{c}\\rfloor \\] \\[ g(a,b,c,N)=\\sum_{i=0}^N \\lfloor\\frac{ai+b}{c}\\rfloor^2 \\] \\[ h(a,b,c,N)=\\sum_{i=0}^N i\\lfloor \\frac{ai+b}{c}\\rfloor \\] \\[ f(a,b,c,N)=\\begin{cases}(N+1)\\lfloor\\frac{b}{c}\\rfloor&amp;a=0\\\\\\frac{N(N+1)}{2}\\lfloor\\frac{a}{c}\\rfloor+(N+1)\\lfloor\\frac{b}{c}\\rfloor+f(a\\bmod c,b\\bmod c,c,N)&amp;a\\ge c\\ or\\ b\\ge c\\\\NM-f(c,c-b-1,a,M-1),M=\\lfloor\\frac{aN+b}{c}\\rfloor &amp;otherwise\\end{cases} \\] \\[ g(a,b,c,N)=\\begin{cases}(N+1)\\lfloor\\frac{b}{c}\\rfloor^2&amp;a=0\\\\g(a\\bmod c,b\\bmod c,c,N)+2\\lfloor\\frac{a}{c}\\rfloor h(a\\bmod c,b\\bmod c,c,N)+2\\lfloor\\frac{b}{c}\\rfloor f(a\\bmod c,b\\bmod c,c,N)+\\frac{N(N+1)(2N+1)}{6}\\lfloor\\frac{a}{c}\\rfloor^2+N(N+1)\\lfloor\\frac{a}{c}\\rfloor\\lfloor\\frac{b}{c}\\rfloor+(N+1)\\lfloor\\frac{b}{c}\\rfloor^2&amp;a\\ge c\\ or\\ b\\ge c\\\\NM(M+1)-f(a,b,c,N)-2h(c,c-b-1,a,M-1)-2f(c,c-b-1,a,M-1)&amp;otherwise\\end{cases} \\] \\[ h(a,b,c,N)=\\begin{cases}\\frac{N(N+1)}{2}\\lfloor\\frac{b}{c}\\rfloor&amp;a=0\\\\h(a\\bmod c,b\\bmod c,c,N)+\\frac{N(N+1)(2N+1)}{6}\\lfloor\\frac{a}{c}\\rfloor+\\frac{N(N+1)}{2}\\lfloor\\frac{b}{c}\\rfloor&amp;a\\ge c\\ or\\ b\\ge c\\\\\\frac{1}{2}[MN(N+1)-g(c,c-b-1,a,M-1)-f(c,c-b-1,a,M-1)]&amp;otherwise\\end{cases} \\] 代码 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;tuple&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;const int mod=998244353;tuple&lt;int,int,int&gt; calc(long long a,long long b,long long c,long long n)&#123; int f,g,h,fn,gn,hn; if(!a)&#123; fn=(n+1)*(b/c)%mod; gn=(n+1)*(b/c)%mod*(b/c)%mod; hn=n*(n+1)%mod*((mod+1)&gt;&gt;1)%mod*(b/c)%mod; &#125;else if(a&gt;=c or b&gt;=c)&#123; tie(f,g,h)=calc(a%c,b%c,c,n); fn=(n*(n+1)%mod*((mod+1)&gt;&gt;1)%mod*(a/c)%mod+(n+1)*(b/c)%mod+f)%mod; gn=(n*(n+1)%mod*(2*n+1)%mod*((mod+1)/6)%mod*(a/c)%mod*(a/c)%mod+(n+1)*(b/c)%mod*(b/c)%mod+n*(n+1)%mod*(a/c)%mod*(b/c)%mod+2*(b/c)%mod*f%mod+g+2*(a/c)%mod*h%mod)%mod; hn=(n*(n+1)%mod*(2*n+1)%mod*((mod+1)/6)%mod*(a/c)%mod+n*(n+1)%mod*((mod+1)&gt;&gt;1)%mod*(b/c)%mod+h)%mod; &#125;else&#123; tie(f,g,h)=calc(c,c-b-1,a,(a*n+b)/c-1); fn=(n*((a*n+b)/c)%mod-f+mod)%mod; gn=(n*((a*n+b)/c)%mod*((a*n+b)/c+1)%mod-fn+mod-2*f%mod+mod-2*h%mod+mod)%mod; hn=(n*(n+1)%mod*((a*n+b)/c)%mod*((mod+1)&gt;&gt;1)%mod-f*((mod+1ll)&gt;&gt;1)%mod+mod-g*((mod+1ll)&gt;&gt;1)%mod+mod)%mod; &#125; return tie(fn,gn,hn);&#125;signed main()&#123; int T=read(),n,a,b,c,f,g,h; while(T--) n=read(),a=read(),b=read(),c=read(),tie(f,g,h)=calc(a,b,c,n),printf(&quot;%d %d %d\\n&quot;,f,g,h); return 0;&#125; P5171 Earthquake 题意 求满足 \\(ax+by⩽c\\) 的非负整数解的个数。 推导 \\[ y⩽\\left\\lfloor\\frac{c-ax}{b}\\right\\rfloor\\\\ ans=\\sum_{x=0}^{\\left\\lfloor\\frac{c}{a}\\right\\rfloor}\\left\\lfloor\\frac{c-ax}{b}\\right\\rfloor+1\\\\ =\\sum_{x=0}^{\\left\\lfloor\\frac{c}{a}\\right\\rfloor}\\left\\lfloor\\frac{c+(b-a)x}{b}\\right\\rfloor-x+1\\\\ (\\sum_{x=0}^{\\left\\lfloor\\frac{c}{a}\\right\\rfloor}\\left\\lfloor\\frac{c+(b-a)x}{b}\\right\\rfloor)-\\frac{\\left\\lfloor\\frac{c}{a}\\right\\rfloor(\\left\\lfloor\\frac{c}{a}\\right\\rfloor+1)}{2}+\\left\\lfloor\\frac{c}{a}\\right\\rfloor+1 \\] 代码 123456789101112131415161718192021222324#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#define int long longusing namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;long long f(long long a,long long b,long long c,long long n)&#123; if(!a) return (n+1)*(b/c); if(a&gt;=c or b&gt;=c) return n*(n+1)/2*(a/c)+(n+1)*(b/c)+f(a%c,b%c,c,n); return n*((a*n+b)/c)-f(c,c-b-1,a,(a*n+b)/c-1);&#125;signed main()&#123; int a=read(),b=read(),c=read(); if(a&gt;b)swap(a,b); printf(&quot;%lld\\n&quot;,f(b-a,c,b,c/a)-1ll*(c/a)*(c/a+1)/2+c/a+1);&#125; P5172 Sum 推导 \\[ ans=\\sum_{d=1}^n(-1)^{\\lfloor d\\sqrt r\\rfloor}\\\\=\\sum_{d=1}^n1-2(\\lfloor d\\sqrt r\\rfloor\\bmod 2)\\\\=\\sum_{d=1}^n1-2(\\lfloor d\\sqrt r\\rfloor-2\\lfloor \\frac{d\\sqrt r}2\\rfloor) \\] \\[ f(a,b,c,n)=\\sum_{d=1}^n\\lfloor\\frac{a\\sqrt r+b}{c}d\\rfloor \\] 当 \\(\\lfloor\\frac{a\\sqrt r+b}{c}\\rfloor\\ge1\\) 时， \\[ f(a,b,c,n)=\\sum_{d=1}^n\\lfloor\\frac{a\\sqrt r+b}{c}d\\rfloor\\\\=\\sum_{d=1}^n\\lfloor\\frac{a\\sqrt r+b-c\\lfloor\\frac{a\\sqrt r+b}{c}\\rfloor}{c}d+\\lfloor\\frac{a\\sqrt r+b}{c}\\rfloor d\\rfloor\\\\=\\sum_{d=1}^nf(a,b-c\\lfloor\\frac{a\\sqrt r+b}{c}\\rfloor,c,n)+\\frac 1 2n(n+1)\\lfloor\\frac{a\\sqrt r+b}{c}\\rfloor \\] 当 \\(\\lfloor\\frac{a\\sqrt r+b}{c}\\rfloor=0\\) 时, \\[ f(a,b,c,n)=\\sum_{d=1}^n\\lfloor\\frac{a\\sqrt r+b}{c}d\\rfloor\\\\=\\sum_{d=1}^n\\sum_{p=1}^{\\lfloor\\frac{a\\sqrt r+b}{c}n\\rfloor}[p\\le\\frac{a\\sqrt r+b}{c}d]\\\\=\\sum_{d=1}^n\\sum_{p=1}^{\\lfloor\\frac{a\\sqrt r+b}{c}n\\rfloor}[d\\ge\\frac{cp}{a\\sqrt r+b}]\\\\=\\sum_{p=1}^{\\lfloor\\frac{a\\sqrt r+b}{c}n\\rfloor} n-\\lfloor\\frac{cp}{a\\sqrt r+b}\\rfloor\\\\\\texttt{（无理数，大于等于与大于等价）}\\\\=\\lfloor\\frac{a\\sqrt r+b}{c}n\\rfloor n-\\sum_{p=1}^{\\lfloor\\frac{a\\sqrt r+b}{c}n\\rfloor}\\lfloor\\frac{c(a\\sqrt r -b)}{a^2r-b^2}p\\rfloor\\\\=\\lfloor\\frac{a\\sqrt r+b}{c}n\\rfloor n-f(ac,-bc,a^2r-b^2,\\lfloor\\frac{a\\sqrt r+b}{c}n\\rfloor) \\] \\[ ans=1-2f(1,0,1,n)+4f(1,0,2,n) \\] 代码 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cctype&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int w=0,x=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;double sr;int r;long long gcd(long long a,long long b)&#123;return b?gcd(b,a%b):a;&#125;long long f(long long a,long long b,long long c,long long n)&#123; if(!n) return 0; long long g=gcd(gcd(a,b),c);a/=g,b/=g,c/=g; long long k=(a*sr+b)/c; if(k) return f(a,b-c*k,c,n)+n*(n+1)/2*k; return (long long)((a*sr+b)/c*n)*n-f(a*c,-b*c,a*a*r-b*b,(long long)((a*sr+b)/c*n));&#125;signed main()&#123; int T=read(),n; while(T--)&#123; n=read(),r=read();sr=sqrt(r); if((int)sr*(int)sr==r) printf(&quot;%d\\n&quot;,((int)sr&amp;1)?-(n&amp;1):n); else printf(&quot;%lld\\n&quot;,n-2*f(1,0,1,n)+4*f(1,0,2,n)); &#125; return 0;&#125; P5179 Fraction 推导 \\[ f(a,b,p,q,c,d)\\begin{cases}q=1,p=\\left\\lfloor\\frac{a}{c}\\right\\rfloor+1&amp;\\left\\lfloor\\frac{a}{c}\\right\\rfloor+1⩽\\left\\lceil\\frac{c}{d}\\right\\rceil-1\\\\p=1,q=\\left\\lfloor\\frac{d}{c}\\right\\rfloor+1&amp;a=0\\\\ f(b,a,q,p,d,c)&amp;a⩽b \\and c⩽d\\\\f(a\\mod b,b,p,q,c-\\left\\lfloor\\frac{a}{b}\\right\\rfloor d,d),p=p+\\left\\lfloor\\frac{a}{b}\\right\\rfloor q&amp;a\\ge b\\end{cases} \\] 代码 12345678910111213#include&lt;cstdio&gt;using namespace std;void calc(long long a,long long b,long long &amp;p,long long &amp;q,long long c,long long d)&#123; if(a/b+1&lt;=(c+d-1)/d-1) p=a/b+1,q=1; else if(!a) p=1,q=d/c+1; else if(a&lt;=b and c&lt;=d) calc(d,c,q,p,b,a); else calc(a%b,b,p,q,c-a/b*d,d),p+=a/b*q;&#125;signed main()&#123; long long a,b,c,d,p,q; while(~scanf(&quot;%lld%lld%lld%lld&quot;,&amp;a,&amp;b,&amp;c,&amp;d)) calc(a,b,p,q,c,d),printf(&quot;%lld/%lld\\n&quot;,p,q); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"线性基","slug":"线性基","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-14T12:27:40.263Z","comments":true,"path":"2022/04/30/线性基/","permalink":"https://starcried.github.io/2022/04/30/%E7%BA%BF%E6%80%A7%E5%9F%BA/","excerpt":"","text":"定义 基：在线性代数中，基（也称为基底）是描述、刻画向量空间的基本工具。向量空间的基是它的一个特殊的子集，基的元素称为基向量。向量空间中任意一个元素，都可以唯一地表示成基向量的线性组合。如果基中元素个数有限，就称向量空间为有限维向量空间，将元素的个数称作向量空间的维数。 同样的，线性基是一种特殊的基，它通常会在异或运算中出现，它的意义是：通过原集合S的某一个最小子集S1使得S1内元素相互异或得到的值域与原集合S相互异或得到的值域相同。 上文来自百度百科。 个人理解，线性基的“线性”表示的是数列，即用一个数列表示另一个数列。而“基”表示的是一种类似于向量的思想。因为原数列中的每个数都是不同的，那么它们每个数就分别对应一些线性基的异或和——和向量的表示方式有异曲同工之处。 UPD 2024-8-14：实际上就是二进制异或基，不是异曲同工，就是一个曲儿。 大概理解了思想后，我们来理解它的构造。线性基是一个数列，其大小为原数列的最大数的二进制位数（所以是longlong的话大概最好开65位）。它的每一位是原数列中的一个数。有可能含有多个零。 线性基的性质 可以用线性基中任意个数异或和表示原数列中的所有数（或者说是原数列中任意数的异或和，表达其实是等价的） 线性基中的任意数的异或和不可能为0（除非你用0异或0，然而并不算做线性基内部的数） 线性基是满足性质1的最小集合 俺不会证明XD UPD 2024-8-14：这就是“基”的定义，详见线性代数。 线性基的构造 每插入一个数，我们从最高位向下遍历（注意这里是指二进制位数），找到第一个线性基上没有的插入并跳出，如果已经有数则与之异或（保证线性基的所有性质）： 12345678910inline void insert(ll x)&#123; for(ll i=62;i+1;i--)&#123; if(!(x&gt;&gt;i))continue; if(!p[i])&#123; p[i]=x; break; &#125; x^=p[i]; &#125;&#125; 线性基的应用 查询异或和最小值 最小值就是p的最小的值啦~因为它任意异或一个比它大的线性基的数一定都比它大。 查询异或和最大值 既然能由任何数异或得到原数列任意异或和的值，我们再次从上向下遍历，每异或后的值大于原答案，就取这个值。 1234567inline ll find()&#123; ll ans=0; for(ll i=63;i&gt;=0;i--) if((ans^p[i])&gt;ans) ans^=p[i]; return ans;&#125; 其他 保存历史信息可以做到删除。 基的大小只有 \\(O(\\log n)\\)，可以用该性质处理问题，比如用线段树维护线性基。","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线性代数","slug":"线性代数","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}]},{"title":"线性筛 欧拉筛","slug":"线性筛 欧拉筛","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T03:17:29.670Z","comments":true,"path":"2022/04/30/线性筛 欧拉筛/","permalink":"https://starcried.github.io/2022/04/30/%E7%BA%BF%E6%80%A7%E7%AD%9B%20%E6%AC%A7%E6%8B%89%E7%AD%9B/","excerpt":"","text":"线性筛 欧拉筛 线性筛（又称欧拉筛）是一种线性求素数的筛法，可以在 \\(O(n)\\) 的时间内找出 \\(n\\) 以内的所有素数。 线性筛的基本思想是，对于 \\(i\\) 从 \\(2\\) 到 \\(n\\) 的每个数，如果它不是素数，则枚举已筛出的每个素数，若其非 \\(i\\) 的因子，则将 \\(i\\) 乘上该素数的积标记为已被筛掉。直到枚举到 \\(i\\) 的最小质因子。这样，当 \\(i\\) 到 \\(n\\) 遍历完成时，所有没有被标记的数都是素数。并且每个数都被枚举到一遍。 线性筛的实现可以用一个数组 mark 标记是否被筛掉，用一个数组 prime 保存素数。 1234567891011121314int prime[maxl];bool mark[maxl];int tot;inline void oula()&#123; for(int i=2;i&lt;=maxl;i++) &#123; if(!mark[i])prime[++tot]=i; for(int j=1;j&lt;=tot and i+prime[j]&lt;=maxl;j++)&#123; mark[i*prime[j]]=1; if(i%prime[j]==0)break; &#125; &#125;&#125; 应用 根据欧拉筛的特点，每个合数只会被枚举到一次，被枚举到的时候已知其最小质因子。因此，我们可以同时求出积性函数的值。 积性函数：\\(f(n)\\) 满足 \\(f(1)=1\\) 且 \\(\\forall x,y\\in \\mathbb{N}^*,\\gcd(x,y)=1\\Rightarrow f(xy)=f(x)f(y)\\) 完全积性函数：\\(f(n)\\) 满足 \\(f(1)=1\\) 且 \\(\\forall x,y\\in \\mathbb{N}^*,\\Rightarrow f(xy)=f(x)f(y)\\) 欧拉函数 欧拉函数 \\(\\varphi (x)\\) 是 \\(x\\) 以内与 \\(x\\) 互素的数的个数。为积性函数。 若 \\(n\\) 是素数，\\(\\varphi(n)=n-1\\)。 若 \\(n\\) 等于质数 \\(p\\) 的 \\(k\\) 次幂，\\(\\varphi(n)=p^k-p^{k-1}=(p-1)p^{k-1}\\) 若要求单个数的phi值： BZOJ2705 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#define ll long longusing namespace std;ll n,ans;int m;ll phi(ll x)&#123; ll t=x; for(ll i=2;i&lt;=m;i++) if(x%i==0) &#123; t=t/i*(i-1); while(x%i==0)x/=i; &#125; if(x&gt;1)t=t/x*(x-1); return t;&#125;int main()&#123; scanf(&quot;%lld&quot;,&amp;n); m=sqrt(n); for(int i=1;i&lt;=m;i++) if(n%i==0) &#123; ans+=(ll)i*phi(n/i); if(i*i&lt;n)ans+=(ll)(n/i)*phi(i); &#125; printf(&quot;%lld&quot;,ans); return 0;&#125; 如要算出范围内所有的phi值： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;typedef long long ll;const int maxn=1e8;inline int read()&#123; int x=0;char c=getchar(); while(!isdigit(c))c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return x; &#125;int phi[maxn],prime[maxn&gt;&gt;1],tot,n,ans;bool mark[maxn];inline void oula()&#123; phi[1]=1; for(int i=2;i&lt;=n;i++) &#123; if(!mark[i]) &#123; prime[++tot]=i; phi[i]=i-1; &#125; for(int j=1;j&lt;=tot and i*prime[j]&lt;=n;j++) &#123; mark[i*prime[j]]=1; if(i%prime[j]==0)phi[i*prime[j]]=phi[i]*prime[j]; else phi[i*prime[j]]=phi[i]*(prime[j]-1); if(i%prime[j])break; &#125; &#125;&#125;int main()&#123; n=read()； int m=read(); oula(); while(m--)printf(&quot;%d\\n&quot;,prime[read()]); return 0;&#125; mobius函数 莫比乌斯函数 \\(\\mu(x)\\)： \\[ \\mu(x)=\\begin{cases} 0,&amp;\\frac x{p_1}\\mod p_1 = 0\\\\ -\\mu(\\frac x{p_1}) , &amp; \\text{otherwise} \\end{cases} \\] 其中 \\(p_1\\) 是 \\(x\\) 的最小质因子。 可以看出，若 \\(x\\) 有多个相同质因子，则 \\(\\mu(x)=0\\)。否则 \\(\\mu(x)=(-1)^r\\)，其中 \\(r\\) 是 \\(x\\) 的质因子个数。 约数个数和 根据算术基本定理，设数 \\(n\\) 的约数个数和为 \\(d_n\\)，有： \\[ n=\\prod_{p_i\\mid n, p_i\\mathrm{\\ is\\ a\\ prime}}p_i^{g_i}\\\\ d_n=\\prod g_i+1 \\] 要筛 \\(d\\) 我们还需要一个 \\(g\\) 来表示该数的最小素因子的数量，以便进行第二条转移。 \\(g_i=1,d_i=2\\)。 此时枚举数 \\(i\\) 的最小约数已经之前被更新过了并且一定是当前正在枚举的 \\(p\\) ，则 \\(g_{tmp}=g_i+1\\)。对于 \\(d_{tmp}\\)，根据上述公式，那我们就从 \\(d_i\\) 进行转移，更新最小约数的贡献，即除掉更改的贡献乘上正确的，即 \\(d_{tmp}=d_i*\\frac{g_{tmp}+1}{g_i+1}\\)。 此时枚举的 \\(p\\) 是最小的素因子，那么根据公式，\\(g_{tmp}=1,d_{tmp}=d_i*2\\)。 1234567891011121314d[1]=1;for(int i=2;i&lt;=n;i++)&#123; if(!mark[i]) p[++tot]=i,d[i]=2,g[i]=1; for(int j=1,tmp;j&lt;=tot and (tmp=i*p[j])&lt;=n;j++)&#123; mark[tmp]=true; if(i%p[j]==0)&#123; g[tmp]=g[i]+1; d[tmp]=d[i]/(g[i]+1)*(g[tmp]+1); break; &#125; g[tmp]=1; d[tmp]=d[i]*[g[tmp]+1]; &#125;&#125; 约数和 根据算术基本定理，已知 \\(\\sigma\\) 为约数和，有： \\[ \\sigma_n=\\prod_{p_i\\mid n, p_i\\mathrm{\\ is\\ a\\ prime}}\\sum_{j=0}^{a_i}p_i^j \\] 注意这里的 \\(a\\) 与上文的 \\(g\\) 表示意义相同，为每个素数的个数。我们定义 \\(g\\) 为最小的 \\(p\\) 的 \\(\\sum_{j=0}p^j\\)。 \\(g_i=\\sigma_i=i+1\\) 根据 \\(g\\) 的定义，我们要更新 \\(g\\) 就相当于给原来的 \\(g\\) 乘上 \\(p\\) 并加 1。对于 \\(\\sigma\\)，和上面的转移类似，我们从 \\(i\\) 转移即可。\\(\\sigma_{tmp}=\\sigma_i*\\frac{g_{tmp}}{g_i}\\)。 此时我们计算上一个新的质数的贡献即可，和上面类似。 代码中 \\(\\sigma\\) 用 \\(f\\) 代替。 1234567891011121314f[1]=1;for(int i=2;i&lt;=n;i++)&#123; if(!mark[i]) p[++tot]=i,g[i]=f[i]=i+1; for(int j=1,tmp;j&lt;=tot and (tmp=i*p[j])&lt;=n;j++)&#123; mark[tmp]=true; if(i%p[j]==0)&#123; g[tmp]=g[i]*p[j]+1; f[tmp]=f[i]/g[i]*g[tmp]; break; &#125; g[tmp]=p[j]+1; f[tmp]=f[i]*f[p[j]]; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"线段树懒标记","slug":"线段树懒标记","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T09:28:01.948Z","comments":true,"path":"2022/04/30/线段树懒标记/","permalink":"https://starcried.github.io/2022/04/30/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%87%92%E6%A0%87%E8%AE%B0/","excerpt":"","text":"懒标记 线段树要做到其 \\(O(\\log n)\\) 的更新和查询，就需要用到懒标记。 懒标记的作用是，当我们对线段树的某些节点（区间）进行更新时，我们并不立即更新这些节点的值，而是将这些更新操作延迟到下一次查询或更新时再进行。 洛谷已经为我们排好了对线段树的逐层深度学习XD P3372 【模板】线段树 1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int maxn=1e5,maxm=1e5;typedef long long ll;void read(int &amp;x)&#123; char c=getchar(); while(c&lt;&#x27;0&#x27; or c&gt;&#x27;9&#x27;)c=getchar(); x=c-&#x27;0&#x27;,c=getchar(); while(c&gt;=&#x27;0&#x27; and c&lt;=&#x27;9&#x27;)&#123; x*=10,x+=c-&#x27;0&#x27;,c=getchar(); &#125;&#125;int a[maxn*10];struct node&#123; ll l,r,sum,tag;&#125;e[maxn*6];int n,m,k;inline ll ls(ll ro)&#123;return ro&lt;&lt;1;&#125;inline ll rs(ll ro)&#123;return ro&lt;&lt;1|1;&#125;inline void push_up(ll ro)&#123; e[ro].sum=e[ls(ro)].sum+e[rs(ro)].sum;&#125;inline void push_down(ll ro)&#123; e[ls(ro)].sum+=e[ro].tag*(e[ls(ro)].r-e[ls(ro)].l+1); e[rs(ro)].sum+=e[ro].tag*(e[rs(ro)].r-e[rs(ro)].l+1); e[ls(ro)].tag+=e[ro].tag; e[rs(ro)].tag+=e[ro].tag; e[ro].tag=0;&#125;void build(ll ro,ll l,ll r)&#123; e[ro].l=l,e[ro].r=r; if(l==r) &#123; e[ro].sum=a[l]; return; &#125; e[ro].tag=0; ll mid=(l+r)&gt;&gt;1; build(ls(ro),l,mid); build(rs(ro),mid+1,r); push_up(ro);&#125;void update(ll ro,ll l,ll r)&#123; if(e[ro].l&gt;=l and r&gt;=e[ro].r) &#123; e[ro].sum+=k*(e[ro].r-e[ro].l+1); e[ro].tag+=k; return; &#125; push_down(ro); ll mid=(e[ro].l+e[ro].r)&gt;&gt;1; if(l&lt;=mid)update(ls(ro),l,r); if(r&gt; mid)update(rs(ro),l,r); push_up(ro); &#125;ll check(ll ro,ll l,ll r)&#123; if(l&lt;=e[ro].l and r&gt;=e[ro].r)return e[ro].sum; push_down(ro); int mid=(e[ro].l+e[ro].r)&gt;&gt;1; ll ans=0; if(l&lt;=mid)ans+=check(ls(ro),l,r); if(r&gt; mid)ans+=check(rs(ro),l,r); return ans;&#125;signed main()&#123; read(n);read(m); for(int i=1;i&lt;=n;i++) read(a[i]); build(1,1,n); int casee,l,r; for(int i=1;i&lt;=m;i++) &#123; read(casee); switch(casee) &#123; case(1):&#123; read(l);read(r);read(k); update(1,l,r); break; &#125; case(2):&#123; read(l);read(r); printf(&quot;%lld\\n&quot;,check(1,l,r)); break; &#125; &#125; &#125; return 0;&#125; P3373 【模板】线段树 2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int maxn=1e5;typedef long long ll;int n,m,p,a[maxn],k;struct tree&#123; ll l,r,val,add,tag;&#125;e[maxn*4];inline void read(int &amp;x)&#123; char c=getchar(); while(c&lt;&#x27;0&#x27; or c&gt;&#x27;9&#x27;)c=getchar(); x=c-&#x27;0&#x27;,c=getchar(); while(c&gt;=&#x27;0&#x27; and c&lt;=&#x27;9&#x27;)x*=10,x+=c-&#x27;0&#x27;,c=getchar();&#125;inline ll ls(int ro)&#123;return ro&lt;&lt;1;&#125;inline ll rs(int ro)&#123;return ro&lt;&lt;1|1;&#125;inline void lazy_add(ll ro)&#123; e[ls(ro)].add=(e[ls(ro)].add*e[ro].tag+e[ro].add)%p; e[rs(ro)].add=(e[rs(ro)].add*e[ro].tag+e[ro].add)%p;&#125;inline void lazy_tag(ll ro)&#123; e[ls(ro)].tag=(e[ls(ro)].tag*e[ro].tag)%p; e[rs(ro)].tag=(e[rs(ro)].tag*e[ro].tag)%p;&#125;inline void push_down(ll ro)&#123; e[ls(ro)].val=(e[ls(ro)].val*e[ro].tag+e[ro].add*(e[ls(ro)].r-e[ls(ro)].l+1))%p; e[rs(ro)].val=(e[rs(ro)].val*e[ro].tag+e[ro].add*(e[rs(ro)].r-e[rs(ro)].l+1))%p; lazy_tag(ro); lazy_add(ro); e[ro].add=0,e[ro].tag=1;&#125;inline void push_up(ll ro)&#123; e[ro].val=(e[ls(ro)].val+e[rs(ro)].val)%p;&#125;void build(ll ro,ll l ,ll r)&#123; e[ro].l=l,e[ro].r=r; e[ro].tag=1,e[ro].add=0; if(l==r)&#123;e[ro].val=a[l];return; &#125; int mid=(l+r)&gt;&gt;1; build(ls(ro),l,mid); build(rs(ro),mid+1,r); push_up(ro); e[ro].val%=p;&#125;void update_tag(ll ro,ll l ,ll r)&#123; if(e[ro].l&gt;=l and e[ro].r&lt;=r) &#123; e[ro].val=(e[ro].val*k)%p; e[ro].tag=(e[ro].tag*k)%p; e[ro].add=(e[ro].add*k)%p; return ; &#125; push_down(ro); int mid=(e[ro].l+e[ro].r)&gt;&gt;1; if(l&lt;=mid)update_tag(ls(ro),l,r); if(r&gt; mid)update_tag(rs(ro),l,r); push_up(ro);&#125;void update_add(ll ro,ll l,ll r)&#123; if(e[ro].l&gt;=l and e[ro].r&lt;=r) &#123; e[ro].add=(e[ro].add+k)%p; e[ro].val=(e[ro].val+k*(e[ro].r-e[ro].l+1))%p; return ; &#125; push_down(ro); int mid=(e[ro].l+e[ro].r)&gt;&gt;1; if(l&lt;=mid)update_add(ls(ro),l,r); if(r&gt; mid)update_add(rs(ro),l,r); push_up(ro);&#125;ll query(ll ro,ll l,ll r)&#123; if(e[ro].l&gt;=l and e[ro].r&lt;=r) return e[ro].val; push_down(ro); int mid=(e[ro].l+e[ro].r)&gt;&gt;1; int ans=0; if(l&lt;=mid) ans+=query(ls(ro),l,r); if(r&gt; mid) ans+=query(rs(ro),l,r); return ans%p;&#125;int main()&#123; read(n);read(m);read(p); for(int i=1;i&lt;=n;i++)read(a[i]); build(1,1,n); int casee,l,r; while(m--) &#123; read(casee); switch(casee) &#123; case(1):&#123; read(l);read(r);read(k); update_tag(1,l,r); break; &#125; case(2):&#123; read(l);read(r);read(k); update_add(1,l,r); break; &#125; case(3):&#123; read(l);read(r); printf(&quot;%lld\\n&quot;,query(1,l,r)); break; &#125; &#125; &#125; return 0;&#125; P6242 【模板】线段树 3 我不会XD","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线段树","slug":"线段树","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"线段树维护单调栈 单调递增序列","slug":"线段树维护单调栈 单调递增序列","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-14T12:20:21.954Z","comments":true,"path":"2022/04/30/线段树维护单调栈 单调递增序列/","permalink":"https://starcried.github.io/2022/04/30/%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8D%95%E8%B0%83%E6%A0%88%20%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/","excerpt":"","text":"线段树在维护区间时可以维护任何区间信息，比如，一个单调栈。 P4198 楼房重建 题意：维护全局最大上升序列大小。 更新 线段树当前节点存储整个区间的最大值，对于该题，左子树的区间答案可以直接继承，然后用左子树区间的最大值查询右子树的答案并记录在该节点上。 123456void update(const int &amp;x,const double &amp;k,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(l==r) return ans[ro]=1,mx[ro]=k,void(); x&lt;=mid?update(x,k,ls,l,mid):update(x,k,rs,mid+1,r); mx[ro]=max(mx[ls],mx[rs]); ans[ro]=ans[ls]+query(mx[ls],rs,mid+1,r);&#125; 其中，查询右区间比传的值大的节点个数的查询方式如下： 123456int query(const double &amp;k,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(mx[ro]&lt;=k) return 0; if(l==r) return mx[ro]&gt;k; if(mx[ls]&lt;=k) return query(k,rs,mid+1,r); else return query(k,ls,l,mid)+ans[ro]-ans[ls];&#125; P4425 转盘 维护后缀答案最小值。比较值为原序列，答案维护最小值。 123456void update(const int &amp;x,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(l==r) return mx[ro]=a[x],void(); x&lt;=mid?update(x,ls,l,mid):update(x,rs,mid+1,r); mx[ro]=max(mx[ls],mx[rs]); mn[ro]=query(mx[rs],ls,l,mid);&#125; 1234int query(const int &amp;k,const int &amp;ro=1,const int &amp;l=1,const int &amp;r=n)&#123; if(l==r) return mx[ro]&gt;k?k+l:INF; return k&lt;mx[rs]?min(mn[ro],query(k,rs,mid+1,r)):query(k,ls,l,mid);&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线段树","slug":"线段树","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"单调栈","slug":"单调栈","permalink":"https://starcried.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"}]},{"title":"莫队算法","slug":"莫队算法","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.590Z","comments":true,"path":"2022/04/30/莫队算法/","permalink":"https://starcried.github.io/2022/04/30/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/","excerpt":"","text":"莫涛大佬的知乎 莫队算法是一种暴力分块的算法，它能够减少移动次数提高效率。 使用需要转化在线算法为离线算法。具体见下方题目的题解。 P2709 小B的询问 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;ctype.h&gt;#include&lt;cmath&gt;using namespace std;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c))w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c))x=(x&lt;&lt;3)+(x&lt;&lt;1)+(c^48),c=getchar(); return w?-x:x;&#125;const int maxn=5e4+5;int numb[maxn],a[maxn];struct query&#123; int l,r,id,pos; long long ans; bool operator &lt; (const query&amp; zp) const &#123; return pos&lt;zp.pos||pos==zp.pos&amp;&amp;r&lt;zp.r; &#125; &#125;q[maxn];int n,m,k;long long Ans[maxn];long long ans;inline void update(int x,int sign)&#123; ans-=numb[a[x]]*numb[a[x]]; numb[a[x]]+=sign; ans+=numb[a[x]]*numb[a[x]];&#125;inline void solve()&#123; int l=1,r=0;//这个位置选得很好 //不必担心lr同加或者同减的状况，都会被记录并抵消 for(int i=1;i&lt;=m;i++) &#123; while(l&lt;q[i].l)&#123;update(l,-1);l++;&#125; while(l&gt;q[i].l)&#123;update(l-1,1);l--;&#125;//注意位置 while(r&lt;q[i].r)&#123;update(r+1,1);r++;&#125; while(r&gt;q[i].r)&#123;update(r,-1);r--;&#125; Ans[q[i].id]=ans; &#125;&#125;int main()&#123; n=read(),m=read(),k=read(); int size=sqrt(n); int cnt=n/size+(n%size)&gt;0; for(int i=1;i&lt;=n;i++) a[i]=read(); for(int i=1;i&lt;=m;i++) &#123; q[i]=(query)&#123;read(),read(),i&#125;; q[i].pos=(q[i].l-1)/size+1; &#125; sort(q+1,q+1+m); solve(); for(int i=1;i&lt;=m;i++)printf(&quot;%lld\\n&quot;,Ans[i]); return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"分块","slug":"分块","permalink":"https://starcried.github.io/tags/%E5%88%86%E5%9D%97/"}]},{"title":"读入、输出优化","slug":"读入、输出优化","date":"2022-04-29T16:00:00.000Z","updated":"2025-02-25T02:37:19.032Z","comments":true,"path":"2022/04/30/读入、输出优化/","permalink":"https://starcried.github.io/2022/04/30/%E8%AF%BB%E5%85%A5%E3%80%81%E8%BE%93%E5%87%BA%E4%BC%98%E5%8C%96/","excerpt":"","text":"关闭流同步 1std::ios::sync_with_stdio(false); 关闭输入输出流与标准输入输出（scanf printf）的同步，加快流速度，但关闭后不可混用。 整形快读 从标准输入流读入一个 int 12345678#include&lt;cctype&gt;#include&lt;cstdio&gt;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c)) w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=x*10+c-&#x27;0&#x27;,c=getchar(); return w?-x:x; &#125; template 读入整形 123456789101112template &lt;typename T&gt;inline T read()&#123; T x=0;int w=1;char c=getchar(); while(!isdigit(c))&#123;if(c==&#x27;-&#x27;)w=-1;c=getchar();&#125; while(isdigit(c))x=(x&lt;&lt;1)+(x&lt;&lt;3)+(c^48),c=getchar(); return x*w;&#125;int main()&#123; long long a; while(a=read&lt;long long&gt;())printf(&quot;%lld\\n&quot;,a); return 0;&#125; fread 快读 fread 快的原因好像是一次将一大堆东西压入输入流中然后利用指针读入。 12345678char buf[1&lt;&lt;21],*p1=buf,*p2=buf;#define getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c)) w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=x*10+c-&#x27;0&#x27;,c=getchar(); return w?-x:x;&#125; 注意，因为是一次性读入，在调试手动输入数据的时候记得加 Ctrl+Z 结束。 整形快输 输出一个整形 1234567inline void write(int x) &#123; static int sta[35],top; top=0; do &#123; sta[top++]=x%10,x/=10; &#125; while(x); while(top) putchar(sta[--top]+&#x27;0&#x27;);&#125; fwrite 快输 123456789101112131415char pbuf[1 &lt;&lt; 20], *pp = pbuf;inline void push(const char &amp;c) &#123; if (pp - pbuf == 1 &lt;&lt; 20) fwrite(pbuf, 1, 1 &lt;&lt; 20, stdout), pp = pbuf; *pp++ = c;&#125;inline void write(int x) &#123; static int sta[35]; int top = 0; do &#123; sta[top++] = x % 10, x /= 10; &#125; while (x); while (top) push(sta[--top] + &#x27;0&#x27;);&#125; 注意：与 fread 快读相同的原因，并不会实时输出。","categories":[{"name":"编程","slug":"编程","permalink":"https://starcried.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"C++","slug":"C","permalink":"https://starcried.github.io/tags/C/"}]},{"title":"费马小定理","slug":"费马小定理","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.591Z","comments":true,"path":"2022/04/30/费马小定理/","permalink":"https://starcried.github.io/2022/04/30/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/","excerpt":"","text":"费马小定理 对于任何互质数 \\(a,p\\),有 \\[ a^{p-1}=1\\pmod p \\] 应用 求逆元： \\[ a^{p-2}=a^{-1}\\pmod p \\]","categories":[{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"随机数生成","slug":"随机数生成","date":"2022-04-29T16:00:00.000Z","updated":"2025-02-25T02:36:48.413Z","comments":true,"path":"2022/04/30/随机数生成/","permalink":"https://starcried.github.io/2022/04/30/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/","excerpt":"","text":"我知道是伪随机数生成啦 可以用 srand(time(0)) 和 rand() 函数生成伪随机数。然而，这个方法生成的随机数效果不是很好，也没法指定生成范围。 下面的方法可以生成指定范围的随机数。如果修改分布，还可以得到符合特定分布的随机数。 mt19937 c++11 加入。 定义一个名叫 rd 的随机数生成器（括号内为种子）。 12mt19937 rd(std::chrono::system_clock::now().time_since_epoch().count());mt19937 rd(std::random_device&#123;&#125;()); uniform_int_distribution 定义一个名叫 rand 的整型随机分布（括号内为上下界）。 1uniform_int_distribution&lt;int&gt; rand(MN,MX); 实数随机分布为 uniform_real_distribution。 不知道尖括号内不填对应类型会发生什么。 存在正态分布等其他分布，请百度。 生成固定范围的随机整数 假设定义了如上定义的 rd 和 rand，使用方法为： 1rand(rd)","categories":[{"name":"编程","slug":"编程","permalink":"https://starcried.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"随机化","slug":"随机化","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96/"},{"name":"C++","slug":"C","permalink":"https://starcried.github.io/tags/C/"}]},{"title":"鞅的停时定理","slug":"鞅的停时定理","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-15T03:35:07.273Z","comments":true,"path":"2022/04/30/鞅的停时定理/","permalink":"https://starcried.github.io/2022/04/30/%E9%9E%85%E7%9A%84%E5%81%9C%E6%97%B6%E5%AE%9A%E7%90%86/","excerpt":"","text":"前言 该内容算法竞赛涉及不多，属于较深概率论内容。 鞅的停时定理 “鞅”，martingale 用来指一类随机过程，定义如下： 鞅是一种离散时间的随机过程 \\(X_0,X_1,\\cdots\\) 满足： \\(E(X_t)&lt;\\infty,\\forall t\\geq0\\) \\(E(X_{t+1}\\mid X_0,\\cdots X_t)=X_t\\) 根据定义可以得到 \\(E(X_t)=X_0\\)。 停时定理 设 \\(t\\) 为鞅过程 \\({X_0,X_1,\\cdots}\\) 的停时，当下面三个条件之一成立时，有 \\(E(X_t)=X_0\\)： \\(t\\) 几乎必然有界； \\(\\mid X_{i+1}-X_i\\mid\\) 一致有界，\\(E(t)\\) 有限； \\(X_i\\) 一致有界，\\(t\\) 几乎必然有限。 名词解释： \\(a\\in R\\cup{\\infty}\\) 有限：\\(\\mid a\\mid &lt;\\infty\\)； \\(a\\in R\\cup{\\infty}\\) 有界：\\(\\exists l,r\\in R,a\\in[l,r]\\)； \\(a_i\\in R\\cup{\\infty}\\) 一致有界：\\(\\forall i,\\exists l,r\\in R,a_i\\in[l,r]\\)； 事件 \\(A\\) 几乎必然发生：\\(P(A)=1\\)。 势能函数 对于随机时间序列 \\({A_0,A_1,\\cdots}\\)，\\(t\\) 为其停时，终止状态为 \\(A_t\\)，求 \\(E(t)\\)。 构造势能函数 \\(\\Phi(A)\\)，满足： \\(E(\\Phi(A_{n+1})-\\Phi(A_n)\\mid A_0,A_1,\\cdots,A_n)=-1\\)； \\(\\Phi(A_t)\\) 为常数。 构造序列 \\(X_i=\\Phi(A_i)+i\\)，则 \\(E(X_{n+1}-X_n\\mid X_0,X_1,\\cdots,X_n)=0\\)，即 \\({X_0,X_1,\\cdots}\\) 是鞅。 根据停时定理，我们可以得到 \\(E(X_t)=E(X_0)\\)，即 \\(E(t)=E(\\Phi(A_0))-\\Phi(A_t)\\)。 CF1479E School Clubs 题意 有 \\(n\\) 个学生和 \\(m\\) 个组，每个人在一个组里面，第 \\(i\\) 个组的人数为 \\(a_i\\)。 现在，每天有一个学生（\\(n\\) 个学生中随机的一个）会： 有一半的概率他会脱离这个组，并且成立一个新的组。 有一半的概率他会脱离这个组，并且进入一个已经成立的组。他进入第 \\(i\\) 个组的概率为 \\(\\frac {a_i} n\\)，他可能会回到原来的组。 求第一次出现所有学生在同一个组的期望天数，对 \\(998244353\\) 取模。 \\(n\\leq 4\\times10^8\\) 思路 设 \\(\\phi(A)\\) 为状态 \\(A\\) 的势能，构造使得 \\(\\phi(A_t)-1=\\phi(A_{t+1})\\)，设 \\(f(x)\\) 为学生数量为 \\(x\\) 的组的势能函数，则有： \\[ \\begin{aligned}\\phi(A_t)-1&amp;=\\phi(A_{t+1})\\\\ \\phi(A_t)-1&amp;=\\sum_i\\frac {a_i}n(\\frac 12(\\phi(A_t)-f(a_i)+f(a_i-1)+f(1))+\\frac{a_i}{2n}\\phi(A_t)+\\sum_{j\\ne i}\\frac {a_j}{2n}(\\phi(A_t)-f(a_i)-f(a_j)+f(a_i-1)+f(a_j+1)))\\\\ -1&amp;=\\sum_i\\frac {a_i}{2n}(-f(a_i)+f(a_i-1)+f(1)+\\sum_{j\\ne i}\\frac {a_j}{n}(-f(a_i)-f(a_j)+f(a_i-1)+f(a_j+1)))\\\\ -1&amp;=-\\sum_i\\frac {a_i}{2n}f(a_i)+\\sum_i\\frac {a_i}{2n}f(a_i-1)+\\sum_i\\frac {a_i}{2n}f(1)-\\sum_i\\frac {a_i}{2n}\\sum_{j\\ne i}\\frac {a_j}{n}f(a_i)-\\sum_i\\frac {a_i}{2n}\\sum_{j\\ne i}\\frac {a_j}{n}f(a_j)+\\sum_i\\frac {a_i}{2n}\\sum_{j\\ne i}\\frac {a_j}{n}f(a_i-1)+\\sum_i\\frac {a_i}{2n}\\sum_{j\\ne i}\\frac {a_j}{n}f(a_j+1)\\\\ -\\sum_i\\frac{a_i}n&amp;=\\sum_i\\frac {a_i}{2n}f(1)-\\sum_i\\frac {3na_i-2a^2_i}{2n^2}f(a_i)+\\sum_i\\frac {2na_i-a^2_i}{2n^2}f(a_i-1)+\\sum_i\\frac {na_i-a^2_i}{2n^2}f(a_i+1)\\\\ -\\frac xn&amp;=\\frac x{2n}f(1)-\\frac{3nx-2x^2}{2n^2}f(x)+\\frac{2nx-x^2}{2n^2}f(x-1)+\\frac{nx-x^2}{2n^2}f(x+1)\\\\ \\end{aligned} \\] 因为我们需要的只是初始状态与停时的势能差，那么将势能具体设为什么都无所谓，所以为了消去常数项我们可以设 \\(f(1)=-2\\)，则： \\[ \\begin{aligned}0&amp;=-\\frac{3nx-2x^2}{2n^2}f(x)+\\frac{2nx-x^2}{2n^2}f(x-1)+\\frac{nx-x^2}{2n^2}f(x+1)\\\\ f(x+1)&amp;=\\frac {2n^2}{nx-x^2}(\\frac{3nx-2x^2}{2n^2}f(x)-\\frac{2nx-x^2}{2n^2}f(x-1))\\\\ f(x+1)&amp;=\\frac{3n-2x}{n-x}f(x)-\\frac{2n-x}{n-x}f(x-1)\\\\ \\end{aligned} \\] 发现 \\(\\phi(A_t)=f(n)\\) （表示局面为只有一个人数为 \\(n\\) 的组）是个常数（知道 \\(f(0)\\) 和 \\(f(1)\\) 可以被表示），那么可以用停时定理。 观察数据范围发现没法存下线性求逆元，也没法每次快速幂求。那怎么办呢？ 官方题解的做法将 \\(f\\) 进行差分然后利用快速阶乘算法计算，即： \\[ \\begin{aligned}g(x)=f(x+1)-f(x)\\\\ g(x)=\\frac{2n-x}{n-x}g(x-1)\\\\ g(x)=g(0)\\prod_{i=1}^x\\frac{2n-i}{n-i}\\\\ f(x)=-2\\sum_{i=0}^{x-1}\\prod_{j=1}^i\\frac{2n-j}{n-j} \\end{aligned} \\] 实际上我们可以直接对对于这个式子 \\(f(x+1)=\\frac{3n-2x}{n-x}f(x)-\\frac{2n-x}{n-x}f(x-1)\\) 线性递推。因为我们要求的是 \\(E(\\phi(A_t))\\) 和 \\(\\phi(A_0)=\\sum_if(a_i)\\)，所以我们只在算 \\(m\\) 个 \\(f(a_i)\\) 和 \\(f(n)\\) 的时候快速幂，递推的时候分别维护分子和分母即可。如果你拥有优秀的常数即可通过。 代码 123456789101112131415161718192021222324252627#include&lt;cstdio&gt;#include&lt;algorithm&gt;inline int read()&#123; int x=0,w=0;char c=getchar(); while(!isdigit(c)) w|=c==&#x27;-&#x27;,c=getchar(); while(isdigit(c)) x=x*10+(c^48),c=getchar(); return w?-x:x;&#125;const int mod=998244353;inline int pow(int a,int b)&#123;int ans=1;for(;b;b&gt;&gt;=1,a=1ll*a*a%mod) if(b&amp;1) ans=1ll*ans*a%mod; return ans;&#125;int n,m,a[1010];signed main()&#123; m=read(); for(int i=1;i&lt;=m;i++) n+=a[i]=read(); std::sort(a+1,a+m+1); int ans=0; int s1=0,d1=mod-2,s2=1,d2=1,p1,p2,j=1; while(j&lt;=m&amp;&amp;a[j]==1)ans=(ans+mod-2)%mod,++j; for(int i=1;i&lt;n;i++)&#123; p2=1ll*(n-i)*d2%mod*s2%mod; p1=((3ll*n-2*i)*d1%mod*s2+(mod-1ll)*(2ll*n-i)%mod*s1%mod*d2)%mod; while(j&lt;=m&amp;&amp;a[j]==i+1)ans=(ans+1ll*p1*pow(p2,mod-2))%mod,++j; s1=d1,s2=d2,d1=p1,d2=p2; &#125; printf(&quot;%lld\\n&quot;,(ans+(mod-1ll)*d1%mod*pow(d2,mod-2))%mod); return 0;&#125;","categories":[{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"高斯消元求行列式","slug":"高斯消元求行列式","date":"2022-04-29T16:00:00.000Z","updated":"2024-08-13T02:32:21.593Z","comments":true,"path":"2022/04/30/高斯消元求行列式/","permalink":"https://starcried.github.io/2022/04/30/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E6%B1%82%E8%A1%8C%E5%88%97%E5%BC%8F/","excerpt":"","text":"前言 我原在博客园上发表的这篇文章是阅读排行榜最高的一篇。然而，作为一个刚学竞赛的学生写的东西，它的质量实在堪忧。行列式又是一个及其重要、基础和困难的概念，无论对于大学数学还是高中竞赛。因此，我决定将这篇文章重新编辑，以便更好地帮助学习的人。 如果你想知道行列式是什么，强烈建议先去学习线性代数基础知识，了解什么是向量、矩阵、线性变换以及会用矩阵描述线性方程组，然后认真理解学习行列式的概念。千万不要从形式上（如计算）学习行列式，而是要先理解它。 由于概念部分较深入，本文不会对线性代数的基础知识做过多介绍，而是着重于行列式的计算。 行列式 定义 行列式（Determinant）是一个线性代数里的数学概念。它可以被看做是有向面积或体积的概念在一般的欧几里得空间中的推广。或者说，在 n 维欧几里得空间中，行列式描述的是一个线性变换对“体积”所造成的影响。 形式上讲，行列式是一个函数，接受一个矩阵作为输入，输出一个标量。对于一个\\(n\\times n\\)的矩阵\\(A\\)，它的行列式的值记为： \\[\\det(A)=\\begin{vmatrix}a_{11} &amp; a_{12} &amp; \\cdots &amp; a_{1n}\\\\a_{21} &amp; a_{22} &amp; \\cdots &amp; a_{2n}\\\\\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\a_{n1} &amp; a_{n2} &amp; \\cdots &amp; a_{nn}\\end{vmatrix}\\] 其中\\(a_{ij}\\)表示矩阵\\(A\\)的第\\(i\\)行第\\(j\\)列元素。 行列式的定义有很多种。以下是一个通过展开式的定义： 设 \\(R\\) 是交换环，\\(A = (a_{i, j})\\) 是 \\(R\\) 上的 \\(n \\times n\\) 矩阵。则 \\(A\\) 的定义为 \\[ \\det (A) = \\sum_{\\sigma \\in \\mathfrak{S}_n} (-1)^{\\sigma} \\, a_{1, \\sigma(1)} \\cdots a_{n, \\sigma(n)}, \\] 其中 \\(\\mathfrak{S}_n\\) 是 \\(n\\) 元置换群，\\((-1)^\\sigma\\) 是 \\(\\sigma\\) 的符号（偶置换为 \\(+1\\), 奇置换为 \\(-1\\)）。 仅从如上定义我们无法知道如何计算行列式。除了二阶、三阶行列式可以快速计算外，一般的行列式的计算需要借助于高斯消元法。该方法需要用到一些行列式的性质。 性质 行列式与其转置行列式值相等。 交换行列式的两行，行列式的值取相反数。 行列式的某一行乘以一个数，行列式的值乘以这个数。 行列式的某一行乘以一数加到另一行上，行列式不变。 以上结论都可以由其定义推出。 高斯消元法 高斯消元法（Gauss Elimination）是一种数值计算方法，它可以用来求解线性方程组和行列式。其基本思想是将矩阵化简为上三角矩阵，然后化为对角矩阵。化简的基本操作是将一行减去另一行乘以一个非零数，使得本行某一列的元素被消为 0。时间复杂度为 \\(O(n^3)\\)。 以下为数据为浮点数时的代码。若有模数，求逆元即可。 12345678910111213141516double Gauss()&#123; double ans=1; for(int i=1;i&lt;=n;i++)&#123; int x=0; for(int j=i;j&lt;=n and !x;j++) if(a[j][i]) x=j; if(!x) return (void)puts(&quot;No Solution&quot;); if(a[i]!=a[x]) swap(a[i],a[x]),ans=-ans; for(int j=1;j&lt;=n;j++) if(j!=i)&#123; double tmp=a[j][i]/a[i][i]; for(int k=i;k&lt;=n+1;k++) a[j][k]-=a[i][k]*tmp; &#125; ans*=a[i][i]; &#125; return ans;&#125; 若模数不为质数，也可以通过辗转相除法消元。 123456789101112131415long long Gauss(int n)&#123; long long ans=1; for(int i=1;i&lt;=n;i++)&#123; for(int j=i+1;j&lt;=n;j++)&#123; while(a[j][i])&#123; long long t=a[i][i]/a[j][i]; for(int k=i;k&lt;=n;k++) a[i][k]=(a[i][k]-t*a[j][k]%mod+mod)%mod; swap(a[i],a[j]); ans=-ans; &#125; &#125; ans=(ans*a[i][i]%mod+mod)%mod; &#125; return ans;&#125;","categories":[{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/categories/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"线性代数","slug":"线性代数","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}]},{"title":"结局","slug":"结局","date":"2022-04-26T12:25:00.000Z","updated":"2025-02-24T07:20:00.457Z","comments":true,"path":"2022/04/26/结局/","permalink":"https://starcried.github.io/2022/04/26/%E7%BB%93%E5%B1%80/","excerpt":"","text":"我不知道我看到我没通过审核之后的感觉是怎样的。很复杂。 我感到很不真实。因为明明没有收到电话。我第一反应是搞错了。 但那冷冰冰的文字就在那。我读了一遍又一遍，它就在那。班主任也看到了。他们都看到了。传开了了。 “快让学生查下结果，有个学生没接到电话被拒绝了。” 我感到气愤。因为清华甚至没有前天给我打电话。 我感到失望。因为这落差实在太大了。 我前天还在为其他被拒绝的学生鸣不平。我以为能够成为那幸运上岸的人。然而胜利就在眼前，我却被干掉了。 没有什么橄榄枝。即使之前也许有，也被我挥霍完了。 我靠在班主任的椅子上面。老师们早就见多了这样的事。大航早就说过，“成绩还是很重要的吧”。 即使做了这么长时间的思想准备，想到一万种宽慰自己的理由，当我真正面对它时，却是脑袋空空，什么都想不到。就像被重击了一样。 即使我有多么希望到达清华门，结局就在这里。 清华。慧眼识珠。一眼就看出来我不是能为祖国工作 50 年的人。我以为我能瞒骗过去的。 只能说演得太假。 我曾经想，现在努力叠 Buff，为我之后的梦想生活进行原始积累。我从未想过就这么在大学一直读上去，就业，成家，安定。我想我能冲破这个道路。 但是现在我看不到那种生活的曙光。我可能会被困在积累这一步无法前行。 那种生活不是为我准备的。我却在一直追求它。就像我追求清华一样。这就是追求的结果。 这就是他妈的生命。 可是还得找学上。他们问我，想去哪个学校，到哪个城市，学什么专业。这些都是我从未想过的事情。我原本以为我不用考虑它们。但是，突然，它们，突然就全部向我蜂拥而来。 我从未想过。一直以来，我都只是在学习。单纯地学习。没有目的的学习。为了更好的生活。从没想过什么事业。专业，感觉就像，我一选择就要花费大半生的时间奉献的东西。太可怕了。我好像对研究没有什么热情。也许，早早出来就业吧？那种固定的工资、假期、工作位置的职业。工作，交养老金，养儿育女，死去。或许还像其他中国家长一样希望子女完成自己未竟的事业。这太可怕了。 唉，妈的，本来不想再在这个学校流泪了，还是没憋住。算了，流吧，再流不了几次了。 花了几乎整个下午的时间在机房整理心绪。和许多人聊天。看看自己之前的文字。我的理性和感性在拉扯。实际上并没有那么糟，我还有银牌，还能报其他学校，文化课也不差。甚至，还有人对我说，还有高考。 “我相信奇迹。” 我相信奇迹吗？相信。在今天之前，我能到达这一步，就已经是奇迹了。正如我之前说的，从没有人要求我上清华，一直以来都是我自己在执着着，却又不想动。我最大的敌人就是我自己。现在，整理心态，备战高考，也是我与自己的战斗。但要是说，还有最后一丝希望，高考裸考上清华，这几乎是虚无缥缈的事情了。这是真的奇迹。而奇迹不会太多次降临到一个人身上。不过，相信这个奇迹似乎是一个调整心态的很好的方法。 一个珍贵的生日礼物。清华送给我的。我会在人生的道路上好好珍藏它。 之前打的许多赌，比如说退网什么的，我会一一兑现。或许还可能得到一份同学的《鹤冲天·黄金榜上》： 黄金榜上/偶失龙头望……才子词人/自是白衣卿相…… 我从此会踏上人生的另一条道路。虽然这条道路前途未卜。但就像之前的每一件事。 勇敢是：当你还未开始就已知道自己会输，可你仍然要去做，而且无论如何都要把它坚持到底。你很少能赢，但有时也会。 ——《杀死一只知更鸟》 经历了这么多，我还是我。我也没有因为自己选择竞赛而后悔。我欣赏到了沿途的风景。而这，就足够了。 那么这就是结局了。一个花费了高中一年时间学信息学竞赛的学生的结局。在他 18 岁生日的前几天。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"日记 2022-04-20","slug":"日记-2022-04-20","date":"2022-04-20T14:14:00.000Z","updated":"2025-02-24T07:22:45.633Z","comments":true,"path":"2022/04/20/日记-2022-04-20/","permalink":"https://starcried.github.io/2022/04/20/%E6%97%A5%E8%AE%B0-2022-04-20/","excerpt":"","text":"一个熟悉的陌生人。 昨天凌晨，他去世了。 只是一个网友。或者，不能称之为“友”。仅仅是在群里面聊天，因为他搞科研所以注意到他。这在一个小众圈子的群里面比较稀有。之后了解到，他好像是进行核物理方面的研究。因为一些原因对他有一种亲切感。当然，看起来在群里面大家也对他挺亲切的。 有一次水群对高考的事情发牢骚，于是聊了几句。他说，他是上交出来的，高考考了 680 多分。然后，简单地说要加油。 几句普通的对高三学生的鼓励。但是他是我少见到的几位近人的科研人，而且是同好。不知为何，当时就暗暗下决心自己也要考到 680 分以上。明明也不怎么认识。当然也不想去证明什么。就是单纯想，想和他一样，去成为和他一样的人。 今天刚考完试，当然仍然考砸了。最近因为强基的事心里很烦，经过学长的开导，现在已经可以接受去复旦之类的结果了。不想学习，于是到机房。无聊地浏览着空间的说说。然后，看到他的讣告。 心脏衰竭，于美国去世。 好突然。一个科研的灵魂就这么突然消逝。我甚至没有了机会告诉他我的高考分数。可是，我会告诉他吗？假如他没有过世，我在高考结束后能给他说出我梦想的成绩吗？ 可是，无论我是否会告诉他，他也没有机会听到了。 我是幸运的。今天下午和同学交谈，我说，人活着就是最大的快乐。 无论他是否还在，我还有机会去改变我的未来。我还有机会…… “要加油。” 一个熟悉的陌生人。愿他安息。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"《时间简史》初读后感","slug":"《时间简史》初读后感","date":"2022-04-15T13:49:00.000Z","updated":"2025-06-23T03:26:50.863Z","comments":true,"path":"2022/04/15/《时间简史》初读后感/","permalink":"https://starcried.github.io/2022/04/15/%E3%80%8A%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2%E3%80%8B%E5%88%9D%E8%AF%BB%E5%90%8E%E6%84%9F/","excerpt":"","text":"细菌性痢疾让我有机会一瞥史蒂芬霍金博士的这本科普著作。这本书是我初中时买的，当时读不懂便放下。然而此时再读时，霍金博士已经逝世了。 这是一本惊人的科普著作。所谓科普，就是让读者了解最基本和他们最关心的知识，而忽略晦涩难懂复杂冗长的细节。虽然霍金博士的幽默风趣对我的阅读很有帮助，但由于他所阐释的内容本身，以及译者显然为了不曲解原意而导致的晦涩的直译，致使我在现有知识储备下并无法完全理解其中的全部内容。 因此，我只不过是在极短的时间内对本书做了大体浏览，所以一定只是初读——如果之后还有机会再读的话。在阅读的过程中，我几乎可以说是手不释卷，不仅因为它回答了我许多困扰已久的问题，更因为我发现几乎所有我之前自己有关宇宙和时间的猜想都是前人已经提出和研究过的，以至于我在读完此书之后，我会怀疑在读此书之前的我已经读过此书。这使我大为欣喜又有些失落——毕竟我不是那种仅靠一颗脑袋就能得到世界真理的“纯理论学家”（只用思考而不去实验验证就能获得宇宙原理好像是亚里士多德的主张）。读此书为我搭建了构造物理理论时正确的研究方法，我觉得这是颇为重要的。人们可以提出各种各样的理论，即使都无法证明自己是正确的，可是能够使人们更加信服、使理论更加完善的工作过程却是广为接受的。 至于书中关于广义相对论、量子引力论、宏观宇宙、微观宇宙、宇宙的起源和未来、奇点、黑洞以及各种理论等具体内容，我就不再赘述，因为我自己也未完全理解，即使要写也是原话照搬。除了认同，我能得到的感觉就是自己的无知和对知识的渴望。不过，我不太认同人类——智慧生物在某些地方的重要性，以及认为人类具有不确定性的主张。我认为人类具有、至少在某种程度上具有决定性。也就是说，上帝在造我们的时候就已经知道我们会对自己从何而来产生疑问。不过由于人存原理，我对这样论断的产生并不意外。这不是过于谦虚，而是我觉得拉普拉斯妖完全足以掌握人类。 最后我想，读完此书对于我现实生活的影响可能会导致两个极端：一种是我认为我现在的所学毫无意义，一种是我觉得现在这么简单的东西我都无法掌握，我就更没有资格去谈论宇宙了。现在看来，我似乎更倾向于后一种，因为可以从我从过去的学习中得到能理解《时间简史》的知识的历史得到支持。不过谁也无法通过统计学来预言。到底如何，还需要两个月后进行观测。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"点评","slug":"点评","permalink":"https://starcried.github.io/tags/%E7%82%B9%E8%AF%84/"}]},{"title":"傻子","slug":"傻子","date":"2022-04-15T10:56:00.000Z","updated":"2025-02-24T07:23:39.981Z","comments":true,"path":"2022/04/15/傻子/","permalink":"https://starcried.github.io/2022/04/15/%E5%82%BB%E5%AD%90/","excerpt":"","text":"小时候有一位同学，和我幼儿园是一个班的。他和常人不太一样。母亲说，他是傻子。但我记得，除了走路踢正步，没事总是憨笑着，他和其他小朋友没有什么区别：挨骂会哭，挨夸会笑，虽然后者不太常见就是了。 到小学也是一个学校的，而且在一个托管班。我逐渐开始发现他的举止确实是傻了。不过他也不太招惹谁，我也不很注意。实际上，何止是不招惹，简直就是逆来顺受。印象里他总是一副忸怩的样子，谁都欺负他，老师也不喜欢他，成绩就更不用说了。有一次考试后他的爷爷来托管班，我清楚地记得他见到他爷爷后的——震悚，恰如其分，因为他爷爷上来就是一顿狠打，老师都拉不住。他哭得惊天动地。听母亲说，他的父母不管他，把包袱扔给了爷爷。爷爷不会教育，只是打，打得不明所以，甚至我觉得都不是为了教育而打，只是打。 一个傻子。没有家庭。我想，他怎么办呢？他又何去何从？如果有人养他，他也许还能做一个傻子乐呵地过完一生，可是他却成天担惊受怕。可怜的人。如果他能活着便是个奇迹，我想。 有一次，我在托管班等父母等得比较晚，人几乎都走光了。闲来无事，我瞥见桌子上一份破破烂烂的卷子。拿来一看，确实写的是他的名字。他还会写自己的名字，我感到一点惊讶，看来他还不是完全傻。然后我马上看到了更令人惊讶的事：整篇卷子一道题都没答，唯一有字迹的地方只有卷首。在他潦草名字旁边的“成绩”一栏里，用铅笔填着同样潦草的“100”。而在它的正上方，是一个用红笔写的、端端正正的、血淋淋的“0”。红笔迹清晰地覆盖在铅笔迹之上。 这个“100”显然是他考试时除了写自己名字之外唯一做的一件事。他完全知道自己在做什么。他知道自己为什么挨打、为什么被人欺负、为什么被老师看不起，都是因为自己没能得到用红笔写的“100”。我不知道他是否完全知道原因。但我知道，他无数次地看到自己的同学们捧着三位数和两位数的分数在自己的父母身旁高兴地叽叽喳喳，看到他人父母和老师充满关怀和期待的目光，听到他们期待和赞赏的言语。而属于他的，却只有棍棒和冷眼，只有绝望和不屑。每次考试，每天上学，他都在经历什么？老师讲课的时候，他听不懂，却坐在那里，从不违反纪律；考试的时候，同学们都在奋笔疾书，而他能做的，只有写下自己的身份，和虚无缥缈的理想，然后，坐在那里。他坐在那里，他在想什么呢？他又能做什么呢？ 我把那份试卷扔回原处。那老师大可不必写下那个血色的“0”、大可不必写在他的“100”之上。他又做错了什么，让他值得被如此对待？是他主动让自己的智商降低的吗？而真正生理上应该归咎的那对人却又弃他而去。我想，如果我是他，如果我发现自己无论如何努力都没有办法理解课程、无法向其他同学那样正常学习和生活，我肯定会崩溃。可是他从一出生应该就在遭遇这样的事，大概早就习惯了。如果有人对他说“只要你努力就能做到任何事”之类的话，那这个人一定比他更傻。可是实际上，这个人——不，这些人。不，几乎全是这样的人。对他，对任何人。 我想到我读到过的一句话，“愿所有人都被温柔以待。” 我只是比他幸运些罢了。 初中之后，有一次突然想起这样一个人，于是询问母亲他的近况。母亲说他上了市二中（当然是义务教育），每天在校门口和下象棋的大爷们混在一起，把大爷们全部胜了个遍。 我想象到他那张傻傻的脸，傻傻的笑，想象到大爷们对他的称赞，对他的喜欢——他梦寐以求的东西。大爷们不会在乎他在学校考了几分。事实上，那些考得比他高多少倍的人，在和他下棋之后，也会懊恼自己怎么会输给一个傻子。我想象到，他胜了之后，傻傻地笑，只是笑。 愿所有人都被温柔以待。 上高中之后，我不再是学校里名列前茅的了。我见到了更多厉害的、富有的、努力的人，他们比我强的多得多。然而我总是想到那个“傻子”。我何尝不是和他一样，总是比不过别人。然而，总是有不如我的人，正如总是有情况比他还差、不会下象棋的傻子。他不会去嘲笑比他更傻的人，就像他所希望自己被对待的那样。他也不会因为自己考不过其他人而自暴自弃。他找到了自己的归属。他——我，我们，只是希望被世界温柔以待。 他的名字叫“超”。我原以为，在他面前提及我的任何成绩都是一种残忍。而现在却是，我遇到的任何困难和他的相比都足够令我羞愧。我并不比他更聪明，我的成绩也并不比他赢的任何一局棋更令人骄傲。我不能把我的幸运当做实力和理所当然，也不能把我和别人的差距看做是必须去战胜的宿命。生活没有绕不过去的坎，也没有所谓的必由之路。我们要做的，只是无论在哪，都坚持走下去。 他终归是没有音信了，我们的道路已完全分离。我不知道是否有一条属于他的道路存在。但我相信，这个傻子会在他能走的时候，一直走下去。唯一的区别是，别人可能在奔跑，而他在慢慢地踢正步。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"日记 2023-03-16","slug":"日记-2023-03-16","date":"2022-03-15T16:00:00.000Z","updated":"2025-02-24T07:22:19.899Z","comments":true,"path":"2022/03/16/日记-2023-03-16/","permalink":"https://starcried.github.io/2022/03/16/%E6%97%A5%E8%AE%B0-2023-03-16/","excerpt":"","text":"昨天是母亲的生日。一定要记住。记住关于你爱的人的事情是很必要的。 好久没有更新博客了，主要原因是上学期数分挂了。很显然，上学期并没有“很快回到正常的学习生活”。之前与一位同乡学姐闲聊，她让我不要像她一样太一心卷学业。挂科后我只觉得可笑，没想到我有的是完全相反的问题。从结果上看，还是我的这种问题更严重些。这学期一来，才知道强基计划对于不及格的学生只有一次宽容的机会（我已经用掉了），意味着以后四年内我如果再有一门科目不及格就必须退出强基计划。于是尽可能推掉其他活动，有时间都泡在图书馆内复习，没什么娱乐（但仍然参加了 MCM 和 ACM 训练）。 由于我可悲的自尊心作祟，我没把这件事写在博客上，直到现在补考过了。希望我能记住这次的教训：只要在学校，永远是学业第一。如果想像比尔盖茨或者乔布斯那样的话，最好先辍学。不过话说回来，一有时间就去图书馆的做法挺好的。钱老就喜欢泡图书馆。虽然我不去看书，但和大家一起学习总是很有动力，何况上交的图书馆离得又近设施又好。 前几天水灯节，下一周又有百团大战，菁菁堂也开始放电影了。水灯节那天的人潮我真是数年未见，十分感动。我们很幸运能体验疫情结束的大学生活，之后也会有越来越多的活动和机遇的。 （所以我为什么给自己买了个显示屏） 补考完感觉又有些松懈了，仅这一周就骑了两百余里的车，给学习的时间又少了点。明天晚上去图书馆静心学习。 补考之前非常焦虑，感到自己犯了难以挽回的错误。事实上也是无法挽回，但人生就是如此，每一次抉择，每一个分数。好的是学校给了我第二次机会。焦虑时问了同 ACM 队的学长，问了 yyu，问了班主任，问了导师，他们给我的建议都是：有能力，没问题，就是没上心，都觉得我很有希望，并且建议我减少花在娱乐和社团的时间。看来我的能力没法两把都抓。必须得舍弃些什么了。比如昨天就推掉了不太感兴趣的数学 prp 科研项目。这是好事。 很多事很麻烦，很糟糕，很渺茫。但是学校的朋友都很热情，并且都是和我一样的人。我们面对着相同的事，相同的前景。我喜欢上交，以及这里的人。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"作为一个孩子的最后一天寿命","slug":"作为一个孩子的最后一天寿命","date":"2022-03-12T14:25:00.000Z","updated":"2025-05-19T11:13:20.999Z","comments":true,"path":"2022/03/12/作为一个孩子的最后一天寿命/","permalink":"https://starcried.github.io/2022/03/12/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%AD%A9%E5%AD%90%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%E5%AF%BF%E5%91%BD/","excerpt":"","text":"青春笔记我把属于青春的狂妄诗篇谱写在这里。 如果有一天我落魄到某个桥洞底下，我会说，我可以过得很好。只不过老子不想。 老子生来自由。 如果你在读，我是说我自己，无论你现在什么年纪，不管你现在什么状态，我告诉你，你曾经有一段时间，骄傲，放纵，浪漫，追求自由和理想，那是你的青春。如果你认为当时的你——也就是我，很幼稚，我告诉你，那是因为你屈服了，你世俗了，你趋于平庸了，是因为你不敢追逐自己的梦想，或者已经忘记了自己的初心，是因为你是个懦夫，而不是因为你成熟了。如果你真的变成了那样，那我可去你妈的，并且真诚地希望你不要糟践你的孩子成你这幅模样。 你曾经有个网名叫“天禄”。他是一只貔貅。他天真、幼稚、直率、暴躁、真挚、可爱。他生来自由，并永远自由。如果他不自由，那一定是因为他死了。神兽既死，不入轮回，神魂湮灭。 绝命书很多次，大人们用“你还小，你长大了就懂了”来搪塞我一些事情。他们认为我意识里总是非黑即白。还有几天，这个不懂事的孩子就要死去，而世界上又会多一个所谓的大人。 然而在我逐渐地成长的过程中，我却越发觉得我一直以来的想法是正确的。我也越发的觉得，所谓的“成熟”，只不过是不断地妥协、妥协、再妥协罢了。向生活妥协，向社会妥协，向过去妥协，向未来妥协，向自己妥协。 这种妥协，似乎是作为一个地球上的生物要生存所必须的。毕竟自己是如此的渺小。这是我或者所痛苦的事情。但痛苦，却不知道如何排解这种痛苦。我想要的东西是虚无缥缈的，以至于我自己也不知道它是什么。它可能什么也不是，它也可能是极度美好的，但是它却只能给我带来痛苦。 lxc 说，他想要追求永恒。可是，我们就连自己本身都是有限的，拿什么来追求永恒呢？ 我说，你看得太高太远。如果你什么都不知道，如果你只在乎眼前之事，你会活得很快乐。大家都是这么活着的。 没有这么做的人，都死了。 但是你要活着。你还要活着去追求永恒。我告诉他，对于我们而言，有一个东西是永恒的。 这个东西就是我们自己。 既然你还能意识，那么你就活着，你就存在着。既然你死了，你也就意识不到了。那么，你不就是永恒的吗？ 我们是有限的生物。对于有限的生命而言，这种有限即是无穷。我们一直拥有着无穷。 …… 我这么骗着我自己。 …… 因为现在，一个有着无穷想法的孩子的生命即将走向终结。他的思想已不再无穷，而是变得有头有尾。他是有限的了。而我，却确确实实看得见，确确实实知道。我只能告诉我，他已经不再是我了。或者说，他将不再是我，因为我还没有来到死亡的日子。 突然感觉自己有了几天富余的生命，我还有机会再在这个世界上留下些什么。 留下点给未来的自己的话吧。未来对于他来说是未知的。我们喜欢把未知说成“无尽的可能”。但是我大概也能猜到他会做成什么鬼样子。 那么，就留下点简单的美好祝愿吧。 希望你 呃 如果你已经变成行尸走肉了的话 希望你快点死去。 啊，当然，如果你觉得自己还没有，可以试着时常回来看看我。不常来看看的话，你肯定会忘了我的。忘了我们曾经一共度过的一切，曾经一起发过的脾气，一起得罪的人，一起喜欢过的美好，一起做过的梦。我相信你还会记得我曾存在过的。 还是说，你能继续替我活着，像我们曾经约定好的那样自由自在地活着？ 这对于你来说可能是太难了。 但是，求求你， 我不想死 对过去的自己实际上，现在再写些什么东西，已经是太晚了的。 那个孩子，实际上早就死了。我只不过因为还没有过成人的生日，所以试着努力回忆关于他的一切，然后模仿他说出来罢了。 但是，他才不会想这么多呢。他单纯，单纯地令人感到恐惧。幸运的是他平安地迎来了他的终结。 我之所以会这么害怕，是因为我不想再次忘掉。 那个孩子，走得太快，走的太静。只有我知道他的离开，甚至他的曾经来过。而连我也快要忘记他了。当我自己也忘掉的时候，他便是真的死了。因此，我现在祭奠他，缅怀他，并妄图让自己不落得和他一样的下场。 最后一小时今天是最后一天了。一个月前写这篇随笔的时候，我还没有意料到我现在的状态。 我可能终无法完成自己的执念。这将成为我成人后最珍贵的一份礼物，在我的终点和起点烙下印记，伴随一生。 我没法一直幸运下去，但这只是从一个方面，很传统的方面来看。未来总是未知而迷人。谁知道呢？我相信，我之前做的每个决定，走的每一步棋，都将我引到最适合我的位置。我相信决定论。 既然什么都无法改变，那就不要给自己这么大的压力了吧。人生不如意的事将来还多着呢，这只是一个开始，一场课程。 祝我生日快乐。祝母亲受难日快乐。自己选择去受难是很快乐的，不是吗？","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"小爱老师的见证","slug":"小爱老师的见证","date":"2022-03-03T03:20:00.000Z","updated":"2025-02-24T07:18:50.759Z","comments":true,"path":"2022/03/03/小爱老师的见证/","permalink":"https://starcried.github.io/2022/03/03/%E5%B0%8F%E7%88%B1%E8%80%81%E5%B8%88%E7%9A%84%E8%A7%81%E8%AF%81/","excerpt":"","text":"小爱老师的见证 高一的时候，想买一个电子词典，然后看上了“小爱老师”这个产品。说白了就是一个被阉割过的安卓系统，载体倒是变得小巧轻便了。于是便买下一个。 除了词典功能，它还有一大好处就是可以在上面记笔记。因为便携所以随身带着，有什么想法就往上写。于是养成了随时记笔记的习惯。不过我这笔记却少有学习的知识笔记，主要是记录下一些奇思妙想和有感而发。然而学业繁重，即使有奇思妙想和有感而发也不能常常记下来。偶尔想起来写下而已。因此并没有记录许多。 高二进行竞赛，每天与电脑手机相伴，也无需携带小爱老师，就把它尘封在家里。那段时间比较快乐和单纯，因此也没有什么灵感来源和感情触动，于是记录停滞了很长一段时间。 高三回文化课，拾起了久置的小爱老师。因为离开竞赛后情绪的波动和思考蛮多的，所以多记了一些反映价值观和人生观的东西，当然还有日常的琐碎和小乐趣。 小爱老师终究是要被淘汰掉的。但在它里面写的东西我还是想保留下来，于是写成此篇。距离高考还剩不到一百天，预计将在高考完后完成整理。 人的思想是会变的。现在总是想不起来之前的“我”的许多想法和思考模式。虽然“言必悖”，但留下的文字还是或多或少能体现出当时的自己。多年以后再看我当时写的字句，想起当年的思考和看法，也许会有新的感悟和体会，或者只是简单地回忆起过去的美好。 其实之前有整理过，是直接写在浏览器上的，结果浏览器崩了就没了（请务必记住时刻保存）。偶尔偷闲过来补一下。 因为是随意写的，所以没有什么结构和逻辑。写的备注也只是为了自己以后能读懂罢了。 2019.12.04 苦难辉煌 午夜将至 第一次使用小爱老师。高一时候的历史老师给我们推荐的两本书，当时可能觉得“我以后一定要读一下”然后记下来了。其实现在发现自己对历史并不是那么的感兴趣。毕竟，“人类从历史中得到的唯一教训，就是人类没有从历史中得到任何教训”。 2020.01.06 信仰与目标 我的目标是/清华/我要通过/努力/节食/惜时/专注/自立/忍耐/梦想/信念 当时看到了进入清华的学长们，于是立下如此宏愿。不知道百天之后等待我的是怎样的结果。后面列举的除了梦想都是我所缺少的品质。现在看来，仿佛也没有什么太大的改观。可能更加自立了，但对于努力、专注、节食（特定体现）、忍耐感觉反而是倒退了。 2020.01.06 G G=6.67E-11 为数不多的知识笔记，当时有个物理题考万有引力数值计算竟然没给引力常数（大嘴子），于是记下。本来想升级一下发现我现在不会写 LaTeX 了（悲哀） 2020.01.14 复旦大学 日月光华，旦复旦兮 ……（编：听宣讲会随笔写的，已经不知道写的啥了。大概就是数学要考 140 分以上，语文注意作文吧。下一篇也是宣讲会上写的） 2020.01.16 北京大学 为了奶奶，为了家人，为了自己。 16 日高一北大返校会。 一群群得意的学长学姐们为我们分享经验。 竞赛的路子又窄了。 除了努力，别无他路。 抽奖没有我。 明信片没有我的。 我只有五个旺旺仙贝。哦，吃了一个。还剩四个。 我曾向祖母保证自己会考上清北。看到成功的学长们我真的压力很大。大概整个高一都是这样的精神状态：竞赛被吊打，文化课考不前去。其中因为竞赛当时几乎是一点进展没有，我曾多次晚上缩在宿舍阳台流着泪给父母打电话哭诉。 我在这个学校流的泪够多了。 2020.01.18 请 妈妈请我 只有四个字。当时周末母亲带我出去吃饭，她有一句大概是说“以后每个周末我都请你出来吃饭”。当时听到“请”这个字我的心是震了一下的。在我的观念里，“请”意味着和“朋友”间的人情世故，意味着隔膜和略有疏远的人际关系。当时我突然就有一种和母亲间的疏离感。我甚至想到了我之后可能远离家人、很久才回一次家的生活状态。经济独立，自我独立，那个时候就真的变成“请”了。我很害怕。 2020.04.30 日记 前几日，因为疫情延缓的三个月假结束了。我浪费了这三个月的宝贵时间。期中考试没考好。竞赛也落后许多。适至昨日，母亲又告诉我父亲骑车受伤住院了。我没法告诉她我的情况，我不敢。 今天是我的生日，因为疫情没法回去看看他们，只能用舅舅的手机看看他们两个。他们挺好的，父亲把自行车卖了，因为他觉得这车晦气。害，他也是读过 18 年书（编：当时不知道咋想的，但肯定没这么多）的人，怎生信这玩意，把载了我三年的车子卖了去。罢，我也着实让他们失望了。 我曾对他们说，我是要骑着这辆车骑到清华去的。车没了。不知清华还在不在。 没事的。爸爸妈妈平安健康就好了。 2020.05.07 圣诞礼物 这里是东方。这里没有教堂。我家也没有基督教徒。但就在这天晚上，有一个小孩子在床头挂了一个可爱的红袜子，并像一个虔诚的基督教徒一样盼望着圣诞老人的到来。 第二天早上，孩子一醒来就兴奋地看红袜子，当然，并惊奇地发现了圣诞老人留下的礼物。他问妈妈昨天晚上圣诞老人是不是来了。妈妈笑着说是的。但孩子可不傻，他坚称自己昨天晚上熬到很晚都没有见到老人，而妈妈当时已经睡着了，怎么可能看到呢？可是妈妈仍坚持自己看到了。 ——我们家又没烟囱，老人是怎么进来的呢？ ——老人从门外走进来啦。 结果当然是看没看到的问题不了了之，而小孩得到了莫大的快乐，并相信自己读到的故事是真的——一个老人带给自己圣诞礼物。尽管他不明白圣诞两个字真实的意义。 现在看来，我当时是真的幼稚。还有哪个人，给儿子讲自己从没过过的节日，即使明天上班也要熬到半夜悄悄给儿子的袜子里放进早已藏好的礼物，然后把这个荣誉交给一个从未听闻的“老人”呢？我不告诉我，我心里也知道。 童话都是假的。再没有一个地方能让我感到如此如在童话中般幸福了。 家啊，母亲啊。 2020.05.19 密闭 小时，我最喜欢的一件事就是用沙发垫给我搭的一个小屋。其实就是一个一米多的空间。我喜欢进去之后把光挡住。在里面，外面的声音、光线全部被隔绝了。虽然闷热，但因为是我的温度，就感到莫名的快乐。这个天地——只有我——快乐。 是什么让我不再这么做？ ……（这里有些文字不便写出） 现在高一。我买了一个蚊帐。拉上帘子，外面的声音、光线全部被隔绝了。 我难以入眠。 2020.05.30 父亲的成都·记忆 父亲曾去过这座小城。他去过——在成都还只是个“阴雨的小城”时。他告诉我，在这里最记忆犹新的就是当地小吃了。他当初是和战友来的。来干什么，我忘却了，可还记得他对这里小吃的留恋。因此，我们在从青海湖回家的时候特意绕道成都，并在这里住了几宿。 我们住在一个市中心——一个广场，还清楚地记得有一个超大的小的大熊猫趴在旁边建筑的顶部，但是记不住名字——不远的一个宾馆里。当初是去过那个玉林路的，但是客房太贵了，也没有看到那个小酒馆。第一天晚上，我和父亲就下楼感受成都夜景。那真的是一种不一样的感觉，即使是身处市中心也会有一种特殊的韵味。现在想来，也许真的是那种以杜甫为首的文人带来的文化底蕴，也许只是刚从大草原来到一个湿热的南方城市的生理感受，也许只是现在回忆的不真切，但总归是有那么点味道的。我们还真就溜达到了一个巷子里——就是一个卖夜宵的地方。我们在那里点了份凉糕——好像是叫这么个名字，记不住了，大概就是豆冻放了点红糖水，但我却觉得是特别的美味。买了罐加多宝。父亲尝了尝凉糕。说没有记忆中的好吃。我至今不知道他口中各种“记忆中的味道”是怎么样的。我吃完，还想要，可是女店家告诉我们已经卖完了。于是我们两个坐在成都夜晚的由两侧高楼组成的巷子里，在遮阳棚底下，坐在上了年代的青色或是茶色的椅子上。店里已少有客人，似乎已是人定时，店主也在收拾了。正被晚风迷惑的时候，那位女店主突然传来一声“还有一份”，然后慌忙忙走出来。我和父亲喜出望外，忙打包后离开了。至于我们当时坐在那父亲给我说了什么，我已经记不太清了。只记得好像是一些重要和不重要的事。父亲总是喜欢和我谈人生、理想，和他那总没再吃到的记忆中的味道。可惜我总是记不住他那些刻骨铭心的句子。长辈总是没有办法用语言把他们知道的一切告诉我们。实际上，我们都是一样的，只是不同的记忆将我们区分罢了。 打包好的凉糕，带回去给母亲吃。母亲似乎很喜欢——也似乎不喜欢，我记得是我把最后一口吃了的。 我们再去杜甫草堂的时候（或者其他什么时候），天下起了大雨。那么大，可能是我平生，在此之前，见过的最大的雨了。即使是那年我家沟里能淹掉汽车的“黄河”也没这么大。那条河是趁这我们土路排水不利才猖狂起来的，而这里，是我第一次看到高架桥下水位线发挥作用的地方。我亲眼看到一辆汽车自不量力地抛锚在低洼。雨点是那么的密，那么的有力，比我们在高原上遇到的阵雨更吓人。但是我却感到无比的兴奋——喜欢这种危险的快感。父亲打开了雾灯，他说，很多人都不知道雾灯，因为实在不常用，那些车打双闪是错误的做法。雨刷器像疯了一样的摇，即使这样，我们也只能模糊地看到前面车的尾灯的轮廓。父亲在这种情况下开着车，还在给我讲着交规和开车技巧。他的脸上总是挂着笑容——也许只是我的记忆使然吧。但他那长满胡茬的脸，不高的鼻子，眯起来的眼睛总是让人放心。父亲开过多少年的车，我是不知道的。但他说他比起自动挡更喜欢手动挡就可见一斑了。这样的人，最近一次违反交规竟然是因为没有礼让行人，真是有趣。只要是父亲开车，在怎样的情况下我都不会感到一点危险。无论是冰雹，还是成都的暴雨。 父亲说，那年他在火车站旁和战友吃的那碗小吃，他这辈子都难忘。 火车站不知道在哪里，但我们现在就要踏上回家的路了。刚上二环，父亲就像丢了钥匙一样，慌张地说还没有吃正宗的成都小吃。正宗的小吃，是要在本地人会去的地方，常常是居民区，哪个拐角。但是我们已经上了桥出城，再往回走，会绕很多远路。母亲是想家了的，出来这么久，早已经不耐烦，又怎么会为了一顿小吃专门返回呢？我当时好像也是有这种浮躁的感觉了。总之。父亲没有办法，说，只能下次再来了。 于是我们开着车，驶过了那个写着大大的“成都”的收费站，然后看着它在我们身后远去。父亲说，放一首《成都》吧，难得来一趟。我想也是，于是放了这首歌。 “让我掉下眼泪的/不止昨夜的酒/让我依依不舍的/不止你的温柔/余路还要走多久/你攥着我的手/让我感到为难的/是挣扎的自由 …… 在那座阴雨的小城里/我从未忘记你/成都带不走的只有你” 父亲，带不走什么呢？是什么，让他在这座非亲非故的小城留下了依依不舍的眼泪？ 我不知道。他从未告诉过我。他也没有在我面前留下过眼泪。至于他的小吃， “下次吧。” 不久前，父亲骑自行车摔了，几根肋骨骨折。当母亲用疲惫的声音给在学校的我打电话时，我哭成了泪人。幸运的是，父亲是没事的，只是需要静养。我想起小时候在父亲大大的肚皮上打滚。他说，他永远爱我。 我也是啊。 可是，现在你的肋骨断了，我怎么再在你的肚子上打滚呢？ “下次吧。”也好。他不说，我也知道，他记忆中的味道，只有在记忆中才真的存在。他在火车站旁找不到，他在成都居民区的拐角也找不到。 可能，他是再也无法回到那个阴雨的小城了。 …… 当我有了孩子的，我会给他讲一遍我第一次和我的父亲去成都时的经历的时候，他又会怎么想？他不会明白我的感受的。就像我现在之于父亲。 在一个晚上回忆初中升高中时和家人的成都之旅。当时我们从西安到甘肃、青海湖，然后转到成都。那可能是我最后一次和父母一同旅行了。之后也许要么是我没时间，要么是父母因家事或者身体原因不允许。当时大概是在学校受了些挫折，有点想家和父母，回忆起当时旅行的事，便写下这些文字。想了很多，但仿佛都无法直接明说出来，只得用碎片的记忆转成文字。希望我之后再看时能明白我并未明写的那些感情。并且，有所反应吧。 2020.06.16 日记·表 “谁把水倒到我的表上了？” 他们仍自说自话，没人理我。 “谁把水倒到桌子上了？” “什么水？”有人问。 “倒在桌子上的水。倒在我的表上了，也不收拾一下。” “那你为啥要把表放在桌子上呢？” 我吃了一惊。“我不能放在桌子上吗？我以为桌子上是放东西的，而不是放水的地方。之前我的表就被水泡过……” “那你既然知道会发生这样的事，为什么还把表放在桌子上呢？” 我又可气又可笑，说，“你这解决问题的方法是和晚清政府学的吧！” “几百年前的事，我跟谁学去呢？” 已经开始胡搅蛮缠了。我愣了一下，问：“那我的表放哪里去呢？” “放床上不行吗？” “有桌子可以放，为什么要放在床上？你还说不是和晚清政府学的……” “那你放地上也行啊。”另外一个人接到。 “我为什么……” “行了行了有病啊，成天争论这有意思吗，还有人故意把水倒你表上不成？”哪位刚才一直没说话、上次淹了我的表的人说到。 无缘无故被骂，我顿时怒气冲头，但还是克制住了爆发，憋出一句话：“我现在怀疑是你干的。” “你爱怎么想怎么想，跟个神经病似的成天争这些鸡毛蒜皮的小事，有病。” 我忍住不让自己破口大骂，因为我知道此时宿舍没有一个人会替我说话。于是我拉上蚊帐，让自己冷静下来。我已经很多次遇到这种情况了。我不能用粗暴的方式解决问题。 突然想到一个喜剧作品。一个戴高帽子的女士在剧院挡住了后面的人看戏，后面的人和她争执，最后那女士还做得一副高高在上的样子。这本是一个喜剧，但我却从没考虑过现实中应该怎么处理这种问题。 宿舍里没人说话。他们似乎是都睡了。 桌子上的水应该还没干。我开始认真思考自己应该把表放在床上还是地上。 高一时一次幼稚的冲突。当时我和二班一些人住一个宿舍。年轻时性格急躁直率，但在这个时候我已经碰了太多次壁，开始仔细思考处理矛盾的正确方法。当时是直接把怒气吞到肚子里面去了，于是变成了文字写下来。虽然没有记录，但我现在仍然记得文中提到的那些人都是谁。说明还是气，只不过换了种表现形式。明面上不说，但是心里已经记得这人不可深交。心思变得……阴险了？不过我觉得这是好事。 2020.07.15 抉择 她说我不行。我给他说的是我差不多。所以他们支持我。只有我知道自己的水平。我确实落下了很多，但我相信奇迹。然而也不愿意孤注一掷。既然他们可以，我只要拥有时间，我也可以。我从不信邪。三个月，也差不多是孤注一掷了。 总是有人怀疑我。如果我就这么退缩了，也就罢了。可我不愿意。我在做我热爱的事情。也许结果可能会不尽人意，但我不信我做不到。我不能忍受他们的居高临下，我不能忍受同样的起跑线我就差人一等，我不能忍受她说我的目标定得高，说我的想法不现实。不。我绝不能忍受。我绝不会忍受。即使最后弄得灰头土脸，我也要针锋相对。因为我就是这样从小学、从初中上来的。即使无法做得完美，即使不是为了这件事本身，也是为了我自己。 实在一点的话，尝试每天写四道题打一次比赛。如果每次比赛都超过二百分，那就差不多了。 可是每天待在机房，磨的可是硬功夫。耐心、专注力、恒心、意志。痛苦如斯，快乐如斯。我本没有这些品质，但他们、她们给了我力量……希望如此。 7-15-2020 疫情之后 选择停三个月课 谨此明志 当时好像是三个月后 NOIp。当时 zzc 已经停课，fgf 也有这个意向。因为我当时成绩很差，教练认为我拿个省一就可以走人了，不需要停课。真得感谢教练，如果不是她看不起我，我可能就不会停课了。事实是，我一停课就可以全神贯注于竞赛了，而一旦我专心于一件事情——正反我现在都拿了银牌，可以在教练面前横着走了。 现在（2022.3.5）距离高考同样是三个月。年后的一场考试我因为太颓废了考了六百多名，所以不久之前班主任找我谈话，想激励我，甚至说“实在不行银牌还可以再用一年嘛”。历史总是如此的相似。我感觉又被人看不起了。 父亲说，中国人有一个特质。极盛必衰，而被打压的时候却又很有韧性。他把这称为“贱”，我很认同。我就是这贱命。当然我不会屈服于这命运，我会尽力 take advantage of it。 2020.09.28 Diary OI 竞赛五档线，一条还没过呢。停课一段时间了，也不知道自己的水平是真是假是高是低。 机房的生活是真的快乐。但是也非常害怕自己回不去。 我不希望回去。回去一切都变了，我引以为傲的一切也都会消失不见。 让我脆弱的心灵在考试前再多待一会、待一会。 严峻的现实嘛……让我浑浑噩噩地度过这段时间算了。将来，将来的事情请交给将来吧。 有时候我觉得自己的情绪像青藏高原的天气一样善变。 2020.10.30 高中生活#1 10.31 停课前的生活恍如隔世。 我之前从没想过我现在的状态。但如今却是习惯得很。这可能就是随遇而安吧。 人生中能有这么一段经历——停课的竞赛生活，说真的，即使最后没有结果，我也算是没有枉来西工大附中。 这不就是我向往的高中生活？ 我只知道，若不能好好把握这次机会，我就只能沦为平庸。 明天体检肝功，晚上忘了，吃了东西，应该没事吧。 2020.12.23 Diary 很快，CSP 和 NOIp 就过去了。我得到了些许令人满意的成绩，但后面的挑战更加严峻，赌注也更危险。下注的也不仅仅是我，而是全家人。不幸的是，赌注的增加并没有伴随着奖励的提高。相反，赌输后的代价却变得越发难以承担。 最近实在是过于颓废了。马上要去绍兴，我却仍然找不到自己的感觉，只能尽可能不被别人落下。 那咋办嘛。 立个宏愿好了：我一定要通过省选，最好有 A 类，然后至少要拿国赛银牌。 没拿到 A 类，但是其他目标达到了。但是许愿居然忘了签约的事。可恶。 前往绍兴，把小爱老师放在了家里，直到回文化课之前都没有再碰到了。也就是直接跳过（skip）了整个高二阶段。这一年我完全停课投入竞赛——但也没有完全投入，说实话，成天坐在电脑前真的很难控制住自己不去颓废。以至于省选后的每天几乎都是颓废的状态。严重的程度，可以说是昏天黑地，暗无天日，俾昼作夜。以至于最后失了约。 不过去浙江跑了几趟，也算是开阔了视野，也见识了南方的、绍兴一中的才子们是如何学习的。所以，我并不因为我没有努力而后悔。 怎么说呢，这也算是我狂妄的青春的一部分吧。我很高兴我狂妄的时间也有一部分用来学习自己喜欢的东西，而且最后还不是落得一无所有的下场。并且在这一段时间里，我感觉自己的人生观、价值观都有了很大的改变，以至于我再回首初中和高中的自己的时候，发现自己已经完全换了个人——无论在为人处事的方式上，还是对人生价值的看法上。可惜尽管成天拿着电脑和手机，却没有用一点点时间记录下来这改变过程（休息时间全用来玩游戏了）。时常停下来反省自己，也算是一条人生经验了。 小时候和高一的时候没有娱乐的方式，每天闲的时候躺在床上喜欢想乱七八糟的东西、今天和之前的经历，当然也有梦想。但是当你把休息时间拿来娱乐之后，就会发现自己被占得满满的，每天把自己空虚的脑袋填满泡沫，显得很忙，不能抽身呼吸和伸展筋骨。现在有机会回想起来真的是深刻理解了娱乐的致命性——让你浑浑噩噩，无法思考。和喝酒宿醉和吸烟吸毒本质上没有什么区别。而这些是我所深恶痛绝的。但是如果我记得我自己说过，我痛恨的是这种逃避思考的行为本身，那么疯狂娱乐理应也被放在和烟酒同等的位置上了。 呃，在绍兴一中的事情实在是记不得多少了，反正每天做的练习题是记不得。只记得学校很大（当然是没见过更大的，听说宝鸡中学和衡水（恶）超级大），中心有一个图书馆（有幸进入里面听原 CCF 主席讲演），有室内体育场地、网球场、操场、篮球场、排球场，图书馆后面、后门边上有一个南方园林式的纪念馆与小桥、以及一潭死水。我们刚去的那天晚上下午就去逛了个遍——这些景观足以给我们这些平常龟缩于大学校园一角的学生们留下深刻印象。南方学校大多有联通宿舍楼和教学楼的长廊（我认为是雨水多的缘故）。环境很有南方特色，幽静怡人，到晚上会有佯装成古代吊灯笼的电灯昏昏地发出温暖的黄光。宿舍楼大厅有一架钢琴，大家都可以去使用。在我用多次展示的拙劣的琴技吸引来了本地聚銠的精彩表演之后我就再没碰过它。绍兴一中的宿舍让我们这群北方人大开了眼界，无论是它每个宿舍带的两个浴室还是南方夏季的令人恐惧的蚊子。我们买来一个电蚊拍之后每天晚上回去的第一件事就是挥舞它，几乎每次挥舞都能带来一连串的噼啪声（我们甚至用坏了一个电蚊拍）。当然，在那里是有像大学一样的桌子的。南方的学校下午放学早得离谱，所以允许学生在宿舍学习也无可厚非。而且宿舍里有电源，于是我们可以打 CSGO 打到半夜。食堂有两层，性价比还算高，最令我们印象深刻的是梅菜扣肉和免费的梅菜汤（又爱又恨了属于是）。几乎每个周末都和门卫扯皮溜出去吃饭购物和闲逛。嗯，我们甚至还在宿舍点了外卖（被臭骂了一顿），聚在宿舍里吃烧烤、披萨……那真是一段无比美妙的时光。虽然每次去要么是接近省选，要么是临近国赛，但每次去都能过得无忧无虑。以至于我们之后教练再也不让学生去绍一学习了。 学校大门口立着一块大石头，上面写着大大的“做真人”。我在离开的时候拍下了它。如果以后有人问我高中在哪里上的学，我一定会加上绍兴一中。如果有机会，我以后可能还会去像看望母校一样去造访她。 绍兴本地人说话听不懂嘤嘤嘤 实际上是省选前和国赛前分别去了两次，记忆混在一起了，并没有整个高二都在绍一呆着。那些有趣的事很多是第一次去时做的，因为第二次去的时候，我们一些人已经不见了。 ……让我们重新拿起小爱老师。 2021.09.10 想 fgf 今天说她一到周内就不想学习，我问她那她还能每天都完成作业，她说她只是不想学而不是不学。 然而，我不想学习的时候就真的不学了。虽然这么说，但是有时候也会有莫名其妙的动力。我不知道造成我俩差别和这种现象的原因是什么。如果我能了解这种原因，我可能就“会”学习了。 总是有人问我，我为什么要这么做。我说，我想这么做。想还需要原因吗？大脑是一个混沌系统，但是却又条理，而人类能做的只是见缝插针地研究。就像现在的数学题，我总觉得是在耍小聪明。这样绝不能形成像人脑一样的体系。 刚回文化课，无心学习。这样的状态持续到了年后。现在看来自己写的这些东西仿佛是在给自己找借口——又或许不是。 2021.09.18 汪语 松土是如何影响全球变暖的 讲完 DNA，下节课英语：26 个字母有啥好排列的么 看那哈货带着耳机，左手吃着饭，右手写着作业，同时干一堆事，结果一件也干不好。那是退化。你看那草履虫，一个细胞要管进食、排泄、移动、生殖，一件事也干不好。人类给你分化出组织和器官是让你提高效率的，你在这退化。唉，哈货。 唉，那群哈货（指搞代孕的有钱人）。有的后来又变好了，那是哈货中的败类。争取当哈货中的败类。 2021.10.06 （日记） 10.26 凌晨 高一的时候，第一次参加 CSP，看到 TYC 与他们谈笑。记得最清楚的是这个学姐。她笑得最开心，很自在。他们当时才是高二。我现在是高三，他们现在已去清华。仿佛没过多久的事情，想起来却是如此清晰真实。现在我已是当年那个他们。 我多希望继续追随他们的脚步。她曾在附中食堂给我打招呼。我想再听一次她的声音，在清华的食堂吧。 2021.10.24 神经系统的分级调节 老魏说了一句话：“我不敢去看那些反映社会问题的文章，因为我知道我一看就会变得激进。”不知道老魏如果不当老师，他的思想倾向又会如何。 这就像知道自己会上瘾而不去吸毒。……享受现在。 2021.10.24 批评 中国人不喜欢批评家。他们成天批评，容易给人不做实事的印象。不符合社会主义核心价值观。 只有当你不仅针对一方面提出批评，并且给出解决方案，更去实践自己的方法，最好能成功并且自己成为权威和代表，这个时候，你的批评才会被重视。 这是好事吗？ 学鲁迅先生的手法十分拙劣、有失偏颇。但是当时确实是因为有一些人，说什么不应该妄加评论的话语之类的言辞，仿佛不去把宪法背完就没有资格评论国家事务。我十分讨厌这种说法，于是写了这点文字。在我看来，我的评论即使不能有实际效果，也至少应该能够反映像我这样一类人对某件事物的看法，即使它不是正确的。你并不能保证你说的每句话都恰如其分，而如果就由此因噎废食，那么公众的舆论从何而来？显然大家都不是这么做的。你也并非公众人物，何必如此惴惴小心？在我看来，是把自己看得太大罢了。何况，犯错误时有助于纠正和提高自己的。沉默在很多情况下都不是金子。 2021.11.08 家族树 家谱必须是树，而且深度具有意义。但是如果不是树的话，那么只有可能出现了近亲结婚。 所以，如果要晦饰一个人近亲结婚可以说： “他使得他家谱成环了” 2022.02.07 谔谔 《史记·商君列传》：千人之诺诺，不如一士之谔谔。 谔谔：直话直说（确信 2022.02.12 井底之蛙 可恶的是那个告诉他外面的世界更大的青蛙。因为井底之蛙根本出不去。 他做了正确的决定：选择不去相信那个世界的存在。这对于他是好的。或许他只是在骗自己，不过这也是好的。 或许你会说他是可以出去的，只不过没有尝试。可能。但他出去之后呢？发现自己在井里面浪费了大半辈子，出去以后在井里的经验完全用不上。不是每个人都能那么很快适应新的环境。住在监狱的鸽子永远无法自由。 王八蛋老师讲的很对：我不去看那些评论社会的文章，因为我知道我会变得激进。 我们语文老师曾经给我们说，出去不要讲自己的语文老师是他，就说是王八蛋。我从来没有听过这样的请求，所以以后用王八蛋代替他。 2022.02.23 日记 心情很糟。 早上又走晚了，坐了教职工电梯，不巧碰上不想让学生坐电梯的老师。我当时手里拿着三明治，和另一个学生闪了进去。她骂着。我看她脾气不好，本想开个玩笑或者求求情，大不了挨顿骂，一般老师都是很宽容的。实在不行出去也就罢了。 可是，她推了我们。 她把那个学生推出去了，然后继续推我。我没动。我站在那里盯着她。 电梯门缓缓关上。 电梯厢向上抬升。 不打的电梯间挤着四个人——那老师的后面还站着两个女生。所以我们离得很近。那老师模样的女人厉声责问我：“你是有什么理由？” 我没有理由，所以不说话。 “你是胳膊残废了还是腿不行了？” 我不说话，只是瞪着她，目不转睛地慢慢抬起手，然后咬了一口三明治。 她被我这个具有明显挑衅意图的行为激怒了：“你是哪个班的？” 电梯运行过半。我有点恍惚。她像我的小学语文老师一样盯着我，而我以相同的方式盯着她。若是以前，我会理直气壮地报上自己的名字和班级。然而我已经多次尝到这样做的苦果，于是默然。 电梯停了下来，然后门缓缓打开。我风也似的冲了出去。虽然我感受到她妄图抓我的书包，但我连头都没回，自然也不去理会她的叫喊。虽然溜了，但我知道如果她是那种爱找麻烦的家伙，随便一查就能查到我。 好歹没回敬她。好歹算是进步了。然而最初为什么硬是没有出电梯，现在我也是不知道。 又倔强又怂，喜欢自找麻烦，这可真是…… 可惜最后还是迟到了。王八蛋老师的课。我刚遇到那事心情不好，于是在走神。王八蛋讲题目的作用时，叫我起来。我不知道，于是不做声。 “真不会？” “假不会。”我答到。运用了仿词的手法，达到缓解气氛的效果，我可真是睿智。 然而，他把“假不会”三个大字写到了黑板上。我呆住了。他让我坐下，然后吼道： “我以后永远不叫你回答问题！” 我坐下了。我感到眼泪要夺眶而出。于是我狠狠地啃了一口三明治。王八蛋老师是我喜欢的老师，语文课是我喜欢的课。可就在刚刚，王八蛋给我宣判了死刑。 …… 妈的，那种感觉，又来了。从小到大做错了事之后的那种悲伤和内疚。竞赛结束后我都没有过这种感觉，本想着可以永远摆脱它。我他妈都快十八了啊，操，为什么我还要惹上这种事，还要为这种事沮丧啊？承担不起后果，还要把自己放在矛头上，这就是贱吧。人为刀俎我为鱼肉，为什么要去惹人家屠夫呢？然而，即便是做一条咸鱼，我也要奋力挥刀砍向刽子手。这种故事的结果通常是自取灭亡，如果成功便是童话故事——但我仍然会去这么做。 看来我也是有点浪漫主义了。 王八蛋老师说，李白浪漫是因为他出身高，加上有才气，被世人赏识，才有的浪漫的资本。浪漫是最奢侈的奢侈品。理性来讲，似乎趋利避害、能屈能伸才是正确的做法，才被称为“明智”。我一直在尝试这么做。但无论怎么学习，我的本性就在这。 我真的，不想，再压抑自己了。 父亲说，我这种性格，不善交际，就应该去做学问。我现在知道，有那么一种生活，一种理想的生活，一种浪漫的生活。那里可以远离尘世，远离压迫，远离那些屠夫。那将是我终己一生追求的生活。他们说这是幻想，那是因为这些俗人得不到，更可能见都没见过，目光短浅。 然而我纵然是贱，纵然没有浪漫的资本，也要硬着头皮去追求那一份浪漫。这何尝又不是一种浪漫呢？辗转沟壑而死，不也是一份乐事？王八蛋老师笑颜回一生一事无成，但箪食瓢饮又何尝不是他的浪漫？孔子盛赞其之故，盖若此也。而凡夫俗子只由其学术贡献论其一生，又何以明圣贤之道？ 王八蛋，你算老几？身为人师，说出这种话，不觉羞耻？ 那个老师，就像千千万万不通人情的行尸走肉一样。她大抵也只能混个中学老师。 王八蛋对我说过，“小子，你早晚要耐挫。”我知道，我之前耐过，现在耐着，将来也还会耐挫。我很高兴，因为这让我觉得我就是我。 王八蛋老师当然没有真正“永远不让我回答问题”，这我当时其实是知道的。但是他说出那种活还是令我心痛。不过这并不影响我对他的态度——我已经过了那个和人怄气的年龄了。我只会在这里写点牢骚话，顺便，让这个人的形象在我心目中刷新一下。 2022.02.27 亲亲 亲亲：爱自己的亲人。 我要亲亲！要亲亲！亲亲！ 2022.03.03 学 几天前我自习课间 emo 了，然后回宿舍哭了一阵子就睡着了，把学习的东西散在教室没管。我以为会有同学看到我第二节课没去，会帮我把用具收回来。 自习结束，我被他们回宿舍的声音吵醒。拉开蚊帐，问一位刚回来的舍友是否帮我收拾。没有。于是起床去对面宿舍问。 推门。“呦，袁大公子来啦。” …… 不想去回忆了，当时刚低沉完睡醒脑子有点乱，总之就是没人帮我带回来。我也没嘱咐，是我的问题。我这么想着。虽然之前有同学没打招呼提前走我也主动帮忙收拾来着。 但是还是我的问题。 今天依然回宿舍挼辟邪，同学邀请我睡大觉，我拒绝了。 我要是不去学习的话，连给我收尸的人都没有。 写这篇文章的原因是，我当时出对面宿舍门的时候态度不太好，感觉好像别人就应该为自己做事一样。我对此感到羞愧，也因为我没有这样的人而悲伤。 2022.03.10 天才 “天才是 1% 的天分加上 99% 的汗水。” “黑猩猩和人类的基因相似度超过 98.5%，我让动物园的黑猩猩再努努力，说不定他的智商能超过你。” 仔细研究一下，你就发现这两者真的有相似之处。决定一个人的往往是那 1% ——无论是天赋还是汗水。 2022.03.10 智能 我不喜欢学术。 我曾经有很长一段时间单纯地喜欢学习。现在想来大概是因为早年根本算是个社交障碍，而学习又相对比较简单，于是就喜欢学学校教授的知识，还能得到老师的表扬。除去这个原因，我却真的是在学习中得到了快乐。那种贯通思维的舒畅，那种对知识的渴求，还有那种打破砂锅问到底的倔强。那份感觉我有幸在高中的竞赛时又浅尝了一番，但也只是浅尝。 说回那段时间。我清楚地记得自己宣扬过“学习完全是兴趣使然”。我也记得我第一次旷课是因为一道数学题和老师发生了争论以至于肢体冲突。我曾对知识那么的渴望，那么的较真，以至于完全不顾人际关系和个人生活。 “当你知道的越多，你不知道的就越多。”认知就像一个圆，面积越大，周长越大，也就是未知越大。然后发现，未知是无穷的。这让人气馁，让人怀疑学习的意义。不过我并未被这个问题困惑，因为我觉得它和“人固有一死”，“活着有什么意义”的问题是相同的。我是说，我在认知的边缘上发现了新的东西。 我发现了我自己。 仿佛一夜之间，但又感觉很漫长，大概和我竞赛时的见闻以及网上的经历有关，我开始注重我自己的重要性。我开始学习如何交往，开始对他人，对世界充满兴趣。我开始认真审问我真正的想法和欲望。毕竟，我是一个人。人是动物。人没有了解宇宙的义务，但是人有七情六欲，有肉体。我对我产生的各种情感和思维非常好奇，也对人性充满好奇。这里面有着庞大的知识和未知。客观地讲，这似乎和其他知识并没有什么区别。可是，正如我所说，我是一个人。这份知识对我的吸引力远比宇宙给我的多得多：对于宇宙，我就像是用凡人之躯理解神明，就像蚂蚁打量泰山，顶多拼尽几代人将它丈量，但终究无法了解它的全貌，跟别说人类赋予它的各种意象。我觉得人类现在的工作就是蚂蚁丈量泰山。但是，对于人类自身，却是值得研究的。 我发现我是一个人。 我不喜欢学术，是因为我发现现在学习已经不是我想去做的事情了。现在是高考前九十天。我的学习已经被单纯地功利心玷污了。也许学习过程中我还有解题的快乐，但我知道我现在做的事甚至不是丈量泰山。我对学术没有感情，我也不能强迫自己去喜欢它。如果我真的要去研究什么，那一定是因为这样做能得到我得到的答案，而不是因为学术本身——它顶多是一个工具。 我仍然喜欢学习，但我不会把这个词的解释权交给别人。完成这段基础知识的义务教育后，我将不会再主动漫无目的地“学习”。 人生苦短，我想找到能延续人类生命，或者延续人类精神的方法。如果没有肉体和寿命的束缚，或许我还能找回探寻宇宙和基本原理的那份初心。但大概是…… 2022.03.10 智能 人工智能的深度学习系统，是不断对信息进行堆砌矫正来进行学习的。这需要人工比对来提供校正。 人的思想可以简化为是若干神经元构成的。而对其进行校正的，是环境。 什么是智能？ 我非常喜欢随机算法。我相信生物本身就是在混沌中被自然选择，也就是校正，而一步步进化的。这是个庞大的过程，但只要有足够的时间，它将会收敛。我喜欢不确定性。因为即使随机化期望不优，它总是比循规蹈矩更容易抽中大奖。进步需要这种质的飞跃。 人的思想不也是信息堆积成的吗？ 我不知道，也许，会有其他的收敛位置。未知总是如此奇妙而吸引人。 2022.03.14 日记·奥密克戎 一睡醒就听到宿管通知有出租房的学生回家。 早上得到消息，说是要停课。结果又改了口，只有高一高二停。但是学校确实是做好了停课准备的，预案是直播课。 中午联系母亲，才知道铜川也一夜之间公交全停，学校全停，因为耀州区出了一例。 早就听闻奥密克戎的强传播力，没想到它这么厉害。上一波西安疫情对抗的是德尔塔，而同期在天津和深圳爆发的奥密克戎现在还没有结束。因此我不觉得陕西的反应过激。相反，我觉得反应不够。我觉得让高三继续上课是个坏主意。 我就算今年放弃高考，也不想得奥密克戎。希望教育局和学校拎得清他们在做什么。 2022.03.16 日记·噩梦成真 昨天才在讨论要不要住在机房，今天真的就一语成谶。 乐观地想，这种事也真的只有中国人、只有在中国才会出现。中华民族有强大的团结精神和献身精神。这将是我永远珍视并传承的精神。如果一切进行顺利，这将会成为老师同学一生中津津乐道的佳话。 但是如果出了问题，它就会变成我以后诟病高考制度和民族劣根性的一个典型案例。成王败寇罢了。 中华民族是苦难的民族，是有韧性的民族，是懂得舍小家为大家的民族。这种力量是恐怖的。我相信它是中华文化经久不息的重要原因。这种力量如果不是在毁灭世界，那就是在创造奇迹。 总而言之，学校能做出让高三学生全部住校的决定并非易事。这足见学校对高三学生的重视和关怀。显然疫情不是我们能管得了的，那么现在压力来到了我们这边——不学出点东西来是说不过去的。 2022.03.16 日记·狼来了 战士们依依不舍地和亲人们诀别，整理行囊出发，做好了三月不归的准备。然而已经到了战场，甚至连营帐都未扎下，却收到消息说要回家了。 这仗难打，不能让战士们送死。回来打信息战。 于是便有早上七点开摄像头直播学习（ 但是却留下了几个殿后的。烦死了，同样的剧情。这次恐怕是场硬仗。而且不能输。 2022.03.19 日记·第二波疫情 仿佛真的是我预估错误了，这次的病毒并没有造成像上一次一样的危害，社会面已经清零，明天就要复课。到头来，我们的新客人们只在宿舍住了三个晚上。 有点超乎想象，可能是西安市政府确实这次做得不错。这样挺好，又可以回来冲刺高考了。 然而西方那边却开始指责我们中国的清零政策无法达到群体免疫。说真的，我一点也不想摊上新冠的后遗症。 我希望第二波疫情可以就此过去。还有八十天高考，希望不要再出什么岔子。 呃，这次可才真算是“狼来了”。 2022.03.21 魏语 咱们不是在搞文学批评，咱们离文学很远。文学本来是见仁见智的，但高考不是，高考需要我们千篇一律。 我们就是要搞应试教育。应试教育有什么错？中国的人才就是应试教育培养出来的。 在大环境、社会根基和主流观念不变的情况下，扯什么“素质教育”无异于埋没人才。这和所谓“双减”可谓异曲同工——都在舍本逐末、自欺欺人。 fgf 认为，培养或许不是一个正确的描述，因为她不觉得应试教育对人的成长有什么益处，它只会摧毁人才。但不可否认的是，它的确是一个差强人意的方式。 可悲的现实是，正如他所言，人们能做的，只是尽可能地把更多的人才拉出泥淖。 我是自诩自己为人才的。我希望自己能先脱离这里。 别说你优秀。你优秀是因为有高考。咱们用成绩赢得别人的尊敬。 没有了高考，看看自己还剩什么吧。 感觉王八蛋老师其实是一个比较矛盾的人。他曾经说过自己“其实很自卑，但为了你们不得不改变自己”。他仿佛知道我们有些“愤青”在想什么，他知道党、国家、社会的诸多弊端，他很清楚，但他接受了。我没有他那么多的阅历，我不太理解他的做法——也许是理解的，只不过不支持罢。至少作为一个老师，他在做正确的事情。某些情况下比如他不能控制自己情绪的时候除外。 2022.03.26 批评 和之前差不离。 如果你没有成功，你批评，他们会说你没有资格发言； 如果成功了，你回过头来批评，他们会说你得了便宜卖乖。 于是人们变聪明了，都沉默不言，都认为这是件出力不讨好的活。 然后，他们说，现在的人都胆小如鼠，没有担当，全是些自私的精致的利己主义者，看到老人摔倒也不去扶了。 有些人听不惯，站出来了，花大力气批评了，行动了。但言必有失，行必有缺，总会干出那么点不很称心如意的事。于是他们纠缠住了，斥责他没安好心，他图谋不轨——他一无是处。他应该被钉在历史的耻辱柱上，用来警醒后人。 后人们看了，我勒个去，这人血馒头做得可真精致、真冠冕堂皇……真好吃。 2022.03.28 胡言乱语 我之前给 lxc 说，我可以控制自己的情绪，比如我快乐是因为我想快乐。那天晚上我无缘无故低沉的时候，他说，原来我也不快乐。强装的情绪就像泡沫，见不得光，弱不禁风。 我之前给 fgf 说，我现在已经不再数数然了。仿佛是有什么崇高的理想，把世俗欲望置之度外。但当她让我知道又有人比我考得好的时候，或者如果我最终没能考上清华，我依然会十分沮丧。 情绪反映人的思想，是它的一部分。我从来没有实现过完全理性。而且，我不认为世界上会有人、曾经有过人实现。再圣的人也终归是人。 那么我的这种想法算什么呢？在大多数情况下，它似乎体现为精神胜利法、自我安慰和自我欺骗。我不知道这是否合理有效（或者我想达到什么效果）。 但是，人的意志可以变虚为实。那么，我相信这一切都是真实的。让它在它应该存在的时候出现吧。 这仿佛是作为人类的一种特质了。 现在我很随性，所以如果这种想法是自然而然的形成或者我不由自主地行动出来的话，我倒是不会感到非常压抑。我不再尝试强制控制自己的情绪了，至少不会强力地去改变，以至于让我感到不爽。 2022.03.28 混乱与秩序 我认为，人类最有成就的事情无非是在混乱中寻找秩序。当然，混乱和秩序需要寻找一种平衡。 自然是混乱的，它提供了无限的可能和机会。自然也是有序的，地球就是一个明显的例子。 生命是混乱的，但它也是秩序的。它本身意味着秩序，但无法脱离混乱，因为这样它会无法发展进化。它的根基是混乱，但它的发展又在背离混乱，甚至在人类出现后，有人妄图寻求绝对的秩序……当然。 这就像是太极。 正如我开始说的，人类在物理、数学、人文方面起初都在追求秩序。然后，他们发现，有很多东西是他们没法用一条公式、一个系统、一种理论、一套思想来统一的。他们开始意识到混沌。 霍金说过，科学的终极目的是提供描整个宇宙的单一理论。混沌有它遵循的规则，但在这些规则的基础上实现了非常复杂的系统——复杂到人类无法探求。也许我们会有一天得到这个单一理论，但我们作为人类总要面对混沌，因为你没法通过这个单一理论预言明天的天气。然而我们注定无法很大程度上了解和掌握混沌，它是极为强大的力量。这种力量不是我们见缝插针能窥探和掌控的。所以我们注定对混沌了解甚少。我们只能适应。 我是生命，而且是人类。 我…… 我喜欢随机化算法 2022.04.03 自闭 又和 fgf 辩论了，自觉甚是不应该。明明早就知道了彼此不是同路人，为何仍然争执这些？只不过凸显出自己的不自信罢了。因为不自信，所以总是寻求认同。何况这不是三言两语能够得到的。 争执的内容大概是高考总结的作用。她认为，总结是复杂度上的优化，而我觉得总结就是卡常。我觉得高考就是卡常。刷题积累题型，也许能让你以后很快速的做出相同类型的题，但并不会让你有什么实质性的提高。我认为这不是真正的总结，这只是积累，是复现。总结应当是归纳，是一种探索，是追求新的知识和方法。能做出一类题不代表你获得了新的知识，只能说明你记得牢。稍微懂点脑子变个形就觉得是新东西是愚蠢的。总结是进步。这不是进步。她甚至将总结和灵光一现当做同等级的对立。事实是，总结更需要灵光一现，灵光一现不是无中生有。我知道她在膈应我（什么猜结论大师），所以我也没有说下去的欲望了。不过既然她能这么讲，说明好像我膈应她的目的达到了。总而言之，高考题式的总结毛用没有——抛开高考而言。 突然发现她好像也没有脱离高考。那好像就是我们对这个比喻的理解不同，然后自说自话而已。哎呀，总而言之，和与你不在一个频道上的人说话真没意思。他们的侧重点全在高考，而我总是脑回路清奇。她应该没说错，可是她膈应我，所以我不知道在争啥就闷头怼上去了。我的错。我有罪。我不应该。 令我焦虑的是清华的羟基招生简章。它说得好像要看国赛成绩合约。而我没约，成绩也在后面，所以害怕直接审核不过。学长同学父母给的建议是，就当没那银牌，全力以赴吧。毕竟，如果裸考线过了就一定稳了，是吧。 惊喜地发现 ckl 也认为生活应该快乐为主，成绩财富都是身外之物。我发现很多人都是这么认为的。追求自己想要的生活，那将是多美好的一件事。虽然高考的确是重要的一环，但并非全部。他说的很多都是我之前写过的。这使我发现，我还总是和自己过意不去。在我不盯着这个目标的时候，我就不会焦虑。但我总是控制不住。 那就不要控制。 最后一次，为别人而活。为了那不切实际的梦想，为了所谓的光荣和使命，为了无谓的证明，为了过去的承诺。 不为我自己。 2022.04.06 生日 今天是清明节后一天，是 ckl 的生日。所以我送了一沓纸钱给他做生日礼物。 其实有几个考虑。一是之前开玩笑，实现诺言罢了。我认为 ckl 是那种开得起玩笑、关系还不错的朋友。二是正值清明节，这礼物比较有节日特色。 三是，这是他的十八岁生日。这意味着一个孩子的死去。 今天也是九模出成绩的日子。我考砸了。不过因为昨天冰与火之舞通了两关，所以心情没那么糟。除了担心大老师阴阳怪气我，还有我不能肆意妄为之外，好像不再很担心高考的事情。一惊一乍有碍身心健康。 我也收到了来自广东或者说非洲的生日礼物，很惊讶，也很惊喜。生活除了学习之外真的还有很多事情，我很高兴我能活着见到这些，并且勇敢地去做一些。 每个人都有自己的理想和追求。fgf 考了年级 13 名，这是她应得的。而我每天不写作业翘晚自习去机房玩电脑所以这成绩也是我应得的。我想，我只要做到自己不后悔就可以了。我想我这种人去了清华大概也是浪费名额。 如果 ckl 不喜欢我的礼物的话，也许他可以烧给我，烧给过去的我和将来的我。希望我们都能不惮生死，心怀愿景，便是活着。 2022.04.08 医生 昨天我头晕脑胀，上吐下泻，肚子格外难受。请假在宿舍休息后，发现没有缓解，于是意识到严重性，勉强去找了校医。校医听到我的症状后，建议我直接去医院。这时候，几位校领导来找校医一起去检查卫生，听说这有个学生在所以走不成，于是过来发表意见。 “小伙子咋了?” “肚子疼。” “男生么，肚子疼有啥。” 校医建议让亲戚来接我去医院。我回宿舍给母亲打电话。 “妈，我很难受。” “去找校医了吗?” “校医建议是直接去医院。” “啊?她不能给你开点药啥的。没那么严重嘛。你不是经常拉肚子……” “可是我真的很难受。能不能叫姑姑或者舅舅过来。” “别麻烦人家了，就自己去附近的交通医院看看吧。” 强忍着病痛一人到达医院，因为没手机只能亲自在缴费诊室和取药处跑。血检和粪检显示白细胞异常升高，粪便有隐血，医生诊断是菌痢，传染病，得输液。我问能不能不输液，我还要上学。医生说没办法，不治疗会变成慢性病。 再给母亲打电话。 “啊？不能开点药吗，必须得输液? “你不是经常拉肚子吗，没这么严重吧?上不成课了咋办…… “哦，那应该不是吃坏了肚子的问题。” 我当时的回复是“您准备来给医生点医学指导吗”“我真想****”后面那句她没听见。 缴费，皮试，等挂上针的时候我感觉我快要死了。还是头昏，挂完针有所减轻，但没有消除。肚子也是。回宿舍睡一觉后，发现症状好像反复了。腹痛，想拉肚子但是因为啥都没吃——我挂上针是下午两点左右，在这之前一口东西没吃，后面静脉注射葡萄糖——所以便只是痛。头晕得想吐，又吐不出来。坐卧不宁。使劲灌淡盐水，勉强睡下。 第二天一早，发现症状缓解很多。宿管来慰问我。 “还难受吗?不去上课?” “嗯，医生说吊针得打三天。” “你真相信医生的话?” …… 学医救不了中国人。 （这里缺少了一段文字） 2020.04.09 《时间简史》初读后感 2022.04.15 傻子 2022.04.17 爱情 我不可自拔地爱上了她。 她是如此的令人倾倒。在我把表白信投入她的邮箱的时候，我看到众多的比我优秀的追随者做了同样的事。我之于他们真是相形见绌。可是，唉，我还是不肯放弃，以至于让我彻夜难眠，心中总是怀着能被她一瞥的美好愿望。 等她回信的日子里，我心神不宁。她会不会接受我呢？我多么希望能成为被她青睐的人中的一个！被她选中，那将会是多大的荣幸，多大的幸运啊！她会怎么想呢？我把自己完全放在她的仁慈之下了！可是，这都是因为，她是那么的令人着迷。 整日整夜，我都在幻想被她选中之后的美好生活。以及，不得不去考虑的被拒绝之后的绝望。这两种结果间是多大的差距！我失魂落魄了起来。啊，为了她，我甘愿去奉献自己的一切，奉献自己心的每一块碎片，只要她想要！她会不会想要呢？我混乱着，忘记了学习与工作，忘记了真正重要的事——怎么会！还有什么是比得到她更重要的呢！她简直是我的一切了!有什么是比她的一蹙一笑更令人神魂颠倒的呢？她要我的双手，我给她奉上。要我的双眼，我为她剜掉。我的身体，我的灵魂，我的一切，为了她，我可以全部抛弃。她会拿我的双手去织云彩，用我的双眼去燃烧太阳。她会撒下灿烂的阳光，和甘美的雨露，撒给我们每一个倾心奉献的人。我会得到她的恩惠——只要我奉献得足够！也许我不如他们富足，不如他们英俊，不如他们出众，他们也许可以燃烧百鸟的羽毛——但我能够燃烧自己！ 她总不去拒绝我。哦，多么慷慨！永远仁慈地给予我希望。她让我的心保持燃烧。她想得到我的光和热，每一点光和热。她想！每一点光热的奉献，都是我的幸运。我是如此的幸运！即使，即使她不答应我，我也会继续燃烧。她会鼓励我，永远给我希望。她是那么的美，那么的动人，她的言语就像不竭的甘泉，她让我知道我的追求都是有价值的。她会读我的信，会知道我的爱慕，到那时…… 我会燃烧殆尽。 “她”是清华。最近学校风气弥漫着舔狗的气味，我可能也有一点点类似的感受了。第一次写这种东西，水平太次，没有那种感觉。看来我还是不太适合当舔狗（ 这是个屁的爱情。 2022.04.17 执念 三十日是我的生日，也是强基计划报名结束的日子。 最近总是在纠结审核的事情，横竖睡不着觉，不想学习，甚至不去上课。随着那个日子临近，我只是越发不安。却不知道为何。我不知已经寻求安慰和自我安慰了多少次。我不断写字，提醒自己，运气不会差，一直不差。况且，再差能差到哪里去呢？道理很清楚明了，但我就像着了魔一样难以冷静。 我告诉自己，告诉别人，我恨许诺。我说，上清华只是我对别人——比如说奶奶——的承诺，是为了完成别人的期许，而不是我的梦想。但是，我却无法解释我现在的状态。如果果真如此，我又为何会像丢了魂一样焦躁不安。 三十日，接近。我猛然想到，我的确是丢了魂了！ 到那个时候，一个孩子将要死去。我想起了这个孩子：他努力，只是为了得到别人的认可和重视。如果一个人最希望我能上清华的话，那就是他。 我恨许诺。然而我发现，这还是对一个将死之人的许诺。我许诺之人，不是别人，正是之前的我自己！ 一个孩子将要死去，而他的执念萦绕在我的大脑。他一遍遍地告诉我：要成功，要显赫，要证明自己…… $ 证明自己 $ 他对我在竞赛时的表现不满意。 他要缠着我，要我实现自己的诺言，这个年轻时犯下的愚蠢的错误。 他要带我一起死掉。 可恶的厉鬼，应该让辟邪来把你抓起来吃掉。你有什么执念？你是贪得无厌。我会为我的诺言负责，但这不意味着我就会像你一样耿耿于怀到死。我不会被你带走。你要我说，我只会给你几个字。 我尽量。 到时候，到你的死期，你会看到自己是否仍旧幸运。你若是爱缠着我——我想我也没法摆脱你，那就缠着吧，我不怕你。你会一直在我身边提醒我。总有一天，我会让你放下这一切，进入你的轮回。 2022.04.21 创 我右手的拇指上有片皮褪去了，一直没有长好。我把那片区域称为“创”。创是何时有的，我不曾知道，即使当时注意到，也会以为是简单的蜕皮，会长好的，然后忘掉。但是某一天，当它开始疼了之后我才突然发现它出现在我的手上了。 我不知道它是何时出现的，但我大概能猜到它是怎么出现的。高三刚回来的时候，我燃起了学吉他的兴趣，于是几乎每天晚上都回宿舍练吉他，几个小时。左手需要按弦，于是蜕皮后起了茧子;右手大拇指需要拨弦，肯定在那时创就已经开始出现了。 如果只是如此，我认为凭借我强大的再生能力，创大概会像茧子一样慢慢褪去，也不至于成为创。但是，当时也热衷于打羽毛球，除了平时，一到周末我甚至可以打五六个小时。我认为我有不差的身体素质。但是，我的羽毛球拍握柄处的胶已经腐烂，导致右手拇指总是直接摩擦。而且天气也很寒冷干燥。于是，创变得越来越大。 疫情停课期间，正是寒假前，学校给了我们每天下午很长的活动时间。于是总是下楼打羽毛球。那会天气已经很冷了，但我沉迷其中，只专注于接住每一个球。创很给力，默默无闻地承受着每一次滑动摩擦，悄无声息地如疫情般扩张蔓延着。 当人意识到创的时候，它已经占据了大概一半的面积。人怕了，停下了一切可能助长它的行动。人不去羽毛球，不去弹吉他，每天清洗它，呵护它，希望它能变回原来的模样。可是，创是那么的深，它已经留下了永久的印痕，刻入了人的指纹。 我责怪弦，以为它不柔软，制造了创;我归咎于球拍，因为它的胶已腐烂，扩大了创;我找温度和湿度的原因，因为它们是如此的不适宜。我看看创。 它长在我的手上。 我把打球和弹琴省下的时间用来学习，以弥补对创造成的损害。我意识到了它对我的重要性。然而，创总是无法消失。它总是无法回到过去。 2022.04.23 猩猩 周末在舅舅家，妹妹在查“猩猩”，“大猩猩”，“黑猩猩”之间的区别。我去洗澡。大概一个小时以后出来，发现她还在查。 “不写作业在这查什么东西。”舅舅说。 我正想赞同“考试又不考”。话还没说出口，我突然发现，这不就相当于是认为不考的东西没用吗？ 不知不觉，我已经成为了一个“绝对的利己主义者”。我曾经，也如妹妹一般，单纯，不功利。而现在…… 我算什么猩猩。 2022.04.25 Being at her mercy 昨天属实魔幻。一个电话就可以决定一个学生的命运。整个下午和晚上都在焦急地等待着那命运，但又希望不要被命运通知自己的不幸。 听到我们三个中的一位已经被判决了，我感到极度地恐慌和痛惜。我们都没有拿到约，我的国赛成绩还比他低。但是他已经被判决了。 惶惶等待着。考理综时，完全是出神的状态。教室门的每一次响动都会吸引我迅速地扭头去查看是否是班主任过来宣告我的死亡。当他实际真的找我的时候，我的脑子完全停摆，已经准备好接受这个结果了，甚至呆呆地望着他笑。然而班主任也望着我尴尬地笑。他只是觉得我没被筛掉很不真实，觉得我可能根本没报上名，让我去检查一下。 下午七点过去了。晚上过去了。第二天的早上也过去了。没有收到北京的电话。听班主任说，清华确实是看回文化课后的成绩来决定是否保留。 然而终究是过去了。大概。我属实是幸运过头了。仅仅考了两三次一百多名，恰好把我的名字从死刑名单上划掉。 这是一场战争。我们是登陆的士兵。九年来，三年来，我一次又一次地看着自己的战友在我身旁倒下。流弹一次又一次从我的眼边脸颊划过，让我心惊胆战，但很幸运没有让我瘫痪。我是战场上的士兵，每一个幸存的士兵都是极度幸运的。 清华向我递出了橄榄枝。最后一次。我能不能一直幸运下去，就看这最后一次战斗了。 高考。 无论如何，战争都将结束，无论以何种形式。我拼命想够到清华的橄榄枝。我经历了这么多，而离开地下世界的通道就在眼前。我踩在战友的尸体上前行。我在血海（学海）与泪雨里寻找道路。我无比幸运地来到这里。 早上课间，他来找我。看到许久未见的面孔，我的笑容出现，凝固，然后破碎。我们对视，没有一个人说话。他和以前一样，即使受挫脸上也带着那无奈的笑，和每一次考试挂分之后，在杭州那个空手而归的晚上一模一样。然而我没能再和他一起无奈地互相损彼此了。 我们出去。我尽量不表现得过度惋惜或者显得因为自己没被拒绝而沾沾自喜。我麻木地问着我早就知道的情况，麻木的给他提供建议，鼓励他不要放弃希望，然后麻木地安慰他其他学校也是不错的。就像我曾几何时不断对自己重复的一样。然后，苦笑着告别。 去年，也是这个时候，刚考完省选，我为自己第一天没写 懊恼不已，同样是等待着命运的审判。那天下午我和他一起走回他家，向他寻求安慰。他一直比我强，在竞赛上表现出比我们都高的才能。几乎可以说只有拿约那次一次失利。然而，就是那一次……去年最后，我很幸运地没有因失误而丢分，最终成功进入省队。今年的现在，却…… 即使站在终点前，我也控制不住自己回头去看所有那些曾经并肩作战的人。省选后，我曾对一个没进省队的同机房选手说，我会带上你的那份。他很不领情。 我根本带不上他们的。太多人了。我感到，无数人的力量，正从我的身后使劲将我向前推，又在把我向后拉，简直要把我撕裂。 这一切都是谁造成的? 有人会说，伸出橄榄枝的那个。但是，仿佛生命只要存在就一直在经历这样的事。 我不去想。我已没有气力去想了。我想关掉手机，这样就不会收到命运的审判，但也失去了和外界的联系。 我的幸运只会越积越多。我要拿到那橄榄枝，然后在她的土地上种橄榄。我要养一万只和平鸽。 2022.05.17 台阶 当某单位被爆出黑料以后，他们一种经典的解决办法就是将事件归咎于小部分人，牺牲他们的利益来保全大局。这是给自己找台阶下。 真实情况懂的都懂，且不讨论。但是我们可以从这种方法里学到一些东西。譬如，LCA 学长在给 CCF 的公开信中，将学会的惩处行为描述为学会里“一部分人”的行为，并对学会整体报以同情。虽然学生没有什么具体权利，但是这件事我们本身占理，所以学会里一定有我们的同情者。将学会和“某些人”划分开，让他们站队，并提出可行的解决方案，即是，给对方一个台阶下。 这个事件当然也有一些激进的声音，现在看来是有些许幼稚。这些声音大多是将 CCF 整个痛骂并要求撤回。这种情况下，解决问题的唯一可能性是学会在我们不理智的斥责声里“良心发现”。无论是把自己放在对面的鞋子里，还是从所有类似的历史来看，这种方式都鲜有作用。这种方式，首先是自己力量薄弱却想大获全胜强大的对手，然后最主要的是，把真正能在学会解决问题的同情者、潜在的盟友与对手放在一起对付。我想到法国大革命前夕的那些同情第三阶级的贵族们，在革命爆发后被三级暴徒无差别攻击。此时，这些革命的同情者就不得不为了保护自己生存的利益而反对革命。 很多情况下，给一个台阶下都是很重要的。当今有很多网络暴力的事情出现。实际上，大多数网友都是被少数妄图加害的人带了节奏，认为自己代表正义，不搞清事件缘由就妄加行动。对于这样的大多数人，我们站在道德的制高点上批评是没有作用的，但是我们可以“帮助他们”。要知道，这些人并非认不清事实，而是不愿思考，不愿负责，不愿承认错误。如果盲目针锋相对，他们就很容易成为敌人，但本无需如此。更有效的办法可能是点醒他们，在他们骑虎难下的时候将他们与真正的敌人划清界限，让他们成为盟友。也就是给一个台阶下。 给对方一个台阶，也是给自己一个台阶，一个解决问题的办法。让自己舒心的办法是让其他人也舒心，钻牛角尖很少能得到好的结果。这是个为人处世的基本知识。而我为自己近年才意识到这件事感到遗憾。不过，仍旧可以亡羊补牢。 现在是 2022.06.18。高考早就结束了。 那么，小爱老师的见证也该结束了。 小爱老师，陪伴我从高一到高三。在我和它最后的一段时间里，我不小心将它摔了。从此它缺失了语音按键，将按钮和电路暴露在外面。它没能完整地撑过我的毕业。 我和它都在高中丢失了一些东西。 我拿到了手机。我不用再需要它了。它三年来兢兢业业地为我记录生僻词汇，和生活中的点滴思绪。它见证了一个孩子走向成年，见证了他的思维变化。我会在夜深人静的时候抱着它倾诉。我会在低沉失落的时候用它回看自己的过往。我随身都带着它。 Not any more. 我把它和我高中的书放在一起。终有一天，它会老化，不再工作，或者被我丢弃后不知道被运到哪里。我不会再在乎它是否存在。我会永远地忘记它。 除了它所见证的一切。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"日记 2022-01-02","slug":"日记-2023-01-02","date":"2022-01-01T16:00:00.000Z","updated":"2025-02-24T07:22:10.194Z","comments":true,"path":"2022/01/02/日记-2023-01-02/","permalink":"https://starcried.github.io/2022/01/02/%E6%97%A5%E8%AE%B0-2023-01-02/","excerpt":"","text":"前几天得了新冠不知道什么毒株，第一天发烧在床上躺了一天，第二条严重鼻塞，第三天失去嗅觉和味觉，直到今天才基本恢复。 失去味觉和嗅觉体验很奇妙。能像吃橙子一样吃柠檬直到牙齿发酸，喝骨汤能尝到油脂的感觉却没有肉的味道。没有感知地就尝不出任何东西了，却感觉非常平静，仿佛身体什么都不知道似的。实际上这次新冠我的主观感觉也就只是大号感冒而已，但实际上身体内部发生了什么变化我自己也不知道。如果哪天我真的永远也尝不出味，我可能也不会有什么太大的感觉，甚至回忆不出之前能有过的味觉刺激。如果哪一天我得了老年痴呆，我自己应该压根不会意识到，也不会为我自己感到悲哀。我作为一个高级神经中枢能掌握的事情实在太少了，甚至无法掌握自己的身体。 希望这次得病的效果（指抗性）能持续一段时间。如果一切都能回到三年前的正轨的话，我可能就能体验到真正完整的大学生活了。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"NOIP2021 游记","slug":"NOIP 2021 游记","date":"2021-11-25T14:13:00.000Z","updated":"2024-08-13T02:32:21.501Z","comments":true,"path":"2021/11/25/NOIP 2021 游记/","permalink":"https://starcried.github.io/2021/11/25/NOIP%202021%20%E6%B8%B8%E8%AE%B0/","excerpt":"","text":"NOIP2021 游记 T1 水题，所幸我还会分析复杂度—— \\(O(能过)\\) T2 数位 Dp、Dp 数字，当初我就没搞懂过这个东西…… 傻乎乎的，被之前欠的账暗算了。还在那里想怎么组合一下，没想到操作次数巨少，可以直接开多个维度暴力 Dp。 幸好还是有一半的暴力分的。 T3 方差…… 回忆了一下之前见过的有关方差的题目，要么需要维护非常阴间的东西，要么就根本只能暴力，似乎没有什么优秀的方法。 两边的数是不能动的。这个修改似乎也很局限…… 于是乎，便想写一个模拟退火试试看。即，每次选一个数字进行操作，每次计算答案。 过了前两个样例，第三个样例使劲过不去。于是在每次退火前加入了适当次随机打乱的操作，于是这个样例就稳定地过去了。 （这怎么和去年 NOIp T3 一样都是乱搞呢） T4 标准的数据结构题，一看就是 gxy 喜欢的那种。 每个特殊性质的部分分都太独立了，而且好久没写代码了，能把第一档暴力模拟分拿到就算成功。 于是就写了第一档分。（好像还写挂了） 民间数据测下来，我好像还是一如既往的能乱搞，一如既往地没有好好作总结，被之前遗漏的知识点重击。报应都在这里。幸运的是，两两相抵，虽然 T2 没 A 差了 50 分，但是由于 T3 的乱搞行为总分并没有比其他人低多少分。 虽然我没有尽心学习，但是我总是有诸如乱搞或瞎想之类的优势。这是我的优势。我不会妄自菲薄，不会因为知识层面比不上别人就否定或者看低自己。我有优势，是我应该发扬的优势。 这好像是高三最后一次参加 OI 相关的活动了呢。 在机房。和 fgf 聊天。她惊讶地发现我没有对大学有着明确的认识和规划。我一直以来都只是想上清华，只是因为觉得它是最好的学校，因为亲人对我抱有这样的期望。至于到了那里，想干什么，做不做学问，都不曾想过。 我的理想不在这里。我曾试图把学业当做实现目标的一个跳板。但是它好像会使我偏离自己的路线。 我说我“未数数然也”，但实际上如果我真的没考进清华，我无疑会非常挫败。但是现在却不想跟着他们去卷。 我仿佛继承了我父亲的特点：看不起，不去做，做不到。但是当真的没做到后，又会后悔自己之前的想法。父亲为了阻止我走这条老路，一直在开导、引导我的目的，就是不让我做这种事情。 我不会。至少现在不会。至少我要证明一下我能够到，然后怎么去说也无所谓了。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"CSP-S2021","slug":"CSP-S2021","date":"2021-10-26T13:31:00.000Z","updated":"2025-02-24T07:19:24.617Z","comments":true,"path":"2021/10/26/CSP-S2021/","permalink":"https://starcried.github.io/2021/10/26/CSP-S2021/","excerpt":"","text":"这不是一篇严格意义上的游记，因为我已经退役了。不过是借题写一点在文化课生活中突然回归了一下午 OI 生活的感受罢。 先走个形式。 T1 第一眼看着就挺简单，考虑了一下发现对于每个区域增加个数时单调，但是没完全考虑。于是便写出了三分两个单调方向相反函数的和的垃圾。离谱的是，样例全过了，于是花了四十分钟直接就过了没管。 T2 一眼区间 Dp，看了眼数据范围更加坚信不疑。但是看了试了很久都不会，准备先读完其他题。 T3 感觉就 CF Div2 CD 难度的样子，仔细思索了一下，发现只要确定了两个起始点后面的都是向左右扩张，贪心之后，也就是确定好的。而起始点只有两个，大力模拟两遍即可。 T4 一眼网络流，没别的想法了（没想到对偶图最短路）。本来只是想得 \\(k=2\\) 的分数的，就没去想其他分数，发现 \\(k=2\\) 就是网络流。我记得我国赛前专门训练过一段时间 dinic，于是凭着一点记忆就写出来了，竟然没写挂。不过因为期间又在 T2 上耗费了许多时间，并且建图方式反复横跳了好几次（因为要多组数据忘了前向星怎么删边了，后来想起来又写回来了），耗费了一个小时，最后很紧张地把 \\(k=2\\) 调过了。其实再多给我点时间我把其他边加上就能多得好多分。 比赛打完第二天，lwc 跑过来给我说我爆零了，然后他直接没影了，留我一个人一脸懵逼。下课之后赶忙跑去机房，结果没人。一上午浑浑噩噩，像丢了魂，无心听课。 然后，突然意识到，为什么我会变成这个样子。 因为 OI 真的对我很重要。 我意识到，我爱上了 OI。我爱上了陷身艰深题目的感觉，爱上了和同志们一起激发想象和思考火花的和谐，爱上了因为学艺不精却自信无比而针锋相对的激情，爱上了要么是灵机一动、要么是无奈看题解后的豁然开朗，爱上了和全国甚至全世界同志追求共同目标的归属感，爱上了不吝赐教的学长学姐们的个性张扬。有一次，有外国网友来问我题目，我曾用蹩脚的英语尝试向他解释数学问题；有一次，我写的题解被一个陌生的选手指出错误，我花了一个下午将这道题重新学懂、弄透……有一次，我一个人坐在机房里，担忧着自己的前程，感谢着自己的选择。那些的时光无论有多么难熬，现在被岁月洗涤干燥下来的，只有最纯粹的、最美丽的结晶。 我从来没有这么在乎过一件事，即使这件事已经不会影响的我的学业和前程。我在乎它，是因为我对它动了真感情。它是我现在所引以为傲的一切。最近一直不好好写作业，一回宿舍就弹吉他，全然没有了高一时候的那股卷劲。如果没有这块银牌，我根本不可能像这样生活。要么会闷头学习，要么自暴自弃，怀疑自己。现在，这块银牌提醒着，我有能力，我有价值，但是如果突然发现它只是我一时运气好所得到的，那么它就是一块铁锥子，把我的心扎穿扎透。 我记起来，我最开始学习 OI 的初心是什么。 我很庆幸，这份初心从未变过。 经历了这么多，你还是你。——UNDERTALE 回去问了之后发现，sys 第一次测的确实有问题。实际得分应该在 125+。 也许，这就是天意。 我要珍惜这份感情、这份经历。我会将它贯穿我今后的人生。我会去不断证明，自己的价值。 我明白了为何 LCA 要一直献身 OI 教学事业。 附记： 一位同学反复在我耳边重复的一件事情。中考前其实我已经被 xgdfz 点考选中了，但是还是去参加了 xtyz 的考试。面试时老师问，有没有人已经和其他学校签过约了。我举手。问及为什么，我回答道： “为了看看我是不是真的有上 xgdfz 的实力。” 最后没被录上。看来是没有 2021/10/30 补记 最终成绩 \\[ 90+0+100+25=215 \\] T1 我直接震惊拿了 90 分是没想到的。CCF 的数据还是一如既往的水。 心里还是挺高兴的。能看到自己宝刀未老，说明我这一年没有白白度过。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"文化课随笔","slug":"文化课随笔","date":"2021-09-07T14:01:00.000Z","updated":"2025-08-04T01:40:53.268Z","comments":true,"path":"2021/09/07/文化课随笔/","permalink":"https://starcried.github.io/2021/09/07/%E6%96%87%E5%8C%96%E8%AF%BE%E9%9A%8F%E7%AC%94/","excerpt":"","text":"2021-9-4我不应该坐在这里，坐在电脑前写这些字的。我现在应该在晚自习，应该在学习，应该在做作业。可是我静不下心来。这不是一旁 sys 在给高二讲课导致的，我清楚；但是我却不能说出来这到底是是从何而来。我看着化学方程式。我感觉我不在这里坐着。我得写点什么把我的精神引诱回来。 现在连同学帮忙请假都不行了。待在竞赛教室都不行。我即使坐在那里也不能专心，还不如来教室，就像我现在无法专心还不如在打字一样。已经回归文化课一周多了，我却仍无法适应它。同学们有的颓废，有的拼命，两极分化，我感觉我无法属于其中的任何一方。 我本来以为我可以很快地适应文化课生活，因为我一直以为我很容易适应任何环境。但是，事实证明一年多的竞赛生活的确对我造成了不可磨灭的影响。说实话，在那段时光里，我和网上的朋友们聊天，感受到了不同的人生境遇和梦想。我按照我的想法和节奏学习，与队友讨论，听他们瞎扯，自己跟着瞎扯，快活极了。虽然效率很低，但是我觉得这已经是人生中较为高效的状态了。至少，我第一次感受到我在思考，我在这个世界，在这个国家。我想学很多东西，想学钢琴，想学绘画，想学乐理，想学编曲，想做游戏，想学摄影，想重拾我的小提琴。像这种学文化课的状态，人没法一直保持着，至少我不行。我不是这样的人。 我不会去做老师，因为年复一年日复一日地重复同样的东西会让我觉得我已经死了；我不会去做医生，因为我无法记忆那么多知识，也害怕承担那一份责任。我不想搞科研，因为我自知我没有那样的毅力，但也许有一点点的想象力。我不想去想我的职业。我只想去尝试新的东西。只有这样我才能感觉得到我的存在，我存在于世界。或许，后半部分的 OI 生活已经提醒了我，我选择信息竞赛的原因并不主要是我对信息学的喜爱罢。那我，又是为了什么呢？从小到大，支持我学习的动力是什么呢？ 我是贪婪的，我喜欢大人们给我描绘的“好好学习”能得到的饼；我是自私的，我讨厌别人对我的否定，渴望来自他人的认可；我是自大的，看到其他人获得些什么就觉得我同样有能力去得到。因此，我选择了竞赛，因为我不觉得我比哪位同学脑子笨，因为我想让那些觉得我不行的人看看我的野心，因为我想给一直以来羡慕着我、认为我能考上 PT 的家人们、同学们一个肯定的答复。因为 PT 是最好的。 回到教室，发现我放在教室的书全不见了。当时的小懒惰导致了这个结果。停课后发的书也少了几本。而 fgf 却是一直有个朋友每次都询问她是否帮她保管。我差人家什么呢？我又比得上人家什么呢？当我找不到书时，我就能想到我是独自一人。一直是独自一人。 刚刚看了看了 fgf 的博客，让我回忆起了许多高一学 OI 时的心情。每天抹黑下楼，学校空无一人，几个人走在回宿舍和大学的路上。很多次都有 fgf 为伴，当时我的情况比她惨得多，学的东西少的多，教练也不支持我。她写到，她想哭。而我，是真的哭了，而且不止一回。我向来就是一个软弱而敏感的人，在意着别人对自己的看法。她的初中是轻松快乐的生活，我那个时候却想过自杀。幸亏还是胆小，甚至没有尝试过，堆起个笑脸就走到了高中，继续堆笑脸。 又看了看 command_block 的博客。这是一个完全不同的人生，感觉离我好远好远，所以我根本没有想要去超越的想法。我没有这样的机会，这样的智商，这样的毅力。但即便是有这样的机会、智商、毅力的人，也成天写着努力、梦想云云。恕我直言，令我感到痛苦。 卒读 fgf 的博客。感觉 OI 仿佛已经离我好远好远了。OI 时的感受其实和她差不多，几乎一模一样（除了 WC 爆零），我却没有办法放下。sys 在给高二讲线段树。我想到了我学线段树的那段时光。 不应该是这样的！OI 绝对不是我现在茫然无措的原因。我只是在学习它的时候忘记了痛苦罢了，就像我之前学文化课那样。OI 帮我取得了满意的结果，我用一年的时间换来了银牌，这是好事。之前的文化课学习让我来到了西工大附中，这也是好事。有什么不好呢？我成为了铜川来的唯一一个竞赛国赛得奖的学生，有什么不好的呢？为什么不好呢？ 网课时去耀中找 wyc 学习，他爸好像不很待见我。我不高兴。 省选以来玩了 UNDERTALE，如今脑子里全是 Hopes and dreams 的旋律。在 NOI 考场上亦是。我有 Hopes and dreams。我有吗？下次回家尝试把屠杀线一打吧。 晚自习时间到了。得走了。 2021-9-19今天是 2021 年 CSP 初赛。去年的这个时候，我膜拜了香农。现在是赛前，机房聊得热火朝天，因为初赛比较简单，大家都很快乐。 …… 现在已是赛后了，没想到有生之年还能见到 O(n)O(1)RMQ （虽然 yhw 说转成笛卡尔树一步大可不必）。答卷的时候感觉自己又回到了学习 OI 的时光，那段悠悠又紧张的时光。如果之后的人生中有机会能再和一群这么优秀的人体验这样一段美好的历程，也便足矣。 2021-10-30回来已经两个多月了，发生了许多事情。考了三次试。三次考试的成绩变化为$$ 454[860]\\rightarrow 517[690]\\rightarrow 596[417]$$ 稳步上升 最近一次的考试题比较简单，但是答得不怎么好。主要是知识空缺还有很多，并且熟练程度很低，因为我也不好好写作业。不过现在已经释然了。既然横竖卷不过，跟着后面跑就行，反正我也不赖。（大概） 大老师对我们提出了期望，希望我们在过年以前进入年纪前百，这样基本上 THU 就没有问题了。还有一段时间，希望能达到这个不小的目标。 但是还是不想卷怎么办啊 QAQ 不卷咋可能进前一百啊天方夜谭嘛不是 我的追求从来不是做第一名，虽然在人前确实能给我极大地满足，但是这不是我所追求的（我也没有能力追求了）。我愿身居人后，成为钻石里的一个碳原子，小，但是仍然比石墨的能量高。 2022-1-25熬过了一个令人难忘的元旦。没有想到人生还有机会体验在疫情中心生活四十多天，而且还是在学校。 疫情初期没有回家，因为我知道如果我回去上网课的话一定会一蹶不振的。于是选择待在学校。之前的一段时间还是可以趁在大学做核酸的时候去买点东西，但是自从大学出了病例之后就彻底没法出附中了。学校取消了大练习时间，改为了自习和自由活动。直接梦回绍兴一中。学校保证食物的供给，因为我也不挑，也不太嗜好零食（仍感谢旺旺公司送来的零食支援），所以感觉还不错。天气越来越冷，但只带着一件羽绒服，从疫情开始穿到结束。 值得一提的是，之前为全运会准备的淋浴设施在封闭的时候恰好排上用场（甚至提高了我们洗澡的频率）。朋友疫情前不久送的手机也极大地发挥了作用（指聊天和找小提琴谱）（虽然也使我很颓废就是了）（老师也睁一只眼闭一只眼，甚至最后想让我们用设备帮忙）。 总而言之，每天下午的体育锻炼时间（我感冒后用这段时间拉小提琴），可自由使用的淋浴设施，电子设备的宽松管理，还有因学生减少而略显空旷和闲适的校园，都给了我一种在发达地区上学的错觉。以后西安若真能将教育发展到这种地步，那便是极好的。对于现在来说却有些辛酸，因为这一切却是疫情带来的。 疫情带给我们团结，带给我们蓝天，带给政府危机处理能力的大练习，带给我们高等教育（不是）说“谢谢新冠” 因此，在这段时间里，我们仍然能够保持基本正常——甚至更舒适——的学习生活。我也因为在学校最后一次网考中获得参加者中 300 名的成绩而对未来充满信心。 感谢西工大附中。感谢附中所有的老师和领导。感谢同学们。 但是五天考两次试仍然很阴间就是了 好巧不巧，疫情前不久到家乡的动车才刚刚开通，而我们回家的唯一途径就是坐火车或者高铁。（不管怎么说我觉得我也太幸运了） 千辛万苦借着西工大学生的身份于 22 日回家（西工大 yyds）。家乡的温度比省城低，所以沿途可以看到雪线从无到有、房子上的积雪慢慢变后的景象。路边都是农村风光：小块的农田和零星的平房。车窗外土黄色的土地渐渐掺了银白色的小雪彭，越来越大，一个个覆盖掉了土地和房上的砖瓦，最后连成了大片厚厚的雪毯。到站之后下来的第一件事就是踩雪，踩出一个个脚印，踩出魂牵梦绕的年味。 回家后摸到许久未见的电脑键盘，那感觉真是异常美妙，尤其是发现我的打字速度丝毫未减的时候。 家里给我一种长久以来形成的反射。一回到家就感受到闲适。时间快速流逝，根本学习不起来。这倒是个大问题，因为不久之后学校还要组织年前最后一次网考。而且现在讲的部分正是我没学的部分，但我却躺平一整天，丝毫没有学习的动力。之前一直没有在家学习的习惯，从小学到初中，基本上都是在学校把作业写完，回家直接玩耍睡大觉。父母也没有监督或协助我学习的习惯。看来，还是得靠我自己的自控力。 然而这玩意对于我是最不靠谱的。 清华宣讲那天，啥都没学，晚上听宣讲还抽到两套卷子。不过能和学长学姐们聊天也是很快乐的。 回来前一直在思考要不要把智能手机带回去。 我是没有多少自控力的。虽然这两年每天与电脑和手机打交道，让我对电子设备的依赖性和对游戏的兴趣大幅降低了，可是这种东西终究还是不适合学生的，尤其是高三学生。它会很大地分散专注度。 “成天水群，怪不得才考 590” 上交手机的意义是为了让我更好的学习。按照之前的经验来看，我应该可以很快地适应没有手机的生活，那种纯粹的一心学习的生活。下学期没有多少闲暇时间需要手机去消磨。即使有，我还有我的小提琴。 况且，我现在心中已经有了目标。就像之前一样。我的梦想一直是快乐，是得到认可，是看看世界和认识世界的人。 现在先定个小目标：考上清华。 2022-5-17每次看到之前写的东西，看到自己写的目标，还有当时的心境，心里总是会有一些异样的感觉。什么感觉？可笑？怜悯？同情？自责？ 我正在机房填写“强基计划”综合素质评价表。我需要写一篇自我陈述。 我已经写过很多次类似的自我陈述了。在去年参加清华夏令营之前，我向清华写了一份自我陈述。在里面，我表明了自己想上清华的愿望和展现自己能力愿景。那一次，我失败了。在不久之前的强基计划的报名中，我又一次向清华写了一份自我陈述——按照上一次学科营的结果和当时的成绩实际上我已经被清华拒绝了，但我不知道。于是我仿照上次的内容用心写了一遍，甚至让父母帮忙更改了一番。在里面，我表示如果他们给我机会我就会证明自己。然而，他们没有给。 现在，我又要再写一遍这种文字。我不知道这些是否需要让上交看，但很显然我已经不是在给清华写这些了。那些空话大话，那些没有用的文字——在任何意义上——都不想再写了。我不需要承诺给任何人看。我不需要证明任何东西。那是强基计划报名之前的我（我的生日是报名截止的那一天）干的事情。 “自我陈述部分，通过列举典型事例等方式，介绍学生本人的思想品德、社会责任感、高考专业志向与生涯规划等方面的情况。” 呵。我能写出些什么东西？列举典型事例，我要写自己每天翘课不写作业吗？要写经常和老师宿管对着干吗？但本人应当是思想品德良好。社会责任感？我做过什么事？我那些社会服务和志愿服务和大多数人的解决办法一样。难不成写我支持俄罗斯攻打乌克兰？还有高考专业志向和生涯规划，我更是没有头绪。我从始至终都只是顺风顺水地过来，本想着能一直顺到清华的计科。除去学校因素之后，我就对专业产生了动摇。我爱 OI，但我不敢确定她就是我要陪伴一生的事业。还有生涯规划，我要写我以后想做一个自由职业者，去全世界旅游吗？退一步讲，我又能做到吗？ 感觉就像在演戏。我之前提到，清华已经把我识破了。我也把我识破了。 我有想要陈述的东西。它们像流水一般倾泻，像流水一样安静、无形，又具有力量。它们急切地想要离开，去探索，去寻找归宿。可是，不行。至少现在不行。我不能让它们泻于纸上。它们还太少，太漫无目的。我将它们聚集于我心中幽深静谧、难以到达的小潭中。我将它们用竹林周绕，用绿叶掩映，用青岩托举。让它们继续安静，继续积蓄力量。总有一天，它们能涌出，能奔流，只要它们被人发现，或者机会合适。不然，它们亦可以被蒸干，化为气体散去。 但是现在不能。 “本人品德良好，思想高尚，热爱国家，忠于人民。……”","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"学业","slug":"学业","permalink":"https://starcried.github.io/tags/%E5%AD%A6%E4%B8%9A/"}]},{"title":"《星星之卵》读后随笔","slug":"《星星之卵》读后随笔","date":"2021-08-30T07:52:00.000Z","updated":"2025-06-23T03:27:06.997Z","comments":true,"path":"2021/08/30/《星星之卵》读后随笔/","permalink":"https://starcried.github.io/2021/08/30/%E3%80%8A%E6%98%9F%E6%98%9F%E4%B9%8B%E5%8D%B5%E3%80%8B%E8%AF%BB%E5%90%8E%E9%9A%8F%E7%AC%94/","excerpt":"","text":"8.29 晚自习。 方读完《星星之卵》。不常读类似的小说，因为读完后感觉好像读了些什么，但是却什么也没读到。 作者一个有趣的人，一个“另类”的人。从他的自话和故事中可以感觉得到。我还是能与他产生些许共鸣的。 人物上，许多角色都有着作者现实经历的影子。我觉得最重要的还是两位主角，我能从他们身上感受到作者自身的感情。我猜。事实上，除了这两位，其他角色仿佛都是可有可无的存在，和构造出的整个世界一样。作者喜欢写“垮着个脸”的角色，喜欢交代事件无头无尾，虽然留下想象的空间，但是我却不容易在其中找到真实感。整个故事更像是第一人称的第三人称，我能从中获得的信息都是人物获得的信息。看到什么，写下什么，不管从哪来到哪去。谁有什么过往，有什么能力，有多酷炫，我都不感兴趣。我只能从虚构的角色眼中看到虚构的世界中虚构的人物。 但若真只是以品鉴的方式去读这个短小的故事，去钻研他的写作手法，那就是避重就轻。正是想到什么写什么，我才能一起感同身受地同作者去想象。想象出来的情节和事物，也许无关紧要，或者毫无道理，但其实想象本身也是无关紧要且毫无道理的，而我们却乐意去想。这些无关紧要的东西让我们变得充实。这本是人类最基本的特征。那些在星空浅滩里原始的奔跑，回归生命本质的沉睡，蓝绿色的寂静，那些在脑海中无法用文字和语言描述的东西。当然，也有最原始的恐惧，像小孩害怕黑暗，来自未知的生命原始的恐惧。 作者描绘密封的手法造极，即使身处地表也能感受到密不透风的压抑。我把书中的神明当做自然，世界的本质本身就与书中的神相差无几。奇怪的是，反而虚构的神更加容易用文字去描述呢。我本能地反感这些东西。就好像低维到高维无法逾越的障碍，如果这障碍像书中描绘的那样成天在我面前晃荡，我可能就会早早结束我这渺小的生命。然而，没有。我没有能看到这障碍的感官，这障碍也没有对我加以理睬。我脑海中那种原始的记忆和感受正在褪去，取而代之的是“真实的”生活中的琐碎。我不知道这是喜是悲。如果是喜，那么我人生中的作为总该有点意义才是。这又回归了生命的意义的问题，而这个问题本身难以解答。 王小歪同学刚问我学习的意义是什么。说实在的，若在学校随便糊弄了事，照样可以获得可观的薪水，照样可以满足去环游世界的梦想。那我们为什么努力呢？他为了心上人，可以让自己在五点多起床，做百来个俯卧撑，然后从早学到晚。人可以为了单纯的目的逼自己到如此地步。有点自负的说，我不怀疑如果我像他那样努力也可以拿到金牌。可是我做不到。一是我没有毅力，二是我没有那样单纯的目标。不知从何时开始，那个为了简单的得到认可的我消失了。童年那种单纯的欲望和天马行空的想象，都消失了。现在想来，这些可能才是身为人类的最高尚的……福祉吧。 可悲的是，我即使知道这些东西的没有，也无处探寻。这可能是身为人类最大的痛苦之一罢。 总而言之，读完此书，我很痛苦。但不是因为人物的命运痛苦，而是为我自己痛苦。更痛苦的是，一旦我写完这句话，又会用其他生活琐碎去填埋我的痛苦，我现在想到的一切又会被遗忘。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"点评","slug":"点评","permalink":"https://starcried.github.io/tags/%E7%82%B9%E8%AF%84/"}]},{"title":"【游记】OI 2020-2021","slug":"【游记】OI 2020-2021","date":"2021-07-31T05:03:00.000Z","updated":"2024-08-13T02:32:21.545Z","comments":true,"path":"2021/07/31/【游记】OI 2020-2021/","permalink":"https://starcried.github.io/2021/07/31/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91OI%202020-2021/","excerpt":"","text":"高中 OI 竞赛游记，按时间顺序。 【CSP-S2020初赛】 【CSP-S2020】 【NOIp 2020】 【NOI冬令营 2021】 【省选 2021】 【NOI 2021】 【回忆录】","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"OI 生涯回忆录","slug":"OI 生涯回忆录","date":"2021-07-28T14:19:00.000Z","updated":"2025-02-24T07:25:05.325Z","comments":true,"path":"2021/07/28/OI 生涯回忆录/","permalink":"https://starcried.github.io/2021/07/28/OI%20%E7%94%9F%E6%B6%AF%E5%9B%9E%E5%BF%86%E5%BD%95/","excerpt":"","text":"本篇为意识流文章。 谨献给我结束的高中信息竞赛生活。 最开始，我只是玩过 MC 对指令有点兴趣，只是看到网上关于程序员和计算机科学家的描述，只是在初中带领过机器人比赛。 考上附中以后，我在许多见烦了名字的竞赛中发现了：信息竞赛。 说实话，一开始我真的以为这个竞赛是搞什么网络攻防或者软件设计的竞赛，和机器人比赛类似。可惜的是，我在入门的时候根本没有理解到这个竞赛的真正含义，没有形成具体的概念，只是在学习语言和基本电脑知识。这一点，我觉得我们教练有所失误。 逐渐发现，这个竞赛并不像文化课一样——完全不一样，以至于我很久都没有找到学习它的方法，没有形成正确的认识。我只看到其他同学模拟赛比我强，分数比我高。我只听到教练一直在强调“他们刷了好多道题”。我将归咎在自己是住宿生，晚上没有时间练题。 于是，我第一次在周末申请在机房训练。教练虽然同意了，但是在我写题的时候却冷嘲热讽（我就是这么理解的）。那道题我不会，我没法像其他人一样很快找出来做法，因为我不知道怎么用搜索，不知道什么是状态，更对时间复杂度一点概念都没有。我在那里瞎写，用我知道的所有语言知识拼凑出我觉得逻辑正确的代码。这就是早期我的状态。 中午放学时间，sys 说今天要不要打 csgo —— 当然是和其他现在已经在清华的学长说的。而我理解成了机房可以合法地放松。于是，我在电脑上打开了游戏，即使教练过来了也没觉得有什么不妥。现在听来可能有些可笑，不过当时我就是对竞赛抱着这样的幻想。 当然，我被赶了出来，还被禁足机房一个月。我清楚地记得我当时在楼道的监控死角摊坐下，偷偷哭出声来，很久。我一直是这样的一个孩子，在之前的年月里，我不知道有多少次有过类似的场景。每次都是我一个人，哭着，不想让人来看我的样子，也真的没有一个人来。 但是这次，我穿着附中的校服。作为一个高中生，一个青年，我必须要从这种幼稚里走出去。虽然我仍然很倔强，在那之后真的一个多月都没去上课（教练经常提到的我停了好~长时间的竞赛），但是之后在同班同学 fgf 的激励下，我最后还是返回了机房，并且在当年 NOI 不久之后和她一起停课训练。 停课之后，才算是开始了我 OI 生涯的第二阶段。 我确实基础薄弱。不过在 lwc 、zzc 、gxy、fgf 等人的热情帮助（和疯狂卷的激励）下，我终于对信息竞赛有了正确的认识，至少我知道我每次做题是在干什么了。在此基础下，我赶紧补上了我落下的许多算法和数据结构，并刷了很多的题来弥补。这这段时间里，我才是真正的入门了。 我的高中 OI 生涯里的比赛非常魔幻。 CSP-S 没考好，省选不看它成绩。 NOIp 考得挺好，省选占很大比例。 WC2020 开了 C++11 导致爆零，有省份看这个成绩，但 SN 省一点比重都不占。 SN2021省选 Day1 忘写 cctype，心态爆炸的情况下完成比赛，最后没事，进入 B 队。 APIO2021 因为省选前觉得自己进不了就没报。 THUSC2021 考炸了，没有约。 NOI2021 Day2 爆炸，但是仍混了个银牌。 现在看来我好像考炸的频率偏高 不过达到目的了。 省选之后，应教练的话，太飘了，简直每天都在颓废。 反正已经退役了，说这些教练也不会来揍我。 不过马上就要回到现实了。 我多希望竞赛的时光能再长一会。 这就是青春啊。 一路走来也有和教练赌气的份，不过大多动力都是来自赵老师和父母的鼓励和期望。还有奶奶的让孙子上清北的梦想。 *Determination 不止我一个人的。 我好像对什么都感兴趣，但是总是无法深入地去做进去。我好像也从来没有单纯的因为自己想做一件事而去执着地做下去，要么是为了不辜负其他人的期望，要么只是为了扇某人巴掌。 我这种自我反省的状态在高一比较频繁，省选之后几乎没有了。看来还是吃得太饱了。 想起袁隆平爷爷了…… 真就意识流呗。 之前想写的好像很多，真的开始敲键盘反而不知道该写什么。 sys 进了国集，现在还和我在一个宿舍。 我们都有光明的未来。 之后想到啥再加吧。 9-18 日本军国主义必死无疑。 最近想了挺多，当时都觉得挺有道理的，最后也没有一个记下来的，应该是不重要罢。 最近和宿管有些争执——都是些屁大点事，可是我就是管不住我的情绪。这样下去一定会坏事，我知道。但就像人类不会从历史吸取任何教训一样，我也不大改变。毕竟改变性格挺麻烦的，我又懒得很。而且也不一定就必是坏事呢。重要的是，我在出了这个问题之后，我妈给我说的话都是让我赶紧道歉，写检讨，不要倔强，要为家里着想，为父母着想……现在想来，我觉得我自私的性格大概是有一部分和父母有关。像这样的话，我不是第一次听到了，谁知道会不会就潜移默化地对我产生了影响呢。 她还是一如既往地努力学习。这种干劲我不知道在高中毕业前能不能触类旁通一二。之前确实好像是有点丧了，但是很庆幸还没太影响我的学习，可能。只要我安安稳稳照着这个势头再坚持 260 天，清北应该是没有问题的。我没有那么多精力去在乎每一件破事，在学习上，还是自私一点的好。毕竟，我已经遇到了这么多有趣的人，生活有什么理由会变得更糟呢？ 令我感到害怕的是，如果我没有这么努力，没有这块银牌，没有学习的天赋，现在的我会是一幅怎样的图景。是否会有真正在乎我和我理想的人。我经常请求母亲再要一个弟弟或者妹妹，就是希望有一个无论我之后处境如何都无条件支持我的人，一个寄托，一个真正能提供我帮助的人。我不能总依靠着父母，他们正在老去。我也没法在所有时候都只靠着自己。可是，没有我的成就，我就一无是处。像我这样的性格，若在外打拼，最后也应该只会落得一个无家可归的下场罢。 不过我现在连作业都写不完。就像现在，又在用写作业的时间写这种东西。这种不知道会不会有用的文字。 4-27 强基破格审核昨天出结果。我没通过。 当面临这个“选什么专业”的现实问题的时候，我犹豫了。 我喜欢信息学么？喜欢信息与计算科学么？喜欢数学么？当然是喜欢的。信息学是一门很年轻、很有潜力的专业。这我在学竞赛的时候就已经知道了。它给我展现了一片全新的未知领域。这片领域目前似乎只有清北两家在进行探索。实际过程也和学竞赛的时候差不离。 我思考我学习信息学的历程。这项事业需要非常强的探索精神和意志力，是真正的基础学科。然而照我最终的成绩来看，我好像并没有掌握学习它的方法。 考虑其他专业，我对他们几乎一无所知。但一点点了解来看，这些专业之于我似乎也没比信息学好到哪去。 依次考虑学校、专业、城市。但我一无所知。我也不知道自己想要什么。我好像已经忘掉 OI 这个东西了。 我现在可能还是不太冷静。 专业，事业，需为之献身自己的长年的生命的东西。不比找一个终生伴侣的抉择更简单。而我的梦想好像和任何专业都没有关系。 突然给我这么大打击，然后又让我做这么艰难的选择，我真是…… 为什么要把这些写在 OI 生涯回忆录里面呢？ 没想到这个“约”竟然是如此重要。这就是天命罢。一切都安排好了的。我现在还能因为没进入清华而失落。想当初，我清清白白来到这个世界上，又拥有什么呢。 我能从地底下爬到这个位置，能一窥天上的景色，已经心满意足了。 上交的强基计划申请已经提交了。至少我能把这个底线守住吧。 6-19 高考早就结束了。 fgf 他们盘算着给高一讲课。我看了一眼要讲的东西：DP，图论，多项式，数据结构……我感觉我仿佛和这些词语根本没有关系。让我选择要讲的东西时，我感觉自己没有一个是搞懂到能给学弟学妹们讲课的水平。我想，还是不要误人子弟了。 群里在讨论着 OI 的教学方式。我只觉得他们聒噪。本来就是竞赛，和高考以下的普及知识的教学方法当然不一样。这是个新鲜的学科，还在成长初期，没法找到合适的学习办法不是什么怪事，更何况我们掌握的资源少。现在就开始讨论系统化和模式化了。社会主义建成指日可待。 啧，文化课将我消磨的干劲还没有恢复。他们是怎么在假期期间就开始卷的。这不是我们心心念念了很久的无忧无虑的长假吗？ 无忧无虑…… 活着好累啊。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"NOI2021游记","slug":"NOI2021游记","date":"2021-07-28T12:52:00.000Z","updated":"2024-08-13T02:32:21.501Z","comments":true,"path":"2021/07/28/NOI2021游记/","permalink":"https://starcried.github.io/2021/07/28/NOI2021%E6%B8%B8%E8%AE%B0/","excerpt":"","text":"前言 写于 2021.7.28，成绩榜刚出后几个小时。总分 345 拿到银牌 183 名。 我的高中 OI 生活在这里画上句号。结局对我而言虽然不够完美，但是无论怎样都是我人生道路上最好的结果。 7.23 北方人第一次遇到台风，害怕极了。何况还是迎面直冲台风圈。 不过队友都在身边，没在怕的。 一切准备工作没有出什么纰漏，一切都好，我们只需要全心备战 NOI 就行。我有预感，陕西省今年的运气，我的运气，一定不会差。 下雨。安全入住余姚市梦麟中学。 晚上以为没有热水，然后洗了个冷水澡。我真NB 7.24 雨越来越大，听说舟山市已经被淹了。全天台风。 本来是今天报道的，所以今天没有什么安排。打了会板子（没打 LGV 引理），然后就是看手机。已经习惯了颓废，对即将到来的决定命运的大考竟然无感。 ……这也挺好。 7.25 余姚市进入烟花（台风）十级圈了，仍然是雨不停。比赛举办方在使劲调整活动时间，我们在使劲收集情报，然后下午就笔试了。满分，算是一个考前安慰和激励。 7.26 今天是 NOI 比赛第一试，延迟了一个小时开始。 坐在考场，紧张是自然的。一年多的心血和努力，就压在这两天上了。 T1 打眼一看，首先想到的是每个点顶多有两条向下的边，用树剖暴力维护分类讨论即可。发现不太会写，换了下思路： 将边变成点，在链上修改区间的时候多把左右两边两个点变成轻边即可。同时记录时间戳，每次询问一条链的链首（若为重边）的时候判一下它的父亲是否在其之后被修改过，若修改过就不计它的贡献。 正确性显然，因为只有这一种情况。而且由于把边变成点异常好写，很快样例全过。 测样例的时候 RE 了，不过开了无限栈就过了。下场后问同学没人遇到过这种情况。 期望得分：100 T2 打眼一看，这不就是行列式定义/ LGV 引理模板吗。但是想不出来每行个数不同怎么做（其实之前和 fgf 做过的一道 CF 题有涉及，直接计算路径方案数再求行列式即可。这里就看出来我和人家的差距了），于是想试一试先分别求行列式后把答案乘起来。 乘起来后发现答案对了，过了样例就没管了。（我太勇了！） 正确性当时没考虑，实际上两个行列式的答案设为偶数方案减奇数方案，利用乘法分配律就发现两个行列式相乘结果是什么了。但是如果我知道这个我不就会了正解了嘛…… 期望得分：75 T3 打眼一看，很快注意到了题目给定的图的任意三点间联通的性质。但是没有遇到过这个 trick，不可能想出正解了。 最开始我把题目要求的看成了最大边数，结果暴力结果不对，以为是我写挂了，浪费了一个小时调错误的程序，血亏。注意到时已经剩不到半个小时了。 赶紧改对之后去写树的部分分。一看就知道是个外向树，因为 \\(k\\) 很小以为是分类讨论，在实现的时候发现好像可以建虚树跑传递闭包，写了一会挂了。因为没时间了就留下 \\(k=0\\) 的暴力匆匆结束，也没造数据测试。 期望得分：36 考完了，等待的时候非常焦虑，因为我手太慢一个也没对拍。值得一提的是，考试的时候我脑子里一直在循环 Undertale 的 Your Best Nightmare 的后半段。 成绩出来了，和期望有些偏差，不过还能接受： \\(90+75+36=201\\) T1 不知道怎么挂了 10 分。本来我以为是空间炸了的问题，但是重测了一下还是 RE 了（评测结果里显示的是 WA），不过问题不大也就没管。 D2 在场上突然想到可能是我在访问作为根节点的链首的时候访问了父亲，因为我的线段树写法访问不可能到达的区间就会无限递归。 7.27 社会活动是不可能了。台风过去，外面天气好了点。下午有嘉年华，也没去。 一整天都在玩手机，用键盘弹了会卡农主旋律。突然想到，如果我最开始选择的是艺术是不是也会有好的结果。 烦，颓，麻痹，感觉像吸了毒，等待明天的审判。 7.28 也就是现在我写下这些文字的日子。 T1 ……随机……256……\\(2^{16}\\)……\\(k\\leq 15\\)…… 有一说一脑海中浮现过鸽巢原理，但是不知道怎么就一点也不想往里思考。我之前也好几次发生这种事情了，可能这就是命运吧。 写了 2.5+ 小时的乱搞，却没有丝毫优化。我感觉我不是在 NOI 考场上。我感觉我是在机房，在用和一道题犟一早上的架势做题。一个时间过半的广播让我意识到我的处境，于是赶紧弃了去写剩下两道。 期望得分：未知 T2 钻研了一会题面，发现答案的要求有点奇葩，想到了 SBtree 。但是不知道怎么在上面求解。观察两个特殊条件，首先 A 条件玩几下发现是斐波那契数列的两项，随便写写样例就过了。 然后就是使劲瞪，发现第二个字符操作很有性质，仿佛两个操作能找出来些什么……但是，这时候时间所剩无几，我没办法专心致志的思考了，状态极差。本着打比赛的原则，尽可能多得分，去看 T3。 期望得分：35 T3 最开始就看了题面，好像能用解释中的容斥得到一点分数。 但是时间不多，这个时候我想 \\(3^{2n}\\) 枚举。但是即使这样的时间也不够。干脆最后写 \\(n=1\\) 的第一档部分分了。 基本上就是弃了。 期望得分：8 下考后听说都不太会写，但都写了 T3 容斥。我只能寄希望于我的 T1 乱搞能多拿点分…… 事实上，也真的只有 T1 帮我拿了点分。 \\(44+0+0=44\\) 后面两个题全部白给是我没想到的，我的心情简直直接跌入谷底。说实话，今天确实状态不好，题我也确实不会，但是连暴力分都写挂也实在难以接受。 最终总成绩 \\(100+201+44=345\\)。 等待成绩出来的时候，有人说银牌线 \\(350\\)，我害怕极了。隔壁学校有个第一天低我将近 \\(50\\) 第二天直接反超的我的。烦透了。 不过，事在人为。如果我有银牌，那么我一定会去冲清华北大。如果没有，那就把这次失败当成一次教训。无论怎样，我都会接受。其实这些心理准备我是早都想好了的，只不过当事情真的来临的时候，还是会有些情绪波动。毕竟今天的分数实在出乎意料。 总而言之，还是学艺不精。一年多来，我一路靠着自己的执念、教练和同学们的帮助（无论是否退役）挺过来，即使教练不看好我，即使有多少次想过放弃，现在都是历史了。183 名，就是我最终的结果。这个名次恰到好处，虽然没有惬意的高三生活，但我本来渴求的也就是这些了。 OI，至少是高中的 OI 生活，再见。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"2021 NOI冬令营","slug":"2021 NOI冬令营","date":"2021-04-14T10:34:00.000Z","updated":"2024-08-13T02:32:21.458Z","comments":true,"path":"2021/04/14/2021 NOI冬令营/","permalink":"https://starcried.github.io/2021/04/14/2021%20NOI%E5%86%AC%E4%BB%A4%E8%90%A5/","excerpt":"","text":"…… 本来想写得稍微文艺一点的，但是停课这么久已经退化到不会写文章了。 毕竟省选了我才来补的，时间也过去很久了。 毕竟这次我没有获得任何奖项。 我唯一的获得就是…… ……好好看题。 （冬令营用了 C++11 导致只有 20 分但幸亏 SN 省不将冬令营成绩纳入省选所以当时没有退役的选手留）","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"2021 省选游记","slug":"2021 省选游记","date":"2021-04-14T10:21:00.000Z","updated":"2024-08-13T02:32:21.459Z","comments":true,"path":"2021/04/14/2021 省选游记/","permalink":"https://starcried.github.io/2021/04/14/2021%20%E7%9C%81%E9%80%89%E6%B8%B8%E8%AE%B0/","excerpt":"","text":"Day-1 我已经开始慌了。 下午一个人坐在机房，思考人生（颓废）。准备去吃饭的时候发现饭卡不见了，不知道怎的就特别焦虑，估计是被放大了。然后冷静了一下去三国杀抽了张卡，抽中了。 …… 感觉自己上火又感冒，特别难受。估计是过度焦虑了。晚上睡觉翻来覆去睡不着觉。不过我看得开。 Day1 游记个鬼啊就在自家学校=-= 早晨出宿舍门就一片雾气，和之前一样。 原以为七点四十多到已经很早了，没想到机房已经坐满了人，更没想到竟然八点多就把密码发了，最没想到的是 T1 还没开考就写完了。 旁边那个同志敲键盘非常响，尤其是在敲最后一个字符的时候会触发会心一击，手用力过大导致被键盘弹飞超过头顶，就离谱。 T2 大概想了想就能二分答案用双指针做了。不过在考场上应该是电脑太逊了的缘故导致满数据开 O2 跑了两秒。不过因为我心特别大，一点常数都没卡就直接去看 T3 了。（明智的选择） T3 大概留了两个半小时，明智个鬼一点想法都没有。写了个 SCC 结果还写挂了大样例使劲过不去。最后写了个 DFS 时间复杂度不对劲，不知道能过多少分。在最后我似乎想出来了一个 \\(O(n(n+m))\\) 的做法，但是当然没有时间也不知道对不对。 考完还自我感觉良好，去楼上颓了一下午。 Day2 （事态发生了一些变化） 早上起晚了，走进考场的时候老师正在写密码。有点慌张，刚坐下准备写个试验程序。在还没有打出 #include&lt;iostream&gt; 的时候，我忽然跟触了电一样意识到：昨天 Day1 所有的题我都用了快读的 isdigit，而我没有引用 cctype 头文件。（Dev 所有头文件中都有 config 所以编译能过） 这时候我真的完全慌了，怎么说呢，好久都没有这种浑身战栗的恐怖了。我完全没有心思去看题目。这时候我想到在 D 盘的选手包应该有测评时用的编译器。加载之后我试着引用了 iostream 头文件，发现可以通过编译。虽然我也忘了我到底写没写 iostream，但是当时是在考场上，我不能放弃希望。 尝试看 T1，以为是和昨天 T1 一样水的题，结果死盯了一个半小时没有任何想法。心态差点爆炸。仔细思索了一会发现如果先尽量更新大的答案可以少做好多次，想了好多方法卡卡不掉，于是写了个似乎是 \\(O(n^2\\log n)\\) 的程序继续了。 看 T2，发现 \\(O(n^2)\\) 暴力分好少，没有思路之后看部分分。第一档想到树剖，写了一会发现从上往下的好像要二分，要么就得记一下经过的链还记向下的东西，感觉有点难写就弃了（我是 SB）。 弃了之后看链的分（为啥没想到倍增），在奇怪的脑环境下我想到一个 HH的项链 的做法，结果反着的写挂了。心态又差点爆炸。不过老夫调整了心态之后决定先写 T3 暴力，因为时间不多了。 T3 快速想出了阶乘的暴力并快速写完了。发现正解好像是状压，不过没心情管了。 剩下的时间都在调 T2 链的情况，最后也没调出来。在觉得 Day1 有可能暴毙的情况下打成这个样子我已经很满足了。 下考之后声音颤抖地问同学们 isdigit 是否在其他头文件被引用。yhw 安慰我 cstring 是包含它的，心情好了点。头脑空洞地走出校门好久，完全忘掉了父亲大人还在等我…… 还是想起来了。遇到这种事情有亲人在身边真好。我几乎已经做好了退役的准备了。zyt 学长说过，OI 最重要的是过程而非结果。现在回文化课未必不是一件好事，或者一种选择。即使有可能背负失望甚至嘲笑，既然我已经长大了，受挫也是难免的。 Day3、4 回来在 NOI Lunux 试了一下，cstring 不行。几乎心肺停止（做了再好的准备也会这样）。不过试了一下 iostream 是可行的（心肺复苏），但是我实在忘了自己到底写没写 iostream 所以还是非常害怕。 想起了初中时同学（当时也是有力的竞争对手）在机房玩的 undertale 。又想到自己也许之后都没有机会在机房了，决定玩一下。 （然后就入粉了） 总之很好地转移了我的注意力。要不然我真的不知道这几天我应该怎么度过。 Day5 今天是出成绩的日子，说是早上十点出，结果到目前为止（2021年4月14日18:13:33）都没有出成绩。害我们整个机房（和 lwc）白等了一早上和一下午。 下午六点终于出了源代码。我看了一下，Day1 引用了 iostream，悬着的心终于还是悬着，因为不知道成绩怎么样（好像很多人民间数据都考得比我高 QAQ）。 到目前为止的情况就是这样。因为我 NOIp 的成绩，我觉得自己还是有希望进省队的吧…… 对了，panyf AK! 真的谢谢 panyf XD UPD 4.15 今天是真正出成绩的日子。 早上十点左右，咕了好久的 CCF 终于把名单发下来了。非常激动地打开。 先按照省选总分排序，发现我竟然是第五名……没想到 D1T2 真的被卡常了（不明智的选择）而且 D1T3 还只拿了第一档分数。 D2T2 这种人均切的题如果切了就进 A 队。不过 Day1 没有 CE 我已经是谢天谢地，也没有什么其他奢求了。（之后大概会都用万能头文件） 本来已经做好退役的准备，现在如果没有什么问题的话大概我要请大家吃饭是板上钉钉了。（幸亏我 NOIp 分数高） 可惜的是机房里只有六个人进了省队，三个同志因为在同一道题上的失误结束了 OI 生涯。希望这段时间的学习能让他们在文化课取得较好的成绩。我本来也是要退役的人，这次能有机会继续也是靠着他们的帮助。xgd 校队不会让他们失望的。我也会尽力不给他们丢脸。 当然，这次省选成绩不算太好，刘老师仍然认为我的实力不足（当然也是事实）。今后只有倍加努力了。（毕竟是 B 队）","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"NOIp 2020","slug":"NOIp 2020","date":"2020-12-07T02:57:00.000Z","updated":"2024-08-13T02:32:21.501Z","comments":true,"path":"2020/12/07/NOIp 2020/","permalink":"https://starcried.github.io/2020/12/07/NOIp%202020/","excerpt":"","text":"Day-1 我已经开始慌了。 不知道前路如何。不想回文化课。唯一一次机会，可是这几天却一直在颓，不颓就慌。 没心思写题，导致这几天看的题啥都不会。不知道考试当天又会出什么幺蛾子。 啊啊啊，烦。 有兽焉400话更新了，果然不负众望，我更加焦虑了。 想想CSP考场上干的事情，怎么都发挥不出自己的水平，还是因为我的水平真的…… 不想，不管，不慌，不慌。 父亲说我变了。几个月来，我确实变得——父亲说是——不太自信。也许是真的意识到了自己的差距，导致把这个事情当做了理所当然罢。这不好。 话说如此，无论我怎么慌，无论将来会发生什么事，现在，我只能任命运的三女神将我的命运安排。 Day 1 考场。全部能写的写完，暴力都打满。 最后一个小时，我不知道自己应该干什么了。我认真思考了一下是否要玩扫雷，但还是尝试写了一下T4低维部分分。可惜，没有想到记忆化的方法，中间的贡献硬是在找循环节，结果没写出来。但是至少没有让我剩下的一个小时白白浪费（可能） 下考场，感觉自己考得还不错。 T1水题，但是我大意了，没想到要高精。（我劝毒瘤出题人耗子尾汁） T2我没预处理答案，用了个树状数组记录贡献，整体复杂度 \\(n\\ln n*(log n+26)\\) 。但是这是我第一次在考场上用字符串哈希（不会用KMP），选的模数是 \\(1e9+17\\) （非质数）（但是seed与其互质），所以我慌得一批。 T3只会暴力，用的方法是每次将一个塔距栈底最近的颜色不同的位置到栈顶所有的东西拿出去，然后将与它颜色相同的放进去。应该能过40分。 T4，就像我上面说的，没想到记忆化，30分白给。 我尽力了。我只能这么想。 Day 2 luogu民间数据的测试成绩已经出来了，差不多就是估分成绩吧： \\(90 + 84 + 40 + 30 = 244\\) 大概就是这样了，实际上排名还是挺靠前的。无论结果怎么样，至少没给父母丢脸，没给赵班主任丢脸。 至于之后的路，还得我自己选。等成绩出来……再说。 另外，考完试的心情真是轻松。我好久没有体验到这种胜利(?)的感觉了owo Day 3 一些同学已经回文化课去了，但只是一段时间，他们应该仍然会参加省选。 想当初我还对OI一窍不通，现在感觉真的已经入门了，这真得感谢所有无私奉献的、真诚（fAKe）善良的机房伙伴们。这几个月的生活一定会成为我人生中最珍贵的回忆之一，并且，可能这种生活还要持续一段时间呢。 等成绩出来，今天颓废了一天。写一写颓废（只看OI的伙计们可以散了） 刺客信条英灵殿云通关了。感触挺深的，现代剧情是真的NB，艾沃尔的人物形象也非常鲜活。可能是因为维京人可男可女不会因为性别导致个性缺陷（bushi） 简单来说，艾沃尔是奥丁血脉的继承者，在小时候被狼亲了一下导致奥丁血脉觉醒。CG最后的部分明显是有冰面破碎的，可能是奥丁救了艾沃尔，改变了命运。 艾沃尔最终战胜了奥丁，并不是用维京人所崇尚的战斗的方式，而是将自己的荣耀，代表能去英灵殿的斧子放手了。奥丁控制斧子应该就是说是利用维京人的尚武、希望能去英灵殿的心理来控制人类，但是艾沃尔放弃了奥丁所给的力量，荣耀，金钱等，和自己的信仰，得到了 everything else ，也明白了他父亲当时做的选择。 可惜，这并不能改变什么。这些古代的英雄们最终也没能知道自己在对抗什么。什么记忆的传承者，什么刺客无形者，人类本就是伊述人造出来的工具，无论祖先们经历了多少人间冷暖，明白了多少人间哲理，最后都会像 Ezio 一样，明白了自己的使命，或是工具人，或是完全没有，然后自己消逝。这一切都是伊述人的计划，对于他们，人类不过是载体，是工具，是私欲的产物。他们将自己的种族神化，利用人类的信仰和本性完成拯救自己种族的计划。在这样的世界观下，人类就是被限制了科技的井底之蛙，所谓自由意志和追求的信仰全部都是骗局，绝无翻身可能。 一不小心写多了。我的意思是，打不过了，我还是像艾沃尔一样专注于自己在乎的事情，不要像西格德一样傻不拉几。当只咸鱼他不香吗。 颓完了，OI还得继续。卷王们在卷LCT，我可不能落下。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"CSP-S 2020","slug":"CSP-S 2020","date":"2020-11-09T03:09:00.000Z","updated":"2024-08-13T02:32:21.486Z","comments":true,"path":"2020/11/09/CSP-S 2020/","permalink":"https://starcried.github.io/2020/11/09/CSP-S%202020/","excerpt":"","text":"Day 1 游记个鬼啊就在自家学校=-= 早上宿舍待不了，去机房颓废，看了几集猫和老鼠，并且把看门狗军团的流程看完了（真棒），甚至在考试之前把老师给的巧克力也吃完了。 期间zyt学长来摸鱼。他们今天本来是学考模拟，结果下午要请考试假去参加另一个考试XD 老师说下午提前一个小时进场，所以早早回宿舍。1点多被回来的舍友吵醒了。脑子进入了一种困倦却清醒的状态，一直在想考试的事情，浑身发热却冷得颤抖，根本没办法再入睡。磨蹭了20分钟左右，准备去考场。 13:30，准时到达考场，结果监考老师甚至还没来。不让进考场。还是有一点困。 14:00，已经来了几个铁一初中部的学生。在考场门口长长的走廊上走来走去，聒噪得很。说着什么要考树上的数、树上的树、数上的数、数上的树……但我却实有一种不祥的预感。 进入考场。 T1 模拟。我最不擅长的领域。而且是算日期。像我这种连今天日期和自己年龄都记不住，历史题一问年份绝对全错的人，一看到算年份的问题就直接去世。况且还区分了格里高利历和儒略历。特判太多。 其实每400年一个周期后内部直接暴力讨论就行。但是太懒，太傻，太着急。直接写个儒略历的分暂且跳过。 T2 水题，但是会爆unsigned long long——但是我当时想的是 \\(n\\) 不会等于0，于是写了个愚蠢的 \\(2^{63}-n+2^{63}\\) 来表示 \\(2^{64}\\) 。可惜，\\(n\\) 可以为0。当时太着急，没看到。 还有就是，没有看到\"所有的 \\(p_i\\) 互不相同\"的条件，傻不愣登的以为后重复结果写了个map，当时竟然以为能过。所以后面分直接白给。 半个小时写完T2之后，回去写T1，结果只剩半个小时的时候样例3还没过。看来这次已经挂了。喝口水冷静一下之后，决定放弃T1去打T3和T4暴力。 T3 题目有点诡异，这种条件看起来像个图，后面的提示也提示了图。那么有可能是个类似有向图的什么东西？而且只有乘和加，根据这种运算的性质好像有点想法…… 但是再有想法现在没时间了。15min写了个线段树，结果乘法的tag忘记初始化为1。到最后都没发现。一出考场就发现了 T4 只在开始的时候看了一眼，有想法，好像是原题，但是最后没写……本来会有70分，至少20分暴力分的。 出考场，知道已经凉了。好像除了我其他人都考得挺好的。 没有估分，不敢。 晚上到机房。和老师谈了一下。MY学长也在，他安慰了我一下，毕竟这次考试听说是不计入选省队的成绩的。而且有分就能去NOIP，下次好好考就行了。 老师早上被电动车撞了，肇事者逃逸，好像伤到神经了。 自己一个人在机房待到晚上。 川普同志败了。 Day +1:刺客信条：英灵殿 B站视频解说更新，快发售了 Day +2 两天后。 程序下发，luogu民间数据出来。我测了90分。 哈哈。 早知道就把T1后面分直接扔掉，写写T3T4暴力都能多得点分。 现在心情简单。认真思考了一下要不要主动退役。还是看看NOIP成绩吧。 11.17 UPD 成绩出来了，145分。 第一题公元前的对了，只有40分，后来发现错误的点全是格里高利历的百年中的四年闰年，没取模，智障错误，难受。 第二题果然爆ULL了，眼瞎没看到数据范围，难受。 第三题暴力竟然能过70分，结果我线段树tag没初始化，白给了60分。智障错误，难受。 第四题考场上看出来暴力了，结果连20分都没来得及写。难受。 总结，白给了至少145分，都是在时间限制内能拿的分数。究其原因，经验不足是一方面，临场心态是一方面，根本上还是我太菜了。 菜，尽量改变，改变不了的部分就只能努力学习考场得分技巧了（ 还是挺难受的。希望NOIP我不退役。","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]},{"title":"CSP-S 2020 初赛","slug":"CSP-S 2020 初赛","date":"2020-10-11T07:19:00.000Z","updated":"2024-08-13T02:32:21.486Z","comments":true,"path":"2020/10/11/CSP-S 2020 初赛/","permalink":"https://starcried.github.io/2020/10/11/CSP-S%202020%20%E5%88%9D%E8%B5%9B/","excerpt":"","text":"游记个鬼啊跨条街就到了=-= 不分Day反正就一天。9:30开考，8:30起床。 下雨了，一出宿舍门整个学校全被白色的雾气笼罩。愚以为这是祥瑞之气，昨夜似有麒麟貔貅路过，祝我今日初赛RP++ …… 进场，去年的经验很有用，比如试题必须得先解压再用Adobe Reader打开才能看（毒瘤） 然而因为完全没复习，最后一道完成程序题全错。（虽然是模拟赛原题我还做过，但实在跟不上出题人的思路） 记录一下比赛时的心理过程： 就这就这就这？ 卧槽，内存不会算 卧槽，CRT咋算来着（然而可以枚举解决，但是我不知道为啥脑子抽风蒙了一个直接跳过） 卧槽，后缀表达式忘了 认不得香农……蒙一个冯·诺依曼吧（因为机房有他的画像） dfs的时间复杂度算错（e的复杂度因为是同阶的平常被省略了是吗……） 卧槽这个程序开了1e9的字符串数组哈哈哈哈哈 这个Map是个啥呀手动线性实现哈哈哈哈哈 感觉完成程序题还可以 最后一道题只剩15min做完的（结果最后一道全错） 时间复杂度问题错的好多QAQ还是太菜了QAQ 读程题，第二个一看就是nth_element实现（真的是这样实现的吗=-=）前几天刚看过，虽然有些蒙错了XD 字符串那个真……完了看不懂暴力了 下考之后似乎还浑身轻松。雨停了，直接回学校。中午以为机房有人，结果没有，懒得回宿舍，于是就在附近阶梯教室的椅子上睡了一个小时（冷） 对了下答案，好像只有我一个人考得那么菜。 没事，反正去年我瞎蒙都过了，今年再过不了了我直接退役算了。（反正少女省初赛分数线低） 最后模拜一下香农。 香农 建议机房加挂这位伟人的画像","categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"}]}],"categories":[{"name":"日记","slug":"日记","permalink":"https://starcried.github.io/categories/%E6%97%A5%E8%AE%B0/"},{"name":"Marathon","slug":"Marathon","permalink":"https://starcried.github.io/categories/Marathon/"},{"name":"创作","slug":"创作","permalink":"https://starcried.github.io/categories/%E5%88%9B%E4%BD%9C/"},{"name":"Web","slug":"Web","permalink":"https://starcried.github.io/categories/Web/"},{"name":"算法","slug":"算法","permalink":"https://starcried.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"题解","slug":"题解","permalink":"https://starcried.github.io/categories/%E9%A2%98%E8%A7%A3/"},{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/categories/%E6%95%B0%E5%AD%A6/"},{"name":"编程","slug":"编程","permalink":"https://starcried.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"随想","slug":"随想","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%83%B3/"},{"name":"生活","slug":"生活","permalink":"https://starcried.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"点评","slug":"点评","permalink":"https://starcried.github.io/tags/%E7%82%B9%E8%AF%84/"},{"name":"学业","slug":"学业","permalink":"https://starcried.github.io/tags/%E5%AD%A6%E4%B8%9A/"},{"name":"Me","slug":"Me","permalink":"https://starcried.github.io/tags/Me/"},{"name":"微光","slug":"微光","permalink":"https://starcried.github.io/tags/%E5%BE%AE%E5%85%89/"},{"name":"3D 建模","slug":"3D-建模","permalink":"https://starcried.github.io/tags/3D-%E5%BB%BA%E6%A8%A1/"},{"name":"游记","slug":"游记","permalink":"https://starcried.github.io/tags/%E6%B8%B8%E8%AE%B0/"},{"name":"blog","slug":"blog","permalink":"https://starcried.github.io/tags/blog/"},{"name":"手工","slug":"手工","permalink":"https://starcried.github.io/tags/%E6%89%8B%E5%B7%A5/"},{"name":"博客园","slug":"博客园","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"ACM","slug":"ACM","permalink":"https://starcried.github.io/tags/ACM/"},{"name":"OI","slug":"OI","permalink":"https://starcried.github.io/tags/OI/"},{"name":"图论","slug":"图论","permalink":"https://starcried.github.io/tags/%E5%9B%BE%E8%AE%BA/"},{"name":"2-SAT","slug":"2-SAT","permalink":"https://starcried.github.io/tags/2-SAT/"},{"name":"字符串","slug":"字符串","permalink":"https://starcried.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"Adobe","slug":"Adobe","permalink":"https://starcried.github.io/tags/Adobe/"},{"name":"博弈论","slug":"博弈论","permalink":"https://starcried.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"},{"name":"DP","slug":"DP","permalink":"https://starcried.github.io/tags/DP/"},{"name":"树","slug":"树","permalink":"https://starcried.github.io/tags/%E6%A0%91/"},{"name":"ST表","slug":"ST表","permalink":"https://starcried.github.io/tags/ST%E8%A1%A8/"},{"name":"数论","slug":"数论","permalink":"https://starcried.github.io/tags/%E6%95%B0%E8%AE%BA/"},{"name":"随机化","slug":"随机化","permalink":"https://starcried.github.io/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96/"},{"name":"圆方树","slug":"圆方树","permalink":"https://starcried.github.io/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"},{"name":"线段树","slug":"线段树","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"组合数学","slug":"组合数学","permalink":"https://starcried.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"},{"name":"多项式","slug":"多项式","permalink":"https://starcried.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"},{"name":"线性代数","slug":"线性代数","permalink":"https://starcried.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"分块","slug":"分块","permalink":"https://starcried.github.io/tags/%E5%88%86%E5%9D%97/"},{"name":"搜索","slug":"搜索","permalink":"https://starcried.github.io/tags/%E6%90%9C%E7%B4%A2/"},{"name":"几何","slug":"几何","permalink":"https://starcried.github.io/tags/%E5%87%A0%E4%BD%95/"},{"name":"分治","slug":"分治","permalink":"https://starcried.github.io/tags/%E5%88%86%E6%B2%BB/"},{"name":"高斯消元","slug":"高斯消元","permalink":"https://starcried.github.io/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"},{"name":"模拟","slug":"模拟","permalink":"https://starcried.github.io/tags/%E6%A8%A1%E6%8B%9F/"},{"name":"优化","slug":"优化","permalink":"https://starcried.github.io/tags/%E4%BC%98%E5%8C%96/"},{"name":"平衡树","slug":"平衡树","permalink":"https://starcried.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"},{"name":"交互","slug":"交互","permalink":"https://starcried.github.io/tags/%E4%BA%A4%E4%BA%92/"},{"name":"构造","slug":"构造","permalink":"https://starcried.github.io/tags/%E6%9E%84%E9%80%A0/"},{"name":"贪心","slug":"贪心","permalink":"https://starcried.github.io/tags/%E8%B4%AA%E5%BF%83/"},{"name":"树状数组","slug":"树状数组","permalink":"https://starcried.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"},{"name":"二分","slug":"二分","permalink":"https://starcried.github.io/tags/%E4%BA%8C%E5%88%86/"},{"name":"数学","slug":"数学","permalink":"https://starcried.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"二分法","slug":"二分法","permalink":"https://starcried.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"},{"name":"逆序对","slug":"逆序对","permalink":"https://starcried.github.io/tags/%E9%80%86%E5%BA%8F%E5%AF%B9/"},{"name":"并查集","slug":"并查集","permalink":"https://starcried.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"},{"name":"exgcd","slug":"exgcd","permalink":"https://starcried.github.io/tags/exgcd/"},{"name":"堆","slug":"堆","permalink":"https://starcried.github.io/tags/%E5%A0%86/"},{"name":"网络流","slug":"网络流","permalink":"https://starcried.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"树链剖分","slug":"树链剖分","permalink":"https://starcried.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"},{"name":"点分治","slug":"点分治","permalink":"https://starcried.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"},{"name":"单调栈","slug":"单调栈","permalink":"https://starcried.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"},{"name":"C++","slug":"C","permalink":"https://starcried.github.io/tags/C/"}]}